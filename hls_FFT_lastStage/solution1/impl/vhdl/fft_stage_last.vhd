-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_stage_last is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_0_ce0 : OUT STD_LOGIC;
    X_R_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_0_ce1 : OUT STD_LOGIC;
    X_R_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_1_ce0 : OUT STD_LOGIC;
    X_R_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_1_ce1 : OUT STD_LOGIC;
    X_R_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_2_ce0 : OUT STD_LOGIC;
    X_R_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_2_ce1 : OUT STD_LOGIC;
    X_R_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_3_ce0 : OUT STD_LOGIC;
    X_R_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_3_ce1 : OUT STD_LOGIC;
    X_R_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_0_ce0 : OUT STD_LOGIC;
    X_I_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_0_ce1 : OUT STD_LOGIC;
    X_I_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_1_ce0 : OUT STD_LOGIC;
    X_I_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_1_ce1 : OUT STD_LOGIC;
    X_I_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_2_ce0 : OUT STD_LOGIC;
    X_I_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_2_ce1 : OUT STD_LOGIC;
    X_I_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_3_ce0 : OUT STD_LOGIC;
    X_I_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_3_ce1 : OUT STD_LOGIC;
    X_I_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_0_ce0 : OUT STD_LOGIC;
    OUT_R_0_we0 : OUT STD_LOGIC;
    OUT_R_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_0_ce1 : OUT STD_LOGIC;
    OUT_R_0_we1 : OUT STD_LOGIC;
    OUT_R_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_1_ce0 : OUT STD_LOGIC;
    OUT_R_1_we0 : OUT STD_LOGIC;
    OUT_R_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_1_ce1 : OUT STD_LOGIC;
    OUT_R_1_we1 : OUT STD_LOGIC;
    OUT_R_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_2_ce0 : OUT STD_LOGIC;
    OUT_R_2_we0 : OUT STD_LOGIC;
    OUT_R_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_2_ce1 : OUT STD_LOGIC;
    OUT_R_2_we1 : OUT STD_LOGIC;
    OUT_R_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_3_ce0 : OUT STD_LOGIC;
    OUT_R_3_we0 : OUT STD_LOGIC;
    OUT_R_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_3_ce1 : OUT STD_LOGIC;
    OUT_R_3_we1 : OUT STD_LOGIC;
    OUT_R_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_0_ce0 : OUT STD_LOGIC;
    OUT_I_0_we0 : OUT STD_LOGIC;
    OUT_I_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_0_ce1 : OUT STD_LOGIC;
    OUT_I_0_we1 : OUT STD_LOGIC;
    OUT_I_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_1_ce0 : OUT STD_LOGIC;
    OUT_I_1_we0 : OUT STD_LOGIC;
    OUT_I_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_1_ce1 : OUT STD_LOGIC;
    OUT_I_1_we1 : OUT STD_LOGIC;
    OUT_I_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_2_ce0 : OUT STD_LOGIC;
    OUT_I_2_we0 : OUT STD_LOGIC;
    OUT_I_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_2_ce1 : OUT STD_LOGIC;
    OUT_I_2_we1 : OUT STD_LOGIC;
    OUT_I_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_3_ce0 : OUT STD_LOGIC;
    OUT_I_3_we0 : OUT STD_LOGIC;
    OUT_I_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_3_ce1 : OUT STD_LOGIC;
    OUT_I_3_we1 : OUT STD_LOGIC;
    OUT_I_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_stage_last is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft_stage_last_fft_stage_last,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=273,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=5032,HLS_SYN_LUT=7661,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_200 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv10_2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_8_fu_653_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal W_real_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_real_ce0 : STD_LOGIC;
    signal W_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_real_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_real_ce1 : STD_LOGIC;
    signal W_real_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_imag_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_imag_ce0 : STD_LOGIC;
    signal W_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_imag_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_imag_ce1 : STD_LOGIC;
    signal W_imag_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal e2_V_reg_1042 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal e2_V_reg_1042_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal e2_V_reg_1042_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal e2_V_reg_1042_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal e2_V_reg_1042_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal e2_V_reg_1042_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal e2_V_reg_1042_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal e2_V_reg_1042_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal e2_V_reg_1042_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal lshr_ln_reg_1064 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln42_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_1092_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln42_1_reg_1096 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter11_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter12_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter13_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter14_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln42_1_reg_1096_pp0_iter15_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal c2_reg_1131 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_reg_1137 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_775_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1143 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_796_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal c2_1_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_1_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_817_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_838_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_reg_1173 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_608_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1179 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_616_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_1189 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_620_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul2_reg_1194 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_1_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul10_1_reg_1209 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul13_1_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_reg_1219 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_1247 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_1247_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_1247_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_1247_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_1247_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_1247_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_1247_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln2_reg_1251 : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln2_reg_1251_pp0_iter10_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln2_reg_1251_pp0_iter11_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln2_reg_1251_pp0_iter12_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln2_reg_1251_pp0_iter13_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln2_reg_1251_pp0_iter14_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal lshr_ln2_reg_1251_pp0_iter15_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_560_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_R_reg_1276 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_564_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_I_reg_1282 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_909_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1288 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_926_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1294 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_568_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_R_1_reg_1300 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_I_1_reg_1306 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_943_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1312 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_960_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_1318 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_576_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_1324 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_580_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub1_reg_1329 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_584_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_1334 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_588_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_reg_1339 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln42_5_fu_969_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln42_5_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln43_5_fu_973_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln43_5_reg_1350 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln44_1_fu_977_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln44_1_reg_1356 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln45_1_fu_981_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln45_1_reg_1362 : STD_LOGIC_VECTOR (31 downto 0);
    signal e2_V_cast6_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln39_1_fu_700_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_fu_684_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln39_2_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_1_fu_867_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_2_fu_893_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln44_fu_1011_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_102 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln47_fu_751_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_j_load_1 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_fu_106 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln886_fu_728_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_sig_allocacmp_e2_V : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln42_2_fu_985_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln44_fu_1006_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln43_2_fu_1001_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln45_fu_1022_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_10_fu_664_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln886_fu_678_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal empty_12_fu_674_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln42_fu_708_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln39_fu_734_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_775_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_775_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_796_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_796_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_817_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_817_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_838_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_838_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_11_fu_851_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln44_fu_875_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln39_1_fu_854_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_909_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_926_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_926_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_943_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_943_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_960_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_960_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_596_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_600_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_604_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_279 : BOOLEAN;
    signal ap_enable_state17_pp0_iter16_stage0 : BOOLEAN;
    signal ap_enable_operation_292 : BOOLEAN;
    signal ap_enable_operation_281 : BOOLEAN;
    signal ap_enable_operation_294 : BOOLEAN;
    signal ap_enable_operation_284 : BOOLEAN;
    signal ap_enable_operation_297 : BOOLEAN;
    signal ap_enable_operation_286 : BOOLEAN;
    signal ap_enable_operation_299 : BOOLEAN;
    signal ap_enable_operation_302 : BOOLEAN;
    signal ap_enable_operation_312 : BOOLEAN;
    signal ap_enable_operation_304 : BOOLEAN;
    signal ap_enable_operation_314 : BOOLEAN;
    signal ap_enable_operation_307 : BOOLEAN;
    signal ap_enable_operation_317 : BOOLEAN;
    signal ap_enable_operation_309 : BOOLEAN;
    signal ap_enable_operation_319 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_644 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stage_last_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stage_last_mux_21_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stage_last_W_real_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stage_last_W_imag_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stage_last_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    W_real_U : component fft_stage_last_W_real_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_real_address0,
        ce0 => W_real_ce0,
        q0 => W_real_q0,
        address1 => W_real_address1,
        ce1 => W_real_ce1,
        q1 => W_real_q1);

    W_imag_U : component fft_stage_last_W_imag_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_imag_address0,
        ce0 => W_imag_ce0,
        q0 => W_imag_q0,
        address1 => W_imag_address1,
        ce1 => W_imag_ce1,
        q1 => W_imag_q1);

    fsub_32ns_32ns_32_5_full_dsp_1_U1 : component fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_1179,
        din1 => mul7_reg_1184,
        ce => ap_const_logic_1,
        dout => grp_fu_560_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U2 : component fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul1_reg_1189,
        din1 => mul2_reg_1194,
        ce => ap_const_logic_1,
        dout => grp_fu_564_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U3 : component fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_1_reg_1199,
        din1 => mul7_1_reg_1204,
        ce => ap_const_logic_1,
        dout => grp_fu_568_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U4 : component fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul10_1_reg_1209,
        din1 => mul13_1_reg_1214,
        ce => ap_const_logic_1,
        dout => grp_fu_572_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U5 : component fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1288,
        din1 => temp_R_reg_1276,
        ce => ap_const_logic_1,
        dout => grp_fu_576_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U6 : component fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_1294,
        din1 => temp_I_reg_1282,
        ce => ap_const_logic_1,
        dout => grp_fu_580_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U7 : component fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1288,
        din1 => temp_R_reg_1276,
        ce => ap_const_logic_1,
        dout => grp_fu_584_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U8 : component fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_1294,
        din1 => temp_I_reg_1282,
        ce => ap_const_logic_1,
        dout => grp_fu_588_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U9 : component fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_1312,
        din1 => temp_R_1_reg_1300,
        ce => ap_const_logic_1,
        dout => grp_fu_592_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U10 : component fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_1318,
        din1 => temp_I_1_reg_1306,
        ce => ap_const_logic_1,
        dout => grp_fu_596_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U11 : component fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_reg_1312,
        din1 => temp_R_1_reg_1300,
        ce => ap_const_logic_1,
        dout => grp_fu_600_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U12 : component fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_reg_1318,
        din1 => temp_I_1_reg_1306,
        ce => ap_const_logic_1,
        dout => grp_fu_604_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U13 : component fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_1143,
        din1 => c2_reg_1131,
        ce => ap_const_logic_1,
        dout => grp_fu_608_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U14 : component fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_1149,
        din1 => s2_reg_1137,
        ce => ap_const_logic_1,
        dout => grp_fu_612_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U15 : component fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_1149,
        din1 => c2_reg_1131,
        ce => ap_const_logic_1,
        dout => grp_fu_616_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U16 : component fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_1143,
        din1 => s2_reg_1137,
        ce => ap_const_logic_1,
        dout => grp_fu_620_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U17 : component fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_1167,
        din1 => c2_1_reg_1155,
        ce => ap_const_logic_1,
        dout => grp_fu_624_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U18 : component fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_reg_1173,
        din1 => s2_1_reg_1161,
        ce => ap_const_logic_1,
        dout => grp_fu_628_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U19 : component fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_5_reg_1173,
        din1 => c2_1_reg_1155,
        ce => ap_const_logic_1,
        dout => grp_fu_632_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U20 : component fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_1167,
        din1 => s2_1_reg_1161,
        ce => ap_const_logic_1,
        dout => grp_fu_636_p2);

    mux_42_32_1_1_U21 : component fft_stage_last_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => tmp_fu_775_p3,
        din3 => tmp_fu_775_p4,
        din4 => lshr_ln_reg_1064,
        dout => tmp_fu_775_p6);

    mux_42_32_1_1_U22 : component fft_stage_last_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => tmp_1_fu_796_p3,
        din3 => tmp_1_fu_796_p4,
        din4 => lshr_ln_reg_1064,
        dout => tmp_1_fu_796_p6);

    mux_42_32_1_1_U23 : component fft_stage_last_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => tmp_4_fu_817_p3,
        din3 => tmp_4_fu_817_p4,
        din4 => lshr_ln_reg_1064,
        dout => tmp_4_fu_817_p6);

    mux_42_32_1_1_U24 : component fft_stage_last_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => ap_const_lv32_0,
        din1 => ap_const_lv32_0,
        din2 => tmp_5_fu_838_p3,
        din3 => tmp_5_fu_838_p4,
        din4 => lshr_ln_reg_1064,
        dout => tmp_5_fu_838_p6);

    mux_21_32_1_1_U25 : component fft_stage_last_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_2_fu_909_p1,
        din1 => tmp_2_fu_909_p2,
        din2 => tmp_9_reg_1219,
        dout => tmp_2_fu_909_p4);

    mux_21_32_1_1_U26 : component fft_stage_last_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_3_fu_926_p1,
        din1 => tmp_3_fu_926_p2,
        din2 => tmp_9_reg_1219,
        dout => tmp_3_fu_926_p4);

    mux_21_32_1_1_U27 : component fft_stage_last_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_6_fu_943_p1,
        din1 => tmp_6_fu_943_p2,
        din2 => tmp_9_reg_1219,
        dout => tmp_6_fu_943_p4);

    mux_21_32_1_1_U28 : component fft_stage_last_mux_21_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 1,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_7_fu_960_p1,
        din1 => tmp_7_fu_960_p2,
        din2 => tmp_9_reg_1219,
        dout => tmp_7_fu_960_p4);

    flow_control_loop_pipe_U : component fft_stage_last_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_644)) then
                if ((tmp_8_fu_653_p3 = ap_const_lv1_0)) then 
                    i_fu_106 <= add_ln886_fu_728_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_106 <= ap_const_lv10_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_644)) then
                if ((tmp_8_fu_653_p3 = ap_const_lv1_0)) then 
                    j_fu_102 <= add_ln47_fu_751_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_102 <= ap_const_lv11_200;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add1_reg_1339 <= grp_fu_588_p2;
                add_reg_1334 <= grp_fu_584_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                bitcast_ln42_5_reg_1344 <= bitcast_ln42_5_fu_969_p1;
                bitcast_ln43_5_reg_1350 <= bitcast_ln43_5_fu_973_p1;
                bitcast_ln44_1_reg_1356 <= bitcast_ln44_1_fu_977_p1;
                bitcast_ln45_1_reg_1362 <= bitcast_ln45_1_fu_981_p1;
                e2_V_reg_1042_pp0_iter2_reg <= e2_V_reg_1042_pp0_iter1_reg;
                e2_V_reg_1042_pp0_iter3_reg <= e2_V_reg_1042_pp0_iter2_reg;
                e2_V_reg_1042_pp0_iter4_reg <= e2_V_reg_1042_pp0_iter3_reg;
                e2_V_reg_1042_pp0_iter5_reg <= e2_V_reg_1042_pp0_iter4_reg;
                e2_V_reg_1042_pp0_iter6_reg <= e2_V_reg_1042_pp0_iter5_reg;
                e2_V_reg_1042_pp0_iter7_reg <= e2_V_reg_1042_pp0_iter6_reg;
                e2_V_reg_1042_pp0_iter8_reg <= e2_V_reg_1042_pp0_iter7_reg;
                icmp_ln42_reg_1092_pp0_iter10_reg <= icmp_ln42_reg_1092_pp0_iter9_reg;
                icmp_ln42_reg_1092_pp0_iter11_reg <= icmp_ln42_reg_1092_pp0_iter10_reg;
                icmp_ln42_reg_1092_pp0_iter12_reg <= icmp_ln42_reg_1092_pp0_iter11_reg;
                icmp_ln42_reg_1092_pp0_iter13_reg <= icmp_ln42_reg_1092_pp0_iter12_reg;
                icmp_ln42_reg_1092_pp0_iter14_reg <= icmp_ln42_reg_1092_pp0_iter13_reg;
                icmp_ln42_reg_1092_pp0_iter15_reg <= icmp_ln42_reg_1092_pp0_iter14_reg;
                icmp_ln42_reg_1092_pp0_iter2_reg <= icmp_ln42_reg_1092_pp0_iter1_reg;
                icmp_ln42_reg_1092_pp0_iter3_reg <= icmp_ln42_reg_1092_pp0_iter2_reg;
                icmp_ln42_reg_1092_pp0_iter4_reg <= icmp_ln42_reg_1092_pp0_iter3_reg;
                icmp_ln42_reg_1092_pp0_iter5_reg <= icmp_ln42_reg_1092_pp0_iter4_reg;
                icmp_ln42_reg_1092_pp0_iter6_reg <= icmp_ln42_reg_1092_pp0_iter5_reg;
                icmp_ln42_reg_1092_pp0_iter7_reg <= icmp_ln42_reg_1092_pp0_iter6_reg;
                icmp_ln42_reg_1092_pp0_iter8_reg <= icmp_ln42_reg_1092_pp0_iter7_reg;
                icmp_ln42_reg_1092_pp0_iter9_reg <= icmp_ln42_reg_1092_pp0_iter8_reg;
                icmp_ln44_reg_1247 <= icmp_ln44_fu_878_p2;
                icmp_ln44_reg_1247_pp0_iter10_reg <= icmp_ln44_reg_1247;
                icmp_ln44_reg_1247_pp0_iter11_reg <= icmp_ln44_reg_1247_pp0_iter10_reg;
                icmp_ln44_reg_1247_pp0_iter12_reg <= icmp_ln44_reg_1247_pp0_iter11_reg;
                icmp_ln44_reg_1247_pp0_iter13_reg <= icmp_ln44_reg_1247_pp0_iter12_reg;
                icmp_ln44_reg_1247_pp0_iter14_reg <= icmp_ln44_reg_1247_pp0_iter13_reg;
                icmp_ln44_reg_1247_pp0_iter15_reg <= icmp_ln44_reg_1247_pp0_iter14_reg;
                lshr_ln2_reg_1251 <= e2_V_reg_1042_pp0_iter8_reg(8 downto 2);
                lshr_ln2_reg_1251_pp0_iter10_reg <= lshr_ln2_reg_1251;
                lshr_ln2_reg_1251_pp0_iter11_reg <= lshr_ln2_reg_1251_pp0_iter10_reg;
                lshr_ln2_reg_1251_pp0_iter12_reg <= lshr_ln2_reg_1251_pp0_iter11_reg;
                lshr_ln2_reg_1251_pp0_iter13_reg <= lshr_ln2_reg_1251_pp0_iter12_reg;
                lshr_ln2_reg_1251_pp0_iter14_reg <= lshr_ln2_reg_1251_pp0_iter13_reg;
                lshr_ln2_reg_1251_pp0_iter15_reg <= lshr_ln2_reg_1251_pp0_iter14_reg;
                lshr_ln42_1_reg_1096_pp0_iter10_reg <= lshr_ln42_1_reg_1096_pp0_iter9_reg;
                lshr_ln42_1_reg_1096_pp0_iter11_reg <= lshr_ln42_1_reg_1096_pp0_iter10_reg;
                lshr_ln42_1_reg_1096_pp0_iter12_reg <= lshr_ln42_1_reg_1096_pp0_iter11_reg;
                lshr_ln42_1_reg_1096_pp0_iter13_reg <= lshr_ln42_1_reg_1096_pp0_iter12_reg;
                lshr_ln42_1_reg_1096_pp0_iter14_reg <= lshr_ln42_1_reg_1096_pp0_iter13_reg;
                lshr_ln42_1_reg_1096_pp0_iter15_reg <= lshr_ln42_1_reg_1096_pp0_iter14_reg;
                lshr_ln42_1_reg_1096_pp0_iter2_reg <= lshr_ln42_1_reg_1096_pp0_iter1_reg;
                lshr_ln42_1_reg_1096_pp0_iter3_reg <= lshr_ln42_1_reg_1096_pp0_iter2_reg;
                lshr_ln42_1_reg_1096_pp0_iter4_reg <= lshr_ln42_1_reg_1096_pp0_iter3_reg;
                lshr_ln42_1_reg_1096_pp0_iter5_reg <= lshr_ln42_1_reg_1096_pp0_iter4_reg;
                lshr_ln42_1_reg_1096_pp0_iter6_reg <= lshr_ln42_1_reg_1096_pp0_iter5_reg;
                lshr_ln42_1_reg_1096_pp0_iter7_reg <= lshr_ln42_1_reg_1096_pp0_iter6_reg;
                lshr_ln42_1_reg_1096_pp0_iter8_reg <= lshr_ln42_1_reg_1096_pp0_iter7_reg;
                lshr_ln42_1_reg_1096_pp0_iter9_reg <= lshr_ln42_1_reg_1096_pp0_iter8_reg;
                mul10_1_reg_1209 <= grp_fu_632_p2;
                mul13_1_reg_1214 <= grp_fu_636_p2;
                mul1_reg_1189 <= grp_fu_616_p2;
                mul2_reg_1194 <= grp_fu_620_p2;
                mul7_1_reg_1204 <= grp_fu_628_p2;
                mul7_reg_1184 <= grp_fu_612_p2;
                mul_1_reg_1199 <= grp_fu_624_p2;
                mul_reg_1179 <= grp_fu_608_p2;
                sub1_reg_1329 <= grp_fu_580_p2;
                sub_reg_1324 <= grp_fu_576_p2;
                temp_I_1_reg_1306 <= grp_fu_572_p2;
                temp_I_reg_1282 <= grp_fu_564_p2;
                temp_R_1_reg_1300 <= grp_fu_568_p2;
                temp_R_reg_1276 <= grp_fu_560_p2;
                tmp_2_reg_1288 <= tmp_2_fu_909_p4;
                tmp_3_reg_1294 <= tmp_3_fu_926_p4;
                tmp_6_reg_1312 <= tmp_6_fu_943_p4;
                tmp_7_reg_1318 <= tmp_7_fu_960_p4;
                tmp_9_reg_1219 <= e2_V_reg_1042_pp0_iter8_reg(8 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                e2_V_reg_1042 <= ap_sig_allocacmp_e2_V;
                e2_V_reg_1042_pp0_iter1_reg <= e2_V_reg_1042;
                icmp_ln42_reg_1092_pp0_iter1_reg <= icmp_ln42_reg_1092;
                lshr_ln42_1_reg_1096_pp0_iter1_reg <= lshr_ln42_1_reg_1096;
                tmp_1_reg_1149 <= tmp_1_fu_796_p6;
                tmp_4_reg_1167 <= tmp_4_fu_817_p6;
                tmp_5_reg_1173 <= tmp_5_fu_838_p6;
                tmp_reg_1143 <= tmp_fu_775_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                c2_1_reg_1155 <= W_real_q0;
                c2_reg_1131 <= W_real_q1;
                s2_1_reg_1161 <= W_imag_q0;
                s2_reg_1137 <= W_imag_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_8_fu_653_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln42_reg_1092 <= icmp_ln42_fu_712_p2;
                lshr_ln42_1_reg_1096 <= ap_sig_allocacmp_j_load(9 downto 2);
                lshr_ln_reg_1064 <= ap_sig_allocacmp_j_load(9 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OUT_I_0_address0 <= zext_ln44_fu_1011_p1(8 - 1 downto 0);
    OUT_I_0_address1 <= zext_ln42_fu_990_p1(8 - 1 downto 0);

    OUT_I_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_0_ce0 <= ap_const_logic_1;
        else 
            OUT_I_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_0_ce1 <= ap_const_logic_1;
        else 
            OUT_I_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_0_d0 <= bitcast_ln45_fu_1022_p1;
    OUT_I_0_d1 <= bitcast_ln43_2_fu_1001_p1;

    OUT_I_0_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_1))) then 
            OUT_I_0_we0 <= ap_const_logic_1;
        else 
            OUT_I_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_0_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_1))) then 
            OUT_I_0_we1 <= ap_const_logic_1;
        else 
            OUT_I_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_1_address0 <= zext_ln44_fu_1011_p1(8 - 1 downto 0);
    OUT_I_1_address1 <= zext_ln42_fu_990_p1(8 - 1 downto 0);

    OUT_I_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_1_ce0 <= ap_const_logic_1;
        else 
            OUT_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_1_ce1 <= ap_const_logic_1;
        else 
            OUT_I_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_1_d0 <= bitcast_ln45_1_reg_1362;
    OUT_I_1_d1 <= bitcast_ln43_5_reg_1350;

    OUT_I_1_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_1))) then 
            OUT_I_1_we0 <= ap_const_logic_1;
        else 
            OUT_I_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_1_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_1))) then 
            OUT_I_1_we1 <= ap_const_logic_1;
        else 
            OUT_I_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_2_address0 <= zext_ln44_fu_1011_p1(8 - 1 downto 0);
    OUT_I_2_address1 <= zext_ln42_fu_990_p1(8 - 1 downto 0);

    OUT_I_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_2_ce0 <= ap_const_logic_1;
        else 
            OUT_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_2_ce1 <= ap_const_logic_1;
        else 
            OUT_I_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_2_d0 <= bitcast_ln45_fu_1022_p1;
    OUT_I_2_d1 <= bitcast_ln43_2_fu_1001_p1;

    OUT_I_2_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_0))) then 
            OUT_I_2_we0 <= ap_const_logic_1;
        else 
            OUT_I_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_2_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_0))) then 
            OUT_I_2_we1 <= ap_const_logic_1;
        else 
            OUT_I_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_3_address0 <= zext_ln44_fu_1011_p1(8 - 1 downto 0);
    OUT_I_3_address1 <= zext_ln42_fu_990_p1(8 - 1 downto 0);

    OUT_I_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_3_ce0 <= ap_const_logic_1;
        else 
            OUT_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_I_3_ce1 <= ap_const_logic_1;
        else 
            OUT_I_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_3_d0 <= bitcast_ln45_1_reg_1362;
    OUT_I_3_d1 <= bitcast_ln43_5_reg_1350;

    OUT_I_3_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_0))) then 
            OUT_I_3_we0 <= ap_const_logic_1;
        else 
            OUT_I_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_3_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_0))) then 
            OUT_I_3_we1 <= ap_const_logic_1;
        else 
            OUT_I_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_0_address0 <= zext_ln44_fu_1011_p1(8 - 1 downto 0);
    OUT_R_0_address1 <= zext_ln42_fu_990_p1(8 - 1 downto 0);

    OUT_R_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_0_ce0 <= ap_const_logic_1;
        else 
            OUT_R_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_0_ce1 <= ap_const_logic_1;
        else 
            OUT_R_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_0_d0 <= bitcast_ln44_fu_1006_p1;
    OUT_R_0_d1 <= bitcast_ln42_2_fu_985_p1;

    OUT_R_0_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_1))) then 
            OUT_R_0_we0 <= ap_const_logic_1;
        else 
            OUT_R_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_0_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_1))) then 
            OUT_R_0_we1 <= ap_const_logic_1;
        else 
            OUT_R_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_1_address0 <= zext_ln44_fu_1011_p1(8 - 1 downto 0);
    OUT_R_1_address1 <= zext_ln42_fu_990_p1(8 - 1 downto 0);

    OUT_R_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_1_ce0 <= ap_const_logic_1;
        else 
            OUT_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_1_ce1 <= ap_const_logic_1;
        else 
            OUT_R_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_1_d0 <= bitcast_ln44_1_reg_1356;
    OUT_R_1_d1 <= bitcast_ln42_5_reg_1344;

    OUT_R_1_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_1))) then 
            OUT_R_1_we0 <= ap_const_logic_1;
        else 
            OUT_R_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_1_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_1))) then 
            OUT_R_1_we1 <= ap_const_logic_1;
        else 
            OUT_R_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_2_address0 <= zext_ln44_fu_1011_p1(8 - 1 downto 0);
    OUT_R_2_address1 <= zext_ln42_fu_990_p1(8 - 1 downto 0);

    OUT_R_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_2_ce0 <= ap_const_logic_1;
        else 
            OUT_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_2_ce1 <= ap_const_logic_1;
        else 
            OUT_R_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_2_d0 <= bitcast_ln44_fu_1006_p1;
    OUT_R_2_d1 <= bitcast_ln42_2_fu_985_p1;

    OUT_R_2_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_0))) then 
            OUT_R_2_we0 <= ap_const_logic_1;
        else 
            OUT_R_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_2_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_0))) then 
            OUT_R_2_we1 <= ap_const_logic_1;
        else 
            OUT_R_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_3_address0 <= zext_ln44_fu_1011_p1(8 - 1 downto 0);
    OUT_R_3_address1 <= zext_ln42_fu_990_p1(8 - 1 downto 0);

    OUT_R_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_3_ce0 <= ap_const_logic_1;
        else 
            OUT_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            OUT_R_3_ce1 <= ap_const_logic_1;
        else 
            OUT_R_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_3_d0 <= bitcast_ln44_1_reg_1356;
    OUT_R_3_d1 <= bitcast_ln42_5_reg_1344;

    OUT_R_3_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_0))) then 
            OUT_R_3_we0 <= ap_const_logic_1;
        else 
            OUT_R_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_3_we1_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001, icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_0))) then 
            OUT_R_3_we1 <= ap_const_logic_1;
        else 
            OUT_R_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    W_imag_address0 <= zext_ln39_fu_684_p1(9 - 1 downto 0);
    W_imag_address1 <= e2_V_cast6_fu_668_p1(9 - 1 downto 0);

    W_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_imag_ce0 <= ap_const_logic_1;
        else 
            W_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_imag_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_imag_ce1 <= ap_const_logic_1;
        else 
            W_imag_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    W_real_address0 <= zext_ln39_fu_684_p1(9 - 1 downto 0);
    W_real_address1 <= e2_V_cast6_fu_668_p1(9 - 1 downto 0);

    W_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_real_ce0 <= ap_const_logic_1;
        else 
            W_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_real_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            W_real_ce1 <= ap_const_logic_1;
        else 
            W_real_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_0_address0 <= zext_ln42_2_fu_893_p1(8 - 1 downto 0);
    X_I_0_address1 <= zext_ln42_1_fu_867_p1(8 - 1 downto 0);

    X_I_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            X_I_0_ce0 <= ap_const_logic_1;
        else 
            X_I_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            X_I_0_ce1 <= ap_const_logic_1;
        else 
            X_I_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_1_address0 <= zext_ln42_2_fu_893_p1(8 - 1 downto 0);
    X_I_1_address1 <= zext_ln42_1_fu_867_p1(8 - 1 downto 0);

    X_I_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            X_I_1_ce0 <= ap_const_logic_1;
        else 
            X_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            X_I_1_ce1 <= ap_const_logic_1;
        else 
            X_I_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_2_address0 <= zext_ln39_2_fu_740_p1(8 - 1 downto 0);
    X_I_2_address1 <= zext_ln39_1_fu_700_p1(8 - 1 downto 0);

    X_I_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_2_ce0 <= ap_const_logic_1;
        else 
            X_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_2_ce1 <= ap_const_logic_1;
        else 
            X_I_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_3_address0 <= zext_ln39_2_fu_740_p1(8 - 1 downto 0);
    X_I_3_address1 <= zext_ln39_1_fu_700_p1(8 - 1 downto 0);

    X_I_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_3_ce0 <= ap_const_logic_1;
        else 
            X_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_3_ce1 <= ap_const_logic_1;
        else 
            X_I_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_0_address0 <= zext_ln42_2_fu_893_p1(8 - 1 downto 0);
    X_R_0_address1 <= zext_ln42_1_fu_867_p1(8 - 1 downto 0);

    X_R_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            X_R_0_ce0 <= ap_const_logic_1;
        else 
            X_R_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            X_R_0_ce1 <= ap_const_logic_1;
        else 
            X_R_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_1_address0 <= zext_ln42_2_fu_893_p1(8 - 1 downto 0);
    X_R_1_address1 <= zext_ln42_1_fu_867_p1(8 - 1 downto 0);

    X_R_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            X_R_1_ce0 <= ap_const_logic_1;
        else 
            X_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            X_R_1_ce1 <= ap_const_logic_1;
        else 
            X_R_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_2_address0 <= zext_ln39_2_fu_740_p1(8 - 1 downto 0);
    X_R_2_address1 <= zext_ln39_1_fu_700_p1(8 - 1 downto 0);

    X_R_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_2_ce0 <= ap_const_logic_1;
        else 
            X_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_2_ce1 <= ap_const_logic_1;
        else 
            X_R_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_3_address0 <= zext_ln39_2_fu_740_p1(8 - 1 downto 0);
    X_R_3_address1 <= zext_ln39_1_fu_700_p1(8 - 1 downto 0);

    X_R_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_3_ce0 <= ap_const_logic_1;
        else 
            X_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_3_ce1 <= ap_const_logic_1;
        else 
            X_R_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln47_fu_751_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_load_1) + unsigned(ap_const_lv11_2));
    add_ln886_fu_728_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_e2_V) + unsigned(ap_const_lv10_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_644_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_644 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_8_fu_653_p3)
    begin
        if (((tmp_8_fu_653_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_279_assign_proc : process(icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
                ap_enable_operation_279 <= (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_281_assign_proc : process(icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
                ap_enable_operation_281 <= (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_284_assign_proc : process(icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
                ap_enable_operation_284 <= (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_286_assign_proc : process(icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
                ap_enable_operation_286 <= (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_292_assign_proc : process(icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
                ap_enable_operation_292 <= (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_294_assign_proc : process(icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
                ap_enable_operation_294 <= (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_297_assign_proc : process(icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
                ap_enable_operation_297 <= (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_299_assign_proc : process(icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
                ap_enable_operation_299 <= (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_302_assign_proc : process(icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
                ap_enable_operation_302 <= (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_304_assign_proc : process(icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
                ap_enable_operation_304 <= (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_307_assign_proc : process(icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
                ap_enable_operation_307 <= (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_309_assign_proc : process(icmp_ln42_reg_1092_pp0_iter15_reg)
    begin
                ap_enable_operation_309 <= (icmp_ln42_reg_1092_pp0_iter15_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_312_assign_proc : process(icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
                ap_enable_operation_312 <= (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_314_assign_proc : process(icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
                ap_enable_operation_314 <= (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_0);
    end process;


    ap_enable_operation_317_assign_proc : process(icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
                ap_enable_operation_317 <= (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_1);
    end process;


    ap_enable_operation_319_assign_proc : process(icmp_ln44_reg_1247_pp0_iter15_reg)
    begin
                ap_enable_operation_319 <= (icmp_ln44_reg_1247_pp0_iter15_reg = ap_const_lv1_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state17_pp0_iter16_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16)
    begin
                ap_enable_state17_pp0_iter16_stage0 <= ((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_e2_V_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_e2_V <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_e2_V <= i_fu_106;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_fu_102, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv11_200;
        else 
            ap_sig_allocacmp_j_load <= j_fu_102;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, j_fu_102, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load_1 <= ap_const_lv11_200;
        else 
            ap_sig_allocacmp_j_load_1 <= j_fu_102;
        end if; 
    end process;

    bitcast_ln42_2_fu_985_p1 <= sub_reg_1324;
    bitcast_ln42_5_fu_969_p1 <= grp_fu_592_p2;
    bitcast_ln43_2_fu_1001_p1 <= sub1_reg_1329;
    bitcast_ln43_5_fu_973_p1 <= grp_fu_596_p2;
    bitcast_ln44_1_fu_977_p1 <= grp_fu_600_p2;
    bitcast_ln44_fu_1006_p1 <= add_reg_1334;
    bitcast_ln45_1_fu_981_p1 <= grp_fu_604_p2;
    bitcast_ln45_fu_1022_p1 <= add1_reg_1339;
    e2_V_cast6_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_e2_V),64));
    empty_10_fu_664_p1 <= ap_sig_allocacmp_e2_V(9 - 1 downto 0);
    empty_11_fu_851_p1 <= e2_V_reg_1042_pp0_iter8_reg(8 - 1 downto 0);
    empty_12_fu_674_p1 <= ap_sig_allocacmp_j_load(8 - 1 downto 0);
    icmp_ln42_fu_712_p2 <= "1" when (trunc_ln42_fu_708_p1 = ap_const_lv2_0) else "0";
    icmp_ln44_fu_878_p2 <= "1" when (trunc_ln44_fu_875_p1 = ap_const_lv2_0) else "0";
    or_ln39_1_fu_854_p2 <= (empty_11_fu_851_p1 or ap_const_lv8_1);
    or_ln39_fu_734_p2 <= (empty_12_fu_674_p1 or ap_const_lv8_1);
    or_ln886_fu_678_p2 <= (empty_10_fu_664_p1 or ap_const_lv9_1);
    tmp_1_fu_796_p3 <= X_I_2_q1;
    tmp_1_fu_796_p4 <= X_I_3_q1;
    tmp_2_fu_909_p1 <= X_R_0_q1;
    tmp_2_fu_909_p2 <= X_R_1_q1;
    tmp_3_fu_926_p1 <= X_I_0_q1;
    tmp_3_fu_926_p2 <= X_I_1_q1;
    tmp_4_fu_817_p3 <= X_R_2_q0;
    tmp_4_fu_817_p4 <= X_R_3_q0;
    tmp_5_fu_838_p3 <= X_I_2_q0;
    tmp_5_fu_838_p4 <= X_I_3_q0;
    tmp_6_fu_943_p1 <= X_R_0_q0;
    tmp_6_fu_943_p2 <= X_R_1_q0;
    tmp_7_fu_960_p1 <= X_I_0_q0;
    tmp_7_fu_960_p2 <= X_I_1_q0;
    tmp_8_fu_653_p3 <= ap_sig_allocacmp_e2_V(9 downto 9);
    tmp_fu_775_p3 <= X_R_2_q1;
    tmp_fu_775_p4 <= X_R_3_q1;
    trunc_ln42_fu_708_p1 <= ap_sig_allocacmp_j_load(2 - 1 downto 0);
    trunc_ln44_fu_875_p1 <= e2_V_reg_1042_pp0_iter8_reg(2 - 1 downto 0);
    zext_ln39_1_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_12_fu_674_p1),64));
    zext_ln39_2_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln39_fu_734_p2),64));
    zext_ln39_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln886_fu_678_p2),64));
    zext_ln42_1_fu_867_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_11_fu_851_p1),64));
    zext_ln42_2_fu_893_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln39_1_fu_854_p2),64));
    zext_ln42_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln42_1_reg_1096_pp0_iter15_reg),64));
    zext_ln44_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_reg_1251_pp0_iter15_reg),64));
end behav;
