// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fft_stage_last_fft_stage_last,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=273,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=5032,HLS_SYN_LUT=7661,HLS_VERSION=2022_1}" *)

module fft_stage_last (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_R_0_address0,
        X_R_0_ce0,
        X_R_0_q0,
        X_R_0_address1,
        X_R_0_ce1,
        X_R_0_q1,
        X_R_1_address0,
        X_R_1_ce0,
        X_R_1_q0,
        X_R_1_address1,
        X_R_1_ce1,
        X_R_1_q1,
        X_R_2_address0,
        X_R_2_ce0,
        X_R_2_q0,
        X_R_2_address1,
        X_R_2_ce1,
        X_R_2_q1,
        X_R_3_address0,
        X_R_3_ce0,
        X_R_3_q0,
        X_R_3_address1,
        X_R_3_ce1,
        X_R_3_q1,
        X_I_0_address0,
        X_I_0_ce0,
        X_I_0_q0,
        X_I_0_address1,
        X_I_0_ce1,
        X_I_0_q1,
        X_I_1_address0,
        X_I_1_ce0,
        X_I_1_q0,
        X_I_1_address1,
        X_I_1_ce1,
        X_I_1_q1,
        X_I_2_address0,
        X_I_2_ce0,
        X_I_2_q0,
        X_I_2_address1,
        X_I_2_ce1,
        X_I_2_q1,
        X_I_3_address0,
        X_I_3_ce0,
        X_I_3_q0,
        X_I_3_address1,
        X_I_3_ce1,
        X_I_3_q1,
        OUT_R_0_address0,
        OUT_R_0_ce0,
        OUT_R_0_we0,
        OUT_R_0_d0,
        OUT_R_0_address1,
        OUT_R_0_ce1,
        OUT_R_0_we1,
        OUT_R_0_d1,
        OUT_R_1_address0,
        OUT_R_1_ce0,
        OUT_R_1_we0,
        OUT_R_1_d0,
        OUT_R_1_address1,
        OUT_R_1_ce1,
        OUT_R_1_we1,
        OUT_R_1_d1,
        OUT_R_2_address0,
        OUT_R_2_ce0,
        OUT_R_2_we0,
        OUT_R_2_d0,
        OUT_R_2_address1,
        OUT_R_2_ce1,
        OUT_R_2_we1,
        OUT_R_2_d1,
        OUT_R_3_address0,
        OUT_R_3_ce0,
        OUT_R_3_we0,
        OUT_R_3_d0,
        OUT_R_3_address1,
        OUT_R_3_ce1,
        OUT_R_3_we1,
        OUT_R_3_d1,
        OUT_I_0_address0,
        OUT_I_0_ce0,
        OUT_I_0_we0,
        OUT_I_0_d0,
        OUT_I_0_address1,
        OUT_I_0_ce1,
        OUT_I_0_we1,
        OUT_I_0_d1,
        OUT_I_1_address0,
        OUT_I_1_ce0,
        OUT_I_1_we0,
        OUT_I_1_d0,
        OUT_I_1_address1,
        OUT_I_1_ce1,
        OUT_I_1_we1,
        OUT_I_1_d1,
        OUT_I_2_address0,
        OUT_I_2_ce0,
        OUT_I_2_we0,
        OUT_I_2_d0,
        OUT_I_2_address1,
        OUT_I_2_ce1,
        OUT_I_2_we1,
        OUT_I_2_d1,
        OUT_I_3_address0,
        OUT_I_3_ce0,
        OUT_I_3_we0,
        OUT_I_3_d0,
        OUT_I_3_address1,
        OUT_I_3_ce1,
        OUT_I_3_we1,
        OUT_I_3_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] X_R_0_address0;
output   X_R_0_ce0;
input  [31:0] X_R_0_q0;
output  [7:0] X_R_0_address1;
output   X_R_0_ce1;
input  [31:0] X_R_0_q1;
output  [7:0] X_R_1_address0;
output   X_R_1_ce0;
input  [31:0] X_R_1_q0;
output  [7:0] X_R_1_address1;
output   X_R_1_ce1;
input  [31:0] X_R_1_q1;
output  [7:0] X_R_2_address0;
output   X_R_2_ce0;
input  [31:0] X_R_2_q0;
output  [7:0] X_R_2_address1;
output   X_R_2_ce1;
input  [31:0] X_R_2_q1;
output  [7:0] X_R_3_address0;
output   X_R_3_ce0;
input  [31:0] X_R_3_q0;
output  [7:0] X_R_3_address1;
output   X_R_3_ce1;
input  [31:0] X_R_3_q1;
output  [7:0] X_I_0_address0;
output   X_I_0_ce0;
input  [31:0] X_I_0_q0;
output  [7:0] X_I_0_address1;
output   X_I_0_ce1;
input  [31:0] X_I_0_q1;
output  [7:0] X_I_1_address0;
output   X_I_1_ce0;
input  [31:0] X_I_1_q0;
output  [7:0] X_I_1_address1;
output   X_I_1_ce1;
input  [31:0] X_I_1_q1;
output  [7:0] X_I_2_address0;
output   X_I_2_ce0;
input  [31:0] X_I_2_q0;
output  [7:0] X_I_2_address1;
output   X_I_2_ce1;
input  [31:0] X_I_2_q1;
output  [7:0] X_I_3_address0;
output   X_I_3_ce0;
input  [31:0] X_I_3_q0;
output  [7:0] X_I_3_address1;
output   X_I_3_ce1;
input  [31:0] X_I_3_q1;
output  [7:0] OUT_R_0_address0;
output   OUT_R_0_ce0;
output   OUT_R_0_we0;
output  [31:0] OUT_R_0_d0;
output  [7:0] OUT_R_0_address1;
output   OUT_R_0_ce1;
output   OUT_R_0_we1;
output  [31:0] OUT_R_0_d1;
output  [7:0] OUT_R_1_address0;
output   OUT_R_1_ce0;
output   OUT_R_1_we0;
output  [31:0] OUT_R_1_d0;
output  [7:0] OUT_R_1_address1;
output   OUT_R_1_ce1;
output   OUT_R_1_we1;
output  [31:0] OUT_R_1_d1;
output  [7:0] OUT_R_2_address0;
output   OUT_R_2_ce0;
output   OUT_R_2_we0;
output  [31:0] OUT_R_2_d0;
output  [7:0] OUT_R_2_address1;
output   OUT_R_2_ce1;
output   OUT_R_2_we1;
output  [31:0] OUT_R_2_d1;
output  [7:0] OUT_R_3_address0;
output   OUT_R_3_ce0;
output   OUT_R_3_we0;
output  [31:0] OUT_R_3_d0;
output  [7:0] OUT_R_3_address1;
output   OUT_R_3_ce1;
output   OUT_R_3_we1;
output  [31:0] OUT_R_3_d1;
output  [7:0] OUT_I_0_address0;
output   OUT_I_0_ce0;
output   OUT_I_0_we0;
output  [31:0] OUT_I_0_d0;
output  [7:0] OUT_I_0_address1;
output   OUT_I_0_ce1;
output   OUT_I_0_we1;
output  [31:0] OUT_I_0_d1;
output  [7:0] OUT_I_1_address0;
output   OUT_I_1_ce0;
output   OUT_I_1_we0;
output  [31:0] OUT_I_1_d0;
output  [7:0] OUT_I_1_address1;
output   OUT_I_1_ce1;
output   OUT_I_1_we1;
output  [31:0] OUT_I_1_d1;
output  [7:0] OUT_I_2_address0;
output   OUT_I_2_ce0;
output   OUT_I_2_we0;
output  [31:0] OUT_I_2_d0;
output  [7:0] OUT_I_2_address1;
output   OUT_I_2_ce1;
output   OUT_I_2_we1;
output  [31:0] OUT_I_2_d1;
output  [7:0] OUT_I_3_address0;
output   OUT_I_3_ce0;
output   OUT_I_3_we0;
output  [31:0] OUT_I_3_d0;
output  [7:0] OUT_I_3_address1;
output   OUT_I_3_ce1;
output   OUT_I_3_we1;
output  [31:0] OUT_I_3_d1;

reg ap_idle;
reg X_R_0_ce0;
reg X_R_0_ce1;
reg X_R_1_ce0;
reg X_R_1_ce1;
reg X_R_2_ce0;
reg X_R_2_ce1;
reg X_R_3_ce0;
reg X_R_3_ce1;
reg X_I_0_ce0;
reg X_I_0_ce1;
reg X_I_1_ce0;
reg X_I_1_ce1;
reg X_I_2_ce0;
reg X_I_2_ce1;
reg X_I_3_ce0;
reg X_I_3_ce1;
reg OUT_R_0_ce0;
reg OUT_R_0_we0;
reg OUT_R_0_ce1;
reg OUT_R_0_we1;
reg OUT_R_1_ce0;
reg OUT_R_1_we0;
reg OUT_R_1_ce1;
reg OUT_R_1_we1;
reg OUT_R_2_ce0;
reg OUT_R_2_we0;
reg OUT_R_2_ce1;
reg OUT_R_2_we1;
reg OUT_R_3_ce0;
reg OUT_R_3_we0;
reg OUT_R_3_ce1;
reg OUT_R_3_we1;
reg OUT_I_0_ce0;
reg OUT_I_0_we0;
reg OUT_I_0_ce1;
reg OUT_I_0_we1;
reg OUT_I_1_ce0;
reg OUT_I_1_we0;
reg OUT_I_1_ce1;
reg OUT_I_1_we1;
reg OUT_I_2_ce0;
reg OUT_I_2_we0;
reg OUT_I_2_ce1;
reg OUT_I_2_we1;
reg OUT_I_3_ce0;
reg OUT_I_3_we0;
reg OUT_I_3_ce1;
reg OUT_I_3_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_8_fu_653_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [8:0] W_real_address0;
reg    W_real_ce0;
wire   [31:0] W_real_q0;
wire   [8:0] W_real_address1;
reg    W_real_ce1;
wire   [31:0] W_real_q1;
wire   [8:0] W_imag_address0;
reg    W_imag_ce0;
wire   [31:0] W_imag_q0;
wire   [8:0] W_imag_address1;
reg    W_imag_ce1;
wire   [31:0] W_imag_q1;
reg   [9:0] e2_V_reg_1042;
wire    ap_block_pp0_stage0_11001;
reg   [9:0] e2_V_reg_1042_pp0_iter1_reg;
reg   [9:0] e2_V_reg_1042_pp0_iter2_reg;
reg   [9:0] e2_V_reg_1042_pp0_iter3_reg;
reg   [9:0] e2_V_reg_1042_pp0_iter4_reg;
reg   [9:0] e2_V_reg_1042_pp0_iter5_reg;
reg   [9:0] e2_V_reg_1042_pp0_iter6_reg;
reg   [9:0] e2_V_reg_1042_pp0_iter7_reg;
reg   [9:0] e2_V_reg_1042_pp0_iter8_reg;
reg   [1:0] lshr_ln_reg_1064;
wire   [0:0] icmp_ln42_fu_712_p2;
reg   [0:0] icmp_ln42_reg_1092;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter1_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter2_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter3_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter4_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter5_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter6_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter7_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter8_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter9_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter10_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter11_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter12_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter13_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter14_reg;
reg   [0:0] icmp_ln42_reg_1092_pp0_iter15_reg;
reg   [7:0] lshr_ln42_1_reg_1096;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter1_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter2_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter3_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter4_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter5_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter6_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter7_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter8_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter9_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter10_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter11_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter12_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter13_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter14_reg;
reg   [7:0] lshr_ln42_1_reg_1096_pp0_iter15_reg;
reg   [31:0] c2_reg_1131;
reg   [31:0] s2_reg_1137;
wire   [31:0] tmp_fu_775_p6;
reg   [31:0] tmp_reg_1143;
wire   [31:0] tmp_1_fu_796_p6;
reg   [31:0] tmp_1_reg_1149;
reg   [31:0] c2_1_reg_1155;
reg   [31:0] s2_1_reg_1161;
wire   [31:0] tmp_4_fu_817_p6;
reg   [31:0] tmp_4_reg_1167;
wire   [31:0] tmp_5_fu_838_p6;
reg   [31:0] tmp_5_reg_1173;
wire   [31:0] grp_fu_608_p2;
reg   [31:0] mul_reg_1179;
wire   [31:0] grp_fu_612_p2;
reg   [31:0] mul7_reg_1184;
wire   [31:0] grp_fu_616_p2;
reg   [31:0] mul1_reg_1189;
wire   [31:0] grp_fu_620_p2;
reg   [31:0] mul2_reg_1194;
wire   [31:0] grp_fu_624_p2;
reg   [31:0] mul_1_reg_1199;
wire   [31:0] grp_fu_628_p2;
reg   [31:0] mul7_1_reg_1204;
wire   [31:0] grp_fu_632_p2;
reg   [31:0] mul10_1_reg_1209;
wire   [31:0] grp_fu_636_p2;
reg   [31:0] mul13_1_reg_1214;
reg   [0:0] tmp_9_reg_1219;
wire   [0:0] icmp_ln44_fu_878_p2;
reg   [0:0] icmp_ln44_reg_1247;
reg   [0:0] icmp_ln44_reg_1247_pp0_iter10_reg;
reg   [0:0] icmp_ln44_reg_1247_pp0_iter11_reg;
reg   [0:0] icmp_ln44_reg_1247_pp0_iter12_reg;
reg   [0:0] icmp_ln44_reg_1247_pp0_iter13_reg;
reg   [0:0] icmp_ln44_reg_1247_pp0_iter14_reg;
reg   [0:0] icmp_ln44_reg_1247_pp0_iter15_reg;
reg   [6:0] lshr_ln2_reg_1251;
reg   [6:0] lshr_ln2_reg_1251_pp0_iter10_reg;
reg   [6:0] lshr_ln2_reg_1251_pp0_iter11_reg;
reg   [6:0] lshr_ln2_reg_1251_pp0_iter12_reg;
reg   [6:0] lshr_ln2_reg_1251_pp0_iter13_reg;
reg   [6:0] lshr_ln2_reg_1251_pp0_iter14_reg;
reg   [6:0] lshr_ln2_reg_1251_pp0_iter15_reg;
wire   [31:0] grp_fu_560_p2;
reg   [31:0] temp_R_reg_1276;
wire   [31:0] grp_fu_564_p2;
reg   [31:0] temp_I_reg_1282;
wire   [31:0] tmp_2_fu_909_p4;
reg   [31:0] tmp_2_reg_1288;
wire   [31:0] tmp_3_fu_926_p4;
reg   [31:0] tmp_3_reg_1294;
wire   [31:0] grp_fu_568_p2;
reg   [31:0] temp_R_1_reg_1300;
wire   [31:0] grp_fu_572_p2;
reg   [31:0] temp_I_1_reg_1306;
wire   [31:0] tmp_6_fu_943_p4;
reg   [31:0] tmp_6_reg_1312;
wire   [31:0] tmp_7_fu_960_p4;
reg   [31:0] tmp_7_reg_1318;
wire   [31:0] grp_fu_576_p2;
reg   [31:0] sub_reg_1324;
wire   [31:0] grp_fu_580_p2;
reg   [31:0] sub1_reg_1329;
wire   [31:0] grp_fu_584_p2;
reg   [31:0] add_reg_1334;
wire   [31:0] grp_fu_588_p2;
reg   [31:0] add1_reg_1339;
wire   [31:0] bitcast_ln42_5_fu_969_p1;
reg   [31:0] bitcast_ln42_5_reg_1344;
wire   [31:0] bitcast_ln43_5_fu_973_p1;
reg   [31:0] bitcast_ln43_5_reg_1350;
wire   [31:0] bitcast_ln44_1_fu_977_p1;
reg   [31:0] bitcast_ln44_1_reg_1356;
wire   [31:0] bitcast_ln45_1_fu_981_p1;
reg   [31:0] bitcast_ln45_1_reg_1362;
wire   [63:0] e2_V_cast6_fu_668_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln39_1_fu_700_p1;
wire   [63:0] zext_ln39_fu_684_p1;
wire   [63:0] zext_ln39_2_fu_740_p1;
wire   [63:0] zext_ln42_1_fu_867_p1;
wire   [63:0] zext_ln42_2_fu_893_p1;
wire   [63:0] zext_ln42_fu_990_p1;
wire   [63:0] zext_ln44_fu_1011_p1;
reg   [10:0] j_fu_102;
wire   [10:0] add_ln47_fu_751_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_j_load;
reg   [10:0] ap_sig_allocacmp_j_load_1;
reg   [9:0] i_fu_106;
wire   [9:0] add_ln886_fu_728_p2;
reg   [9:0] ap_sig_allocacmp_e2_V;
wire   [31:0] bitcast_ln42_2_fu_985_p1;
wire   [31:0] bitcast_ln44_fu_1006_p1;
wire   [31:0] bitcast_ln43_2_fu_1001_p1;
wire   [31:0] bitcast_ln45_fu_1022_p1;
wire   [8:0] empty_10_fu_664_p1;
wire   [8:0] or_ln886_fu_678_p2;
wire   [7:0] empty_12_fu_674_p1;
wire   [1:0] trunc_ln42_fu_708_p1;
wire   [7:0] or_ln39_fu_734_p2;
wire   [31:0] tmp_fu_775_p3;
wire   [31:0] tmp_fu_775_p4;
wire   [31:0] tmp_1_fu_796_p3;
wire   [31:0] tmp_1_fu_796_p4;
wire   [31:0] tmp_4_fu_817_p3;
wire   [31:0] tmp_4_fu_817_p4;
wire   [31:0] tmp_5_fu_838_p3;
wire   [31:0] tmp_5_fu_838_p4;
wire   [7:0] empty_11_fu_851_p1;
wire   [1:0] trunc_ln44_fu_875_p1;
wire   [7:0] or_ln39_1_fu_854_p2;
wire   [31:0] tmp_2_fu_909_p1;
wire   [31:0] tmp_2_fu_909_p2;
wire   [31:0] tmp_3_fu_926_p1;
wire   [31:0] tmp_3_fu_926_p2;
wire   [31:0] tmp_6_fu_943_p1;
wire   [31:0] tmp_6_fu_943_p2;
wire   [31:0] tmp_7_fu_960_p1;
wire   [31:0] tmp_7_fu_960_p2;
wire   [31:0] grp_fu_592_p2;
wire   [31:0] grp_fu_596_p2;
wire   [31:0] grp_fu_600_p2;
wire   [31:0] grp_fu_604_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg   [0:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_279;
reg    ap_enable_state17_pp0_iter16_stage0;
reg    ap_enable_operation_292;
reg    ap_enable_operation_281;
reg    ap_enable_operation_294;
reg    ap_enable_operation_284;
reg    ap_enable_operation_297;
reg    ap_enable_operation_286;
reg    ap_enable_operation_299;
reg    ap_enable_operation_302;
reg    ap_enable_operation_312;
reg    ap_enable_operation_304;
reg    ap_enable_operation_314;
reg    ap_enable_operation_307;
reg    ap_enable_operation_317;
reg    ap_enable_operation_309;
reg    ap_enable_operation_319;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_644;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft_stage_last_W_real_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
W_real_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_real_address0),
    .ce0(W_real_ce0),
    .q0(W_real_q0),
    .address1(W_real_address1),
    .ce1(W_real_ce1),
    .q1(W_real_q1)
);

fft_stage_last_W_imag_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
W_imag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_imag_address0),
    .ce0(W_imag_ce0),
    .q0(W_imag_q0),
    .address1(W_imag_address1),
    .ce1(W_imag_ce1),
    .q1(W_imag_q1)
);

fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_reg_1179),
    .din1(mul7_reg_1184),
    .ce(1'b1),
    .dout(grp_fu_560_p2)
);

fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul1_reg_1189),
    .din1(mul2_reg_1194),
    .ce(1'b1),
    .dout(grp_fu_564_p2)
);

fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_1_reg_1199),
    .din1(mul7_1_reg_1204),
    .ce(1'b1),
    .dout(grp_fu_568_p2)
);

fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul10_1_reg_1209),
    .din1(mul13_1_reg_1214),
    .ce(1'b1),
    .dout(grp_fu_572_p2)
);

fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_1288),
    .din1(temp_R_reg_1276),
    .ce(1'b1),
    .dout(grp_fu_576_p2)
);

fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_reg_1294),
    .din1(temp_I_reg_1282),
    .ce(1'b1),
    .dout(grp_fu_580_p2)
);

fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_1288),
    .din1(temp_R_reg_1276),
    .ce(1'b1),
    .dout(grp_fu_584_p2)
);

fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_reg_1294),
    .din1(temp_I_reg_1282),
    .ce(1'b1),
    .dout(grp_fu_588_p2)
);

fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_reg_1312),
    .din1(temp_R_1_reg_1300),
    .ce(1'b1),
    .dout(grp_fu_592_p2)
);

fft_stage_last_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_reg_1318),
    .din1(temp_I_1_reg_1306),
    .ce(1'b1),
    .dout(grp_fu_596_p2)
);

fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_reg_1312),
    .din1(temp_R_1_reg_1300),
    .ce(1'b1),
    .dout(grp_fu_600_p2)
);

fft_stage_last_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_reg_1318),
    .din1(temp_I_1_reg_1306),
    .ce(1'b1),
    .dout(grp_fu_604_p2)
);

fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_1143),
    .din1(c2_reg_1131),
    .ce(1'b1),
    .dout(grp_fu_608_p2)
);

fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_1149),
    .din1(s2_reg_1137),
    .ce(1'b1),
    .dout(grp_fu_612_p2)
);

fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_1149),
    .din1(c2_reg_1131),
    .ce(1'b1),
    .dout(grp_fu_616_p2)
);

fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_1143),
    .din1(s2_reg_1137),
    .ce(1'b1),
    .dout(grp_fu_620_p2)
);

fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_reg_1167),
    .din1(c2_1_reg_1155),
    .ce(1'b1),
    .dout(grp_fu_624_p2)
);

fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_reg_1173),
    .din1(s2_1_reg_1161),
    .ce(1'b1),
    .dout(grp_fu_628_p2)
);

fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_reg_1173),
    .din1(c2_1_reg_1155),
    .ce(1'b1),
    .dout(grp_fu_632_p2)
);

fft_stage_last_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_reg_1167),
    .din1(s2_1_reg_1161),
    .ce(1'b1),
    .dout(grp_fu_636_p2)
);

fft_stage_last_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U21(
    .din0(32'd0),
    .din1(32'd0),
    .din2(tmp_fu_775_p3),
    .din3(tmp_fu_775_p4),
    .din4(lshr_ln_reg_1064),
    .dout(tmp_fu_775_p6)
);

fft_stage_last_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U22(
    .din0(32'd0),
    .din1(32'd0),
    .din2(tmp_1_fu_796_p3),
    .din3(tmp_1_fu_796_p4),
    .din4(lshr_ln_reg_1064),
    .dout(tmp_1_fu_796_p6)
);

fft_stage_last_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U23(
    .din0(32'd0),
    .din1(32'd0),
    .din2(tmp_4_fu_817_p3),
    .din3(tmp_4_fu_817_p4),
    .din4(lshr_ln_reg_1064),
    .dout(tmp_4_fu_817_p6)
);

fft_stage_last_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U24(
    .din0(32'd0),
    .din1(32'd0),
    .din2(tmp_5_fu_838_p3),
    .din3(tmp_5_fu_838_p4),
    .din4(lshr_ln_reg_1064),
    .dout(tmp_5_fu_838_p6)
);

fft_stage_last_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U25(
    .din0(tmp_2_fu_909_p1),
    .din1(tmp_2_fu_909_p2),
    .din2(tmp_9_reg_1219),
    .dout(tmp_2_fu_909_p4)
);

fft_stage_last_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U26(
    .din0(tmp_3_fu_926_p1),
    .din1(tmp_3_fu_926_p2),
    .din2(tmp_9_reg_1219),
    .dout(tmp_3_fu_926_p4)
);

fft_stage_last_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U27(
    .din0(tmp_6_fu_943_p1),
    .din1(tmp_6_fu_943_p2),
    .din2(tmp_9_reg_1219),
    .dout(tmp_6_fu_943_p4)
);

fft_stage_last_mux_21_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 1 ),
    .dout_WIDTH( 32 ))
mux_21_32_1_1_U28(
    .din0(tmp_7_fu_960_p1),
    .din1(tmp_7_fu_960_p2),
    .din2(tmp_9_reg_1219),
    .dout(tmp_7_fu_960_p4)
);

fft_stage_last_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter15_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_644)) begin
        if ((tmp_8_fu_653_p3 == 1'd0)) begin
            i_fu_106 <= add_ln886_fu_728_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_106 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_644)) begin
        if ((tmp_8_fu_653_p3 == 1'd0)) begin
            j_fu_102 <= add_ln47_fu_751_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_102 <= 11'd512;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add1_reg_1339 <= grp_fu_588_p2;
        add_reg_1334 <= grp_fu_584_p2;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        bitcast_ln42_5_reg_1344 <= bitcast_ln42_5_fu_969_p1;
        bitcast_ln43_5_reg_1350 <= bitcast_ln43_5_fu_973_p1;
        bitcast_ln44_1_reg_1356 <= bitcast_ln44_1_fu_977_p1;
        bitcast_ln45_1_reg_1362 <= bitcast_ln45_1_fu_981_p1;
        e2_V_reg_1042_pp0_iter2_reg <= e2_V_reg_1042_pp0_iter1_reg;
        e2_V_reg_1042_pp0_iter3_reg <= e2_V_reg_1042_pp0_iter2_reg;
        e2_V_reg_1042_pp0_iter4_reg <= e2_V_reg_1042_pp0_iter3_reg;
        e2_V_reg_1042_pp0_iter5_reg <= e2_V_reg_1042_pp0_iter4_reg;
        e2_V_reg_1042_pp0_iter6_reg <= e2_V_reg_1042_pp0_iter5_reg;
        e2_V_reg_1042_pp0_iter7_reg <= e2_V_reg_1042_pp0_iter6_reg;
        e2_V_reg_1042_pp0_iter8_reg <= e2_V_reg_1042_pp0_iter7_reg;
        icmp_ln42_reg_1092_pp0_iter10_reg <= icmp_ln42_reg_1092_pp0_iter9_reg;
        icmp_ln42_reg_1092_pp0_iter11_reg <= icmp_ln42_reg_1092_pp0_iter10_reg;
        icmp_ln42_reg_1092_pp0_iter12_reg <= icmp_ln42_reg_1092_pp0_iter11_reg;
        icmp_ln42_reg_1092_pp0_iter13_reg <= icmp_ln42_reg_1092_pp0_iter12_reg;
        icmp_ln42_reg_1092_pp0_iter14_reg <= icmp_ln42_reg_1092_pp0_iter13_reg;
        icmp_ln42_reg_1092_pp0_iter15_reg <= icmp_ln42_reg_1092_pp0_iter14_reg;
        icmp_ln42_reg_1092_pp0_iter2_reg <= icmp_ln42_reg_1092_pp0_iter1_reg;
        icmp_ln42_reg_1092_pp0_iter3_reg <= icmp_ln42_reg_1092_pp0_iter2_reg;
        icmp_ln42_reg_1092_pp0_iter4_reg <= icmp_ln42_reg_1092_pp0_iter3_reg;
        icmp_ln42_reg_1092_pp0_iter5_reg <= icmp_ln42_reg_1092_pp0_iter4_reg;
        icmp_ln42_reg_1092_pp0_iter6_reg <= icmp_ln42_reg_1092_pp0_iter5_reg;
        icmp_ln42_reg_1092_pp0_iter7_reg <= icmp_ln42_reg_1092_pp0_iter6_reg;
        icmp_ln42_reg_1092_pp0_iter8_reg <= icmp_ln42_reg_1092_pp0_iter7_reg;
        icmp_ln42_reg_1092_pp0_iter9_reg <= icmp_ln42_reg_1092_pp0_iter8_reg;
        icmp_ln44_reg_1247 <= icmp_ln44_fu_878_p2;
        icmp_ln44_reg_1247_pp0_iter10_reg <= icmp_ln44_reg_1247;
        icmp_ln44_reg_1247_pp0_iter11_reg <= icmp_ln44_reg_1247_pp0_iter10_reg;
        icmp_ln44_reg_1247_pp0_iter12_reg <= icmp_ln44_reg_1247_pp0_iter11_reg;
        icmp_ln44_reg_1247_pp0_iter13_reg <= icmp_ln44_reg_1247_pp0_iter12_reg;
        icmp_ln44_reg_1247_pp0_iter14_reg <= icmp_ln44_reg_1247_pp0_iter13_reg;
        icmp_ln44_reg_1247_pp0_iter15_reg <= icmp_ln44_reg_1247_pp0_iter14_reg;
        lshr_ln2_reg_1251 <= {{e2_V_reg_1042_pp0_iter8_reg[8:2]}};
        lshr_ln2_reg_1251_pp0_iter10_reg <= lshr_ln2_reg_1251;
        lshr_ln2_reg_1251_pp0_iter11_reg <= lshr_ln2_reg_1251_pp0_iter10_reg;
        lshr_ln2_reg_1251_pp0_iter12_reg <= lshr_ln2_reg_1251_pp0_iter11_reg;
        lshr_ln2_reg_1251_pp0_iter13_reg <= lshr_ln2_reg_1251_pp0_iter12_reg;
        lshr_ln2_reg_1251_pp0_iter14_reg <= lshr_ln2_reg_1251_pp0_iter13_reg;
        lshr_ln2_reg_1251_pp0_iter15_reg <= lshr_ln2_reg_1251_pp0_iter14_reg;
        lshr_ln42_1_reg_1096_pp0_iter10_reg <= lshr_ln42_1_reg_1096_pp0_iter9_reg;
        lshr_ln42_1_reg_1096_pp0_iter11_reg <= lshr_ln42_1_reg_1096_pp0_iter10_reg;
        lshr_ln42_1_reg_1096_pp0_iter12_reg <= lshr_ln42_1_reg_1096_pp0_iter11_reg;
        lshr_ln42_1_reg_1096_pp0_iter13_reg <= lshr_ln42_1_reg_1096_pp0_iter12_reg;
        lshr_ln42_1_reg_1096_pp0_iter14_reg <= lshr_ln42_1_reg_1096_pp0_iter13_reg;
        lshr_ln42_1_reg_1096_pp0_iter15_reg <= lshr_ln42_1_reg_1096_pp0_iter14_reg;
        lshr_ln42_1_reg_1096_pp0_iter2_reg <= lshr_ln42_1_reg_1096_pp0_iter1_reg;
        lshr_ln42_1_reg_1096_pp0_iter3_reg <= lshr_ln42_1_reg_1096_pp0_iter2_reg;
        lshr_ln42_1_reg_1096_pp0_iter4_reg <= lshr_ln42_1_reg_1096_pp0_iter3_reg;
        lshr_ln42_1_reg_1096_pp0_iter5_reg <= lshr_ln42_1_reg_1096_pp0_iter4_reg;
        lshr_ln42_1_reg_1096_pp0_iter6_reg <= lshr_ln42_1_reg_1096_pp0_iter5_reg;
        lshr_ln42_1_reg_1096_pp0_iter7_reg <= lshr_ln42_1_reg_1096_pp0_iter6_reg;
        lshr_ln42_1_reg_1096_pp0_iter8_reg <= lshr_ln42_1_reg_1096_pp0_iter7_reg;
        lshr_ln42_1_reg_1096_pp0_iter9_reg <= lshr_ln42_1_reg_1096_pp0_iter8_reg;
        mul10_1_reg_1209 <= grp_fu_632_p2;
        mul13_1_reg_1214 <= grp_fu_636_p2;
        mul1_reg_1189 <= grp_fu_616_p2;
        mul2_reg_1194 <= grp_fu_620_p2;
        mul7_1_reg_1204 <= grp_fu_628_p2;
        mul7_reg_1184 <= grp_fu_612_p2;
        mul_1_reg_1199 <= grp_fu_624_p2;
        mul_reg_1179 <= grp_fu_608_p2;
        sub1_reg_1329 <= grp_fu_580_p2;
        sub_reg_1324 <= grp_fu_576_p2;
        temp_I_1_reg_1306 <= grp_fu_572_p2;
        temp_I_reg_1282 <= grp_fu_564_p2;
        temp_R_1_reg_1300 <= grp_fu_568_p2;
        temp_R_reg_1276 <= grp_fu_560_p2;
        tmp_2_reg_1288 <= tmp_2_fu_909_p4;
        tmp_3_reg_1294 <= tmp_3_fu_926_p4;
        tmp_6_reg_1312 <= tmp_6_fu_943_p4;
        tmp_7_reg_1318 <= tmp_7_fu_960_p4;
        tmp_9_reg_1219 <= e2_V_reg_1042_pp0_iter8_reg[32'd8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        e2_V_reg_1042 <= ap_sig_allocacmp_e2_V;
        e2_V_reg_1042_pp0_iter1_reg <= e2_V_reg_1042;
        icmp_ln42_reg_1092_pp0_iter1_reg <= icmp_ln42_reg_1092;
        lshr_ln42_1_reg_1096_pp0_iter1_reg <= lshr_ln42_1_reg_1096;
        tmp_1_reg_1149 <= tmp_1_fu_796_p6;
        tmp_4_reg_1167 <= tmp_4_fu_817_p6;
        tmp_5_reg_1173 <= tmp_5_fu_838_p6;
        tmp_reg_1143 <= tmp_fu_775_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c2_1_reg_1155 <= W_real_q0;
        c2_reg_1131 <= W_real_q1;
        s2_1_reg_1161 <= W_imag_q0;
        s2_reg_1137 <= W_imag_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_8_fu_653_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln42_reg_1092 <= icmp_ln42_fu_712_p2;
        lshr_ln42_1_reg_1096 <= {{ap_sig_allocacmp_j_load[9:2]}};
        lshr_ln_reg_1064 <= {{ap_sig_allocacmp_j_load[9:8]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_I_0_ce0 = 1'b1;
    end else begin
        OUT_I_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_I_0_ce1 = 1'b1;
    end else begin
        OUT_I_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd1))) begin
        OUT_I_0_we0 = 1'b1;
    end else begin
        OUT_I_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd1))) begin
        OUT_I_0_we1 = 1'b1;
    end else begin
        OUT_I_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_I_1_ce0 = 1'b1;
    end else begin
        OUT_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_I_1_ce1 = 1'b1;
    end else begin
        OUT_I_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd1))) begin
        OUT_I_1_we0 = 1'b1;
    end else begin
        OUT_I_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd1))) begin
        OUT_I_1_we1 = 1'b1;
    end else begin
        OUT_I_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_I_2_ce0 = 1'b1;
    end else begin
        OUT_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_I_2_ce1 = 1'b1;
    end else begin
        OUT_I_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd0))) begin
        OUT_I_2_we0 = 1'b1;
    end else begin
        OUT_I_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd0))) begin
        OUT_I_2_we1 = 1'b1;
    end else begin
        OUT_I_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_I_3_ce0 = 1'b1;
    end else begin
        OUT_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_I_3_ce1 = 1'b1;
    end else begin
        OUT_I_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd0))) begin
        OUT_I_3_we0 = 1'b1;
    end else begin
        OUT_I_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd0))) begin
        OUT_I_3_we1 = 1'b1;
    end else begin
        OUT_I_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_R_0_ce0 = 1'b1;
    end else begin
        OUT_R_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_R_0_ce1 = 1'b1;
    end else begin
        OUT_R_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd1))) begin
        OUT_R_0_we0 = 1'b1;
    end else begin
        OUT_R_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd1))) begin
        OUT_R_0_we1 = 1'b1;
    end else begin
        OUT_R_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_R_1_ce0 = 1'b1;
    end else begin
        OUT_R_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_R_1_ce1 = 1'b1;
    end else begin
        OUT_R_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd1))) begin
        OUT_R_1_we0 = 1'b1;
    end else begin
        OUT_R_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd1))) begin
        OUT_R_1_we1 = 1'b1;
    end else begin
        OUT_R_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_R_2_ce0 = 1'b1;
    end else begin
        OUT_R_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_R_2_ce1 = 1'b1;
    end else begin
        OUT_R_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd0))) begin
        OUT_R_2_we0 = 1'b1;
    end else begin
        OUT_R_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd0))) begin
        OUT_R_2_we1 = 1'b1;
    end else begin
        OUT_R_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_R_3_ce0 = 1'b1;
    end else begin
        OUT_R_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1))) begin
        OUT_R_3_ce1 = 1'b1;
    end else begin
        OUT_R_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd0))) begin
        OUT_R_3_we0 = 1'b1;
    end else begin
        OUT_R_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter16 == 1'b1) & (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd0))) begin
        OUT_R_3_we1 = 1'b1;
    end else begin
        OUT_R_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_imag_ce0 = 1'b1;
    end else begin
        W_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_imag_ce1 = 1'b1;
    end else begin
        W_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_real_ce0 = 1'b1;
    end else begin
        W_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_real_ce1 = 1'b1;
    end else begin
        W_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        X_I_0_ce0 = 1'b1;
    end else begin
        X_I_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        X_I_0_ce1 = 1'b1;
    end else begin
        X_I_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        X_I_1_ce0 = 1'b1;
    end else begin
        X_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        X_I_1_ce1 = 1'b1;
    end else begin
        X_I_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_2_ce0 = 1'b1;
    end else begin
        X_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_2_ce1 = 1'b1;
    end else begin
        X_I_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_3_ce0 = 1'b1;
    end else begin
        X_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_3_ce1 = 1'b1;
    end else begin
        X_I_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        X_R_0_ce0 = 1'b1;
    end else begin
        X_R_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        X_R_0_ce1 = 1'b1;
    end else begin
        X_R_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        X_R_1_ce0 = 1'b1;
    end else begin
        X_R_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        X_R_1_ce1 = 1'b1;
    end else begin
        X_R_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_2_ce0 = 1'b1;
    end else begin
        X_R_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_2_ce1 = 1'b1;
    end else begin
        X_R_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_3_ce0 = 1'b1;
    end else begin
        X_R_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_3_ce1 = 1'b1;
    end else begin
        X_R_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_8_fu_653_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter15_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_e2_V = 10'd0;
    end else begin
        ap_sig_allocacmp_e2_V = i_fu_106;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 11'd512;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_102;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load_1 = 11'd512;
    end else begin
        ap_sig_allocacmp_j_load_1 = j_fu_102;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OUT_I_0_address0 = zext_ln44_fu_1011_p1;

assign OUT_I_0_address1 = zext_ln42_fu_990_p1;

assign OUT_I_0_d0 = bitcast_ln45_fu_1022_p1;

assign OUT_I_0_d1 = bitcast_ln43_2_fu_1001_p1;

assign OUT_I_1_address0 = zext_ln44_fu_1011_p1;

assign OUT_I_1_address1 = zext_ln42_fu_990_p1;

assign OUT_I_1_d0 = bitcast_ln45_1_reg_1362;

assign OUT_I_1_d1 = bitcast_ln43_5_reg_1350;

assign OUT_I_2_address0 = zext_ln44_fu_1011_p1;

assign OUT_I_2_address1 = zext_ln42_fu_990_p1;

assign OUT_I_2_d0 = bitcast_ln45_fu_1022_p1;

assign OUT_I_2_d1 = bitcast_ln43_2_fu_1001_p1;

assign OUT_I_3_address0 = zext_ln44_fu_1011_p1;

assign OUT_I_3_address1 = zext_ln42_fu_990_p1;

assign OUT_I_3_d0 = bitcast_ln45_1_reg_1362;

assign OUT_I_3_d1 = bitcast_ln43_5_reg_1350;

assign OUT_R_0_address0 = zext_ln44_fu_1011_p1;

assign OUT_R_0_address1 = zext_ln42_fu_990_p1;

assign OUT_R_0_d0 = bitcast_ln44_fu_1006_p1;

assign OUT_R_0_d1 = bitcast_ln42_2_fu_985_p1;

assign OUT_R_1_address0 = zext_ln44_fu_1011_p1;

assign OUT_R_1_address1 = zext_ln42_fu_990_p1;

assign OUT_R_1_d0 = bitcast_ln44_1_reg_1356;

assign OUT_R_1_d1 = bitcast_ln42_5_reg_1344;

assign OUT_R_2_address0 = zext_ln44_fu_1011_p1;

assign OUT_R_2_address1 = zext_ln42_fu_990_p1;

assign OUT_R_2_d0 = bitcast_ln44_fu_1006_p1;

assign OUT_R_2_d1 = bitcast_ln42_2_fu_985_p1;

assign OUT_R_3_address0 = zext_ln44_fu_1011_p1;

assign OUT_R_3_address1 = zext_ln42_fu_990_p1;

assign OUT_R_3_d0 = bitcast_ln44_1_reg_1356;

assign OUT_R_3_d1 = bitcast_ln42_5_reg_1344;

assign W_imag_address0 = zext_ln39_fu_684_p1;

assign W_imag_address1 = e2_V_cast6_fu_668_p1;

assign W_real_address0 = zext_ln39_fu_684_p1;

assign W_real_address1 = e2_V_cast6_fu_668_p1;

assign X_I_0_address0 = zext_ln42_2_fu_893_p1;

assign X_I_0_address1 = zext_ln42_1_fu_867_p1;

assign X_I_1_address0 = zext_ln42_2_fu_893_p1;

assign X_I_1_address1 = zext_ln42_1_fu_867_p1;

assign X_I_2_address0 = zext_ln39_2_fu_740_p1;

assign X_I_2_address1 = zext_ln39_1_fu_700_p1;

assign X_I_3_address0 = zext_ln39_2_fu_740_p1;

assign X_I_3_address1 = zext_ln39_1_fu_700_p1;

assign X_R_0_address0 = zext_ln42_2_fu_893_p1;

assign X_R_0_address1 = zext_ln42_1_fu_867_p1;

assign X_R_1_address0 = zext_ln42_2_fu_893_p1;

assign X_R_1_address1 = zext_ln42_1_fu_867_p1;

assign X_R_2_address0 = zext_ln39_2_fu_740_p1;

assign X_R_2_address1 = zext_ln39_1_fu_700_p1;

assign X_R_3_address0 = zext_ln39_2_fu_740_p1;

assign X_R_3_address1 = zext_ln39_1_fu_700_p1;

assign add_ln47_fu_751_p2 = (ap_sig_allocacmp_j_load_1 + 11'd2);

assign add_ln886_fu_728_p2 = (ap_sig_allocacmp_e2_V + 10'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_644 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_enable_operation_279 = (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_281 = (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_284 = (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_286 = (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_292 = (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_294 = (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_297 = (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_299 = (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_302 = (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_304 = (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_307 = (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_309 = (icmp_ln42_reg_1092_pp0_iter15_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_312 = (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_314 = (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd0);
end

always @ (*) begin
    ap_enable_operation_317 = (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd1);
end

always @ (*) begin
    ap_enable_operation_319 = (icmp_ln44_reg_1247_pp0_iter15_reg == 1'd1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

always @ (*) begin
    ap_enable_state17_pp0_iter16_stage0 = ((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln42_2_fu_985_p1 = sub_reg_1324;

assign bitcast_ln42_5_fu_969_p1 = grp_fu_592_p2;

assign bitcast_ln43_2_fu_1001_p1 = sub1_reg_1329;

assign bitcast_ln43_5_fu_973_p1 = grp_fu_596_p2;

assign bitcast_ln44_1_fu_977_p1 = grp_fu_600_p2;

assign bitcast_ln44_fu_1006_p1 = add_reg_1334;

assign bitcast_ln45_1_fu_981_p1 = grp_fu_604_p2;

assign bitcast_ln45_fu_1022_p1 = add1_reg_1339;

assign e2_V_cast6_fu_668_p1 = ap_sig_allocacmp_e2_V;

assign empty_10_fu_664_p1 = ap_sig_allocacmp_e2_V[8:0];

assign empty_11_fu_851_p1 = e2_V_reg_1042_pp0_iter8_reg[7:0];

assign empty_12_fu_674_p1 = ap_sig_allocacmp_j_load[7:0];

assign icmp_ln42_fu_712_p2 = ((trunc_ln42_fu_708_p1 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_878_p2 = ((trunc_ln44_fu_875_p1 == 2'd0) ? 1'b1 : 1'b0);

assign or_ln39_1_fu_854_p2 = (empty_11_fu_851_p1 | 8'd1);

assign or_ln39_fu_734_p2 = (empty_12_fu_674_p1 | 8'd1);

assign or_ln886_fu_678_p2 = (empty_10_fu_664_p1 | 9'd1);

assign tmp_1_fu_796_p3 = X_I_2_q1;

assign tmp_1_fu_796_p4 = X_I_3_q1;

assign tmp_2_fu_909_p1 = X_R_0_q1;

assign tmp_2_fu_909_p2 = X_R_1_q1;

assign tmp_3_fu_926_p1 = X_I_0_q1;

assign tmp_3_fu_926_p2 = X_I_1_q1;

assign tmp_4_fu_817_p3 = X_R_2_q0;

assign tmp_4_fu_817_p4 = X_R_3_q0;

assign tmp_5_fu_838_p3 = X_I_2_q0;

assign tmp_5_fu_838_p4 = X_I_3_q0;

assign tmp_6_fu_943_p1 = X_R_0_q0;

assign tmp_6_fu_943_p2 = X_R_1_q0;

assign tmp_7_fu_960_p1 = X_I_0_q0;

assign tmp_7_fu_960_p2 = X_I_1_q0;

assign tmp_8_fu_653_p3 = ap_sig_allocacmp_e2_V[32'd9];

assign tmp_fu_775_p3 = X_R_2_q1;

assign tmp_fu_775_p4 = X_R_3_q1;

assign trunc_ln42_fu_708_p1 = ap_sig_allocacmp_j_load[1:0];

assign trunc_ln44_fu_875_p1 = e2_V_reg_1042_pp0_iter8_reg[1:0];

assign zext_ln39_1_fu_700_p1 = empty_12_fu_674_p1;

assign zext_ln39_2_fu_740_p1 = or_ln39_fu_734_p2;

assign zext_ln39_fu_684_p1 = or_ln886_fu_678_p2;

assign zext_ln42_1_fu_867_p1 = empty_11_fu_851_p1;

assign zext_ln42_2_fu_893_p1 = or_ln39_1_fu_854_p2;

assign zext_ln42_fu_990_p1 = lshr_ln42_1_reg_1096_pp0_iter15_reg;

assign zext_ln44_fu_1011_p1 = lshr_ln2_reg_1251_pp0_iter15_reg;

endmodule //fft_stage_last
