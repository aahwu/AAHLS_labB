// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fft_stages_fft_stages,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2142,HLS_SYN_LUT=2769,HLS_VERSION=2022_1}" *)

module fft_stages (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_R_0_address0,
        X_R_0_ce0,
        X_R_0_q0,
        X_R_1_address0,
        X_R_1_ce0,
        X_R_1_q0,
        X_R_2_address0,
        X_R_2_ce0,
        X_R_2_q0,
        X_R_3_address0,
        X_R_3_ce0,
        X_R_3_q0,
        X_I_0_address0,
        X_I_0_ce0,
        X_I_0_q0,
        X_I_1_address0,
        X_I_1_ce0,
        X_I_1_q0,
        X_I_2_address0,
        X_I_2_ce0,
        X_I_2_q0,
        X_I_3_address0,
        X_I_3_ce0,
        X_I_3_q0,
        stage,
        OUT_R_0_address0,
        OUT_R_0_ce0,
        OUT_R_0_we0,
        OUT_R_0_d0,
        OUT_R_1_address0,
        OUT_R_1_ce0,
        OUT_R_1_we0,
        OUT_R_1_d0,
        OUT_R_2_address0,
        OUT_R_2_ce0,
        OUT_R_2_we0,
        OUT_R_2_d0,
        OUT_R_3_address0,
        OUT_R_3_ce0,
        OUT_R_3_we0,
        OUT_R_3_d0,
        OUT_I_0_address0,
        OUT_I_0_ce0,
        OUT_I_0_we0,
        OUT_I_0_d0,
        OUT_I_1_address0,
        OUT_I_1_ce0,
        OUT_I_1_we0,
        OUT_I_1_d0,
        OUT_I_2_address0,
        OUT_I_2_ce0,
        OUT_I_2_we0,
        OUT_I_2_d0,
        OUT_I_3_address0,
        OUT_I_3_ce0,
        OUT_I_3_we0,
        OUT_I_3_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_pp0_stage4 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] X_R_0_address0;
output   X_R_0_ce0;
input  [31:0] X_R_0_q0;
output  [7:0] X_R_1_address0;
output   X_R_1_ce0;
input  [31:0] X_R_1_q0;
output  [7:0] X_R_2_address0;
output   X_R_2_ce0;
input  [31:0] X_R_2_q0;
output  [7:0] X_R_3_address0;
output   X_R_3_ce0;
input  [31:0] X_R_3_q0;
output  [7:0] X_I_0_address0;
output   X_I_0_ce0;
input  [31:0] X_I_0_q0;
output  [7:0] X_I_1_address0;
output   X_I_1_ce0;
input  [31:0] X_I_1_q0;
output  [7:0] X_I_2_address0;
output   X_I_2_ce0;
input  [31:0] X_I_2_q0;
output  [7:0] X_I_3_address0;
output   X_I_3_ce0;
input  [31:0] X_I_3_q0;
input  [31:0] stage;
output  [7:0] OUT_R_0_address0;
output   OUT_R_0_ce0;
output   OUT_R_0_we0;
output  [31:0] OUT_R_0_d0;
output  [7:0] OUT_R_1_address0;
output   OUT_R_1_ce0;
output   OUT_R_1_we0;
output  [31:0] OUT_R_1_d0;
output  [7:0] OUT_R_2_address0;
output   OUT_R_2_ce0;
output   OUT_R_2_we0;
output  [31:0] OUT_R_2_d0;
output  [7:0] OUT_R_3_address0;
output   OUT_R_3_ce0;
output   OUT_R_3_we0;
output  [31:0] OUT_R_3_d0;
output  [7:0] OUT_I_0_address0;
output   OUT_I_0_ce0;
output   OUT_I_0_we0;
output  [31:0] OUT_I_0_d0;
output  [7:0] OUT_I_1_address0;
output   OUT_I_1_ce0;
output   OUT_I_1_we0;
output  [31:0] OUT_I_1_d0;
output  [7:0] OUT_I_2_address0;
output   OUT_I_2_ce0;
output   OUT_I_2_we0;
output  [31:0] OUT_I_2_d0;
output  [7:0] OUT_I_3_address0;
output   OUT_I_3_ce0;
output   OUT_I_3_we0;
output  [31:0] OUT_I_3_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] X_R_0_address0;
reg X_R_0_ce0;
reg[7:0] X_R_1_address0;
reg X_R_1_ce0;
reg[7:0] X_R_2_address0;
reg X_R_2_ce0;
reg[7:0] X_R_3_address0;
reg X_R_3_ce0;
reg[7:0] X_I_0_address0;
reg X_I_0_ce0;
reg[7:0] X_I_1_address0;
reg X_I_1_ce0;
reg[7:0] X_I_2_address0;
reg X_I_2_ce0;
reg[7:0] X_I_3_address0;
reg X_I_3_ce0;
reg[7:0] OUT_R_0_address0;
reg OUT_R_0_ce0;
reg OUT_R_0_we0;
reg[31:0] OUT_R_0_d0;
reg[7:0] OUT_R_1_address0;
reg OUT_R_1_ce0;
reg OUT_R_1_we0;
reg[31:0] OUT_R_1_d0;
reg[7:0] OUT_R_2_address0;
reg OUT_R_2_ce0;
reg OUT_R_2_we0;
reg[31:0] OUT_R_2_d0;
reg[7:0] OUT_R_3_address0;
reg OUT_R_3_ce0;
reg OUT_R_3_we0;
reg[31:0] OUT_R_3_d0;
reg[7:0] OUT_I_0_address0;
reg OUT_I_0_ce0;
reg OUT_I_0_we0;
reg[31:0] OUT_I_0_d0;
reg[7:0] OUT_I_1_address0;
reg OUT_I_1_ce0;
reg OUT_I_1_we0;
reg[31:0] OUT_I_1_d0;
reg[7:0] OUT_I_2_address0;
reg OUT_I_2_ce0;
reg OUT_I_2_we0;
reg[31:0] OUT_I_2_d0;
reg[7:0] OUT_I_3_address0;
reg OUT_I_3_ce0;
reg OUT_I_3_we0;
reg[31:0] OUT_I_3_d0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln40_fu_991_p2;
wire    ap_CS_fsm_pp0_stage4;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state11_pp0_stage4_iter1;
wire    ap_block_state16_pp0_stage4_iter2;
wire    ap_block_state21_pp0_stage4_iter3;
wire    ap_block_state26_pp0_stage4_iter4;
wire    ap_block_pp0_stage4_11001;
wire   [8:0] W_real_address0;
reg    W_real_ce0;
wire   [31:0] W_real_q0;
wire   [8:0] W_imag_address0;
reg    W_imag_ce0;
wire   [31:0] W_imag_q0;
reg   [0:0] do_init_reg_478;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_state12_pp0_stage0_iter2;
wire    ap_block_state17_pp0_stage0_iter3;
wire    ap_block_state22_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
reg   [31:0] i_31_reg_495;
reg   [5:0] p_phi4_reg_585;
reg   [31:0] sub4_phi_reg_597;
reg  signed [8:0] p_phi_reg_609;
reg   [31:0] one_V_phi_reg_621;
reg   [31:0] numBF_phi_reg_633;
reg   [31:0] stage_read_reg_1014;
reg   [0:0] ap_phi_mux_do_init_phi_fu_483_p6;
reg   [0:0] tmp_4_reg_1020;
reg   [30:0] lshr_ln34_1_reg_1025;
reg   [30:0] lshr_ln34_2_reg_1030;
wire   [5:0] empty_fu_697_p1;
reg   [5:0] empty_reg_1035;
wire   [63:0] zext_ln50_fu_711_p1;
reg   [63:0] zext_ln50_reg_1040;
reg   [63:0] zext_ln50_reg_1040_pp0_iter1_reg;
reg   [63:0] zext_ln50_reg_1040_pp0_iter2_reg;
reg   [63:0] zext_ln50_reg_1040_pp0_iter3_reg;
reg   [63:0] zext_ln50_reg_1040_pp0_iter4_reg;
wire   [31:0] numBF_fu_735_p3;
reg   [31:0] numBF_reg_1092;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_state13_pp0_stage1_iter2;
wire    ap_block_state18_pp0_stage1_iter3;
wire    ap_block_state23_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] one_V_fu_742_p2;
reg   [31:0] one_V_reg_1097;
wire   [31:0] sub4_fu_753_p2;
reg   [31:0] sub4_reg_1102;
wire   [8:0] trunc_ln40_fu_758_p1;
reg   [8:0] trunc_ln40_reg_1107;
wire   [1:0] trunc_ln24_fu_762_p1;
reg   [1:0] trunc_ln24_reg_1112;
reg   [1:0] trunc_ln24_reg_1112_pp0_iter1_reg;
reg   [1:0] trunc_ln24_reg_1112_pp0_iter2_reg;
reg   [1:0] trunc_ln24_reg_1112_pp0_iter3_reg;
reg   [1:0] trunc_ln24_reg_1112_pp0_iter4_reg;
wire   [31:0] tmp_2_fu_782_p6;
reg   [31:0] tmp_2_reg_1116;
reg   [31:0] tmp_2_reg_1116_pp0_iter1_reg;
reg   [31:0] tmp_2_reg_1116_pp0_iter2_reg;
reg   [31:0] tmp_2_reg_1116_pp0_iter3_reg;
wire   [31:0] tmp_3_fu_812_p6;
reg   [31:0] tmp_3_reg_1122;
reg   [31:0] tmp_3_reg_1122_pp0_iter1_reg;
reg   [31:0] tmp_3_reg_1122_pp0_iter2_reg;
reg   [31:0] tmp_3_reg_1122_pp0_iter3_reg;
wire   [1:0] trunc_ln850_fu_836_p1;
reg   [1:0] trunc_ln850_reg_1128;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_state14_pp0_stage2_iter2;
wire    ap_block_state19_pp0_stage2_iter3;
wire    ap_block_state24_pp0_stage2_iter4;
wire    ap_block_pp0_stage2_11001;
reg   [1:0] trunc_ln850_reg_1128_pp0_iter1_reg;
reg   [1:0] trunc_ln850_reg_1128_pp0_iter2_reg;
reg   [1:0] trunc_ln850_reg_1128_pp0_iter3_reg;
reg   [1:0] trunc_ln850_reg_1128_pp0_iter4_reg;
wire   [31:0] p_Result_1_fu_856_p2;
reg   [31:0] p_Result_1_reg_1134;
wire  signed [8:0] trunc_ln1540_fu_862_p1;
reg  signed [8:0] trunc_ln1540_reg_1139;
wire   [63:0] zext_ln47_fu_876_p1;
reg   [63:0] zext_ln47_reg_1144;
reg   [63:0] zext_ln47_reg_1144_pp0_iter1_reg;
reg   [63:0] zext_ln47_reg_1144_pp0_iter2_reg;
reg   [63:0] zext_ln47_reg_1144_pp0_iter3_reg;
reg   [63:0] zext_ln47_reg_1144_pp0_iter4_reg;
wire   [8:0] ret_V_fu_888_p2;
reg   [8:0] ret_V_reg_1196;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state10_pp0_stage3_iter1;
wire    ap_block_state15_pp0_stage3_iter2;
wire    ap_block_state20_pp0_stage3_iter3;
wire    ap_block_state25_pp0_stage3_iter4;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] tmp_fu_909_p6;
reg   [31:0] tmp_reg_1201;
reg   [31:0] tmp_reg_1201_pp0_iter1_reg;
wire   [31:0] tmp_1_fu_938_p6;
reg   [31:0] tmp_1_reg_1206;
wire   [31:0] i_2_fu_970_p2;
reg   [31:0] i_2_reg_1211;
reg   [21:0] tmp_6_reg_1216;
reg   [0:0] icmp_ln40_reg_1231;
reg   [0:0] icmp_ln40_reg_1231_pp0_iter1_reg;
reg   [0:0] icmp_ln40_reg_1231_pp0_iter2_reg;
reg   [0:0] icmp_ln40_reg_1231_pp0_iter3_reg;
reg   [31:0] c2_reg_1235;
reg   [31:0] s2_reg_1240;
wire   [31:0] grp_fu_653_p2;
reg   [31:0] mul_reg_1245;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] mul1_reg_1250;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] mul2_reg_1255;
reg   [31:0] mul3_reg_1260;
wire   [31:0] grp_fu_645_p2;
reg   [31:0] temp_R_reg_1265;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] temp_I_reg_1271;
wire   [31:0] bitcast_ln50_4_fu_996_p1;
reg   [31:0] bitcast_ln50_4_reg_1277;
wire   [31:0] bitcast_ln52_fu_1000_p1;
reg   [31:0] bitcast_ln52_reg_1285;
wire   [31:0] bitcast_ln51_4_fu_1004_p1;
reg   [31:0] bitcast_ln51_4_reg_1293;
wire   [31:0] bitcast_ln53_fu_1008_p1;
reg   [31:0] bitcast_ln53_reg_1301;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage4_subdone;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0;
reg   [31:0] ap_phi_mux_i_31_phi_fu_499_p6;
wire    ap_block_pp0_stage1;
reg   [5:0] ap_phi_mux_p_phi4_phi_fu_589_p4;
reg   [5:0] ap_phi_reg_pp0_iter0_p_phi4_reg_585;
reg   [31:0] ap_phi_mux_sub4_phi_phi_fu_601_p4;
reg   [31:0] ap_phi_reg_pp0_iter0_sub4_phi_reg_597;
reg  signed [8:0] ap_phi_reg_pp0_iter0_p_phi_reg_609;
reg   [31:0] ap_phi_reg_pp0_iter0_one_V_phi_reg_621;
reg   [31:0] ap_phi_reg_pp0_iter0_numBF_phi_reg_633;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln1540_fu_986_p1;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage3;
reg   [31:0] grp_fu_645_p0;
reg   [31:0] grp_fu_645_p1;
reg   [31:0] grp_fu_649_p0;
reg   [31:0] grp_fu_649_p1;
reg   [31:0] grp_fu_653_p0;
reg   [31:0] grp_fu_653_p1;
wire   [31:0] DFTpts_fu_657_p2;
wire   [31:0] sub_ln34_fu_671_p2;
wire   [7:0] lshr_ln1_fu_701_p4;
wire   [31:0] zext_ln34_fu_723_p1;
wire   [31:0] sub_ln34_1_fu_726_p2;
wire   [31:0] zext_ln34_1_fu_732_p1;
wire   [31:0] rhs_fu_748_p2;
wire   [31:0] tmp_2_fu_782_p1;
wire   [31:0] tmp_2_fu_782_p2;
wire   [31:0] tmp_2_fu_782_p3;
wire   [31:0] tmp_2_fu_782_p4;
wire   [31:0] tmp_3_fu_812_p1;
wire   [31:0] tmp_3_fu_812_p2;
wire   [31:0] tmp_3_fu_812_p3;
wire   [31:0] tmp_3_fu_812_p4;
reg   [31:0] p_Result_s_fu_826_p4;
wire   [5:0] sub_ln674_fu_840_p2;
wire   [31:0] zext_ln674_fu_846_p1;
wire   [31:0] lshr_ln674_fu_850_p2;
wire   [7:0] lshr_ln_fu_866_p4;
wire   [31:0] tmp_fu_909_p1;
wire   [31:0] tmp_fu_909_p2;
wire   [31:0] tmp_fu_909_p3;
wire   [31:0] tmp_fu_909_p4;
wire   [31:0] tmp_1_fu_938_p1;
wire   [31:0] tmp_1_fu_938_p2;
wire   [31:0] tmp_1_fu_938_p3;
wire   [31:0] tmp_1_fu_938_p4;
wire   [0:0] icmp_ln1065_fu_951_p2;
wire   [31:0] add_ln55_fu_956_p2;
wire   [31:0] i_fu_962_p3;
wire   [31:0] grp_fu_649_p2;
reg   [1:0] grp_fu_645_opcode;
wire    ap_block_pp0_stage3_00001;
wire    ap_block_pp0_stage2_00001;
wire    ap_block_pp0_stage4_00001;
wire    ap_block_pp0_stage1_00001;
reg    grp_fu_645_ce;
reg    grp_fu_649_ce;
reg    grp_fu_653_ce;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0_0to3;
reg    ap_reset_idle_pp0;
reg    ap_block_pp0;
reg    ap_enable_operation_233;
reg    ap_enable_state23_pp0_iter4_stage1;
reg    ap_enable_operation_249;
reg    ap_enable_state24_pp0_iter4_stage2;
reg    ap_enable_operation_235;
reg    ap_enable_operation_251;
reg    ap_enable_operation_237;
reg    ap_enable_operation_253;
reg    ap_enable_operation_239;
reg    ap_enable_operation_255;
reg    ap_enable_operation_257;
reg    ap_enable_state25_pp0_iter4_stage3;
reg    ap_enable_operation_271;
reg    ap_enable_state26_pp0_iter4_stage4;
reg    ap_enable_operation_260;
reg    ap_enable_operation_274;
reg    ap_enable_operation_263;
reg    ap_enable_operation_277;
reg    ap_enable_operation_266;
reg    ap_enable_operation_280;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_condition_449;
reg    ap_condition_932;
reg    ap_condition_935;
reg    ap_condition_472;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

fft_stages_W_real_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
W_real_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_real_address0),
    .ce0(W_real_ce0),
    .q0(W_real_q0)
);

fft_stages_W_imag_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
W_imag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_imag_address0),
    .ce0(W_imag_ce0),
    .q0(W_imag_q0)
);

fft_stages_faddfsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
faddfsub_32ns_32ns_32_5_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_645_p0),
    .din1(grp_fu_645_p1),
    .opcode(grp_fu_645_opcode),
    .ce(grp_fu_645_ce),
    .dout(grp_fu_645_p2)
);

fft_stages_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_649_p0),
    .din1(grp_fu_649_p1),
    .ce(grp_fu_649_ce),
    .dout(grp_fu_649_p2)
);

fft_stages_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_653_p0),
    .din1(grp_fu_653_p1),
    .ce(grp_fu_653_ce),
    .dout(grp_fu_653_p2)
);

fft_stages_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U4(
    .din0(tmp_2_fu_782_p1),
    .din1(tmp_2_fu_782_p2),
    .din2(tmp_2_fu_782_p3),
    .din3(tmp_2_fu_782_p4),
    .din4(trunc_ln24_fu_762_p1),
    .dout(tmp_2_fu_782_p6)
);

fft_stages_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U5(
    .din0(tmp_3_fu_812_p1),
    .din1(tmp_3_fu_812_p2),
    .din2(tmp_3_fu_812_p3),
    .din3(tmp_3_fu_812_p4),
    .din4(trunc_ln24_fu_762_p1),
    .dout(tmp_3_fu_812_p6)
);

fft_stages_mul_9s_9s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mul_9s_9s_9_1_1_U6(
    .din0(trunc_ln1540_reg_1139),
    .din1(ap_phi_reg_pp0_iter0_p_phi_reg_609),
    .dout(ret_V_fu_888_p2)
);

fft_stages_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U7(
    .din0(tmp_fu_909_p1),
    .din1(tmp_fu_909_p2),
    .din2(tmp_fu_909_p3),
    .din3(tmp_fu_909_p4),
    .din4(trunc_ln850_reg_1128),
    .dout(tmp_fu_909_p6)
);

fft_stages_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U8(
    .din0(tmp_1_fu_938_p1),
    .din1(tmp_1_fu_938_p2),
    .din2(tmp_1_fu_938_p3),
    .din3(tmp_1_fu_938_p4),
    .din4(trunc_ln850_reg_1128),
    .dout(tmp_1_fu_938_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_935)) begin
            ap_phi_reg_pp0_iter0_numBF_phi_reg_633 <= numBF_phi_reg_633;
        end else if ((1'b1 == ap_condition_932)) begin
            ap_phi_reg_pp0_iter0_numBF_phi_reg_633 <= numBF_reg_1092;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_935)) begin
            ap_phi_reg_pp0_iter0_one_V_phi_reg_621 <= one_V_phi_reg_621;
        end else if ((1'b1 == ap_condition_932)) begin
            ap_phi_reg_pp0_iter0_one_V_phi_reg_621 <= one_V_reg_1097;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if ((1'b1 == ap_condition_935)) begin
            ap_phi_reg_pp0_iter0_p_phi_reg_609 <= p_phi_reg_609;
        end else if ((1'b1 == ap_condition_932)) begin
            ap_phi_reg_pp0_iter0_p_phi_reg_609 <= trunc_ln40_reg_1107;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln40_reg_1231 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        do_init_reg_478 <= 1'd0;
    end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln40_reg_1231 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        do_init_reg_478 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln40_reg_1231 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_31_reg_495 <= i_2_reg_1211;
    end else if ((((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln40_reg_1231 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        i_31_reg_495 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_472)) begin
        if ((do_init_reg_478 == 1'd1)) begin
            p_phi4_reg_585 <= empty_reg_1035;
        end else if ((1'b1 == 1'b1)) begin
            p_phi4_reg_585 <= ap_phi_reg_pp0_iter0_p_phi4_reg_585;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_472)) begin
        if ((do_init_reg_478 == 1'd1)) begin
            sub4_phi_reg_597 <= sub4_reg_1102;
        end else if ((1'b1 == 1'b1)) begin
            sub4_phi_reg_597 <= ap_phi_reg_pp0_iter0_sub4_phi_reg_597;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (do_init_reg_478 == 1'd0))) begin
        ap_phi_reg_pp0_iter0_p_phi4_reg_585 <= p_phi4_reg_585;
        ap_phi_reg_pp0_iter0_sub4_phi_reg_597 <= sub4_phi_reg_597;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        bitcast_ln50_4_reg_1277 <= bitcast_ln50_4_fu_996_p1;
        c2_reg_1235 <= W_real_q0;
        s2_reg_1240 <= W_imag_q0;
        zext_ln50_reg_1040[7 : 0] <= zext_ln50_fu_711_p1[7 : 0];
        zext_ln50_reg_1040_pp0_iter1_reg[7 : 0] <= zext_ln50_reg_1040[7 : 0];
        zext_ln50_reg_1040_pp0_iter2_reg[7 : 0] <= zext_ln50_reg_1040_pp0_iter1_reg[7 : 0];
        zext_ln50_reg_1040_pp0_iter3_reg[7 : 0] <= zext_ln50_reg_1040_pp0_iter2_reg[7 : 0];
        zext_ln50_reg_1040_pp0_iter4_reg[7 : 0] <= zext_ln50_reg_1040_pp0_iter3_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        bitcast_ln51_4_reg_1293 <= bitcast_ln51_4_fu_1004_p1;
        p_Result_1_reg_1134 <= p_Result_1_fu_856_p2;
        trunc_ln1540_reg_1139 <= trunc_ln1540_fu_862_p1;
        trunc_ln850_reg_1128 <= trunc_ln850_fu_836_p1;
        trunc_ln850_reg_1128_pp0_iter1_reg <= trunc_ln850_reg_1128;
        trunc_ln850_reg_1128_pp0_iter2_reg <= trunc_ln850_reg_1128_pp0_iter1_reg;
        trunc_ln850_reg_1128_pp0_iter3_reg <= trunc_ln850_reg_1128_pp0_iter2_reg;
        trunc_ln850_reg_1128_pp0_iter4_reg <= trunc_ln850_reg_1128_pp0_iter3_reg;
        zext_ln47_reg_1144[7 : 0] <= zext_ln47_fu_876_p1[7 : 0];
        zext_ln47_reg_1144_pp0_iter1_reg[7 : 0] <= zext_ln47_reg_1144[7 : 0];
        zext_ln47_reg_1144_pp0_iter2_reg[7 : 0] <= zext_ln47_reg_1144_pp0_iter1_reg[7 : 0];
        zext_ln47_reg_1144_pp0_iter3_reg[7 : 0] <= zext_ln47_reg_1144_pp0_iter2_reg[7 : 0];
        zext_ln47_reg_1144_pp0_iter4_reg[7 : 0] <= zext_ln47_reg_1144_pp0_iter3_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        bitcast_ln52_reg_1285 <= bitcast_ln52_fu_1000_p1;
        tmp_2_reg_1116 <= tmp_2_fu_782_p6;
        tmp_2_reg_1116_pp0_iter1_reg <= tmp_2_reg_1116;
        tmp_2_reg_1116_pp0_iter2_reg <= tmp_2_reg_1116_pp0_iter1_reg;
        tmp_2_reg_1116_pp0_iter3_reg <= tmp_2_reg_1116_pp0_iter2_reg;
        tmp_3_reg_1122 <= tmp_3_fu_812_p6;
        tmp_3_reg_1122_pp0_iter1_reg <= tmp_3_reg_1122;
        tmp_3_reg_1122_pp0_iter2_reg <= tmp_3_reg_1122_pp0_iter1_reg;
        tmp_3_reg_1122_pp0_iter3_reg <= tmp_3_reg_1122_pp0_iter2_reg;
        trunc_ln24_reg_1112 <= trunc_ln24_fu_762_p1;
        trunc_ln24_reg_1112_pp0_iter1_reg <= trunc_ln24_reg_1112;
        trunc_ln24_reg_1112_pp0_iter2_reg <= trunc_ln24_reg_1112_pp0_iter1_reg;
        trunc_ln24_reg_1112_pp0_iter3_reg <= trunc_ln24_reg_1112_pp0_iter2_reg;
        trunc_ln24_reg_1112_pp0_iter4_reg <= trunc_ln24_reg_1112_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        bitcast_ln53_reg_1301 <= bitcast_ln53_fu_1008_p1;
        ret_V_reg_1196 <= ret_V_fu_888_p2;
        tmp_1_reg_1206 <= tmp_1_fu_938_p6;
        tmp_6_reg_1216 <= {{i_2_fu_970_p2[31:10]}};
        tmp_reg_1201 <= tmp_fu_909_p6;
        tmp_reg_1201_pp0_iter1_reg <= tmp_reg_1201;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_phi_mux_do_init_phi_fu_483_p6 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        empty_reg_1035 <= empty_fu_697_p1;
        lshr_ln34_1_reg_1025 <= {{sub_ln34_fu_671_p2[31:1]}};
        lshr_ln34_2_reg_1030 <= {{DFTpts_fu_657_p2[31:1]}};
        stage_read_reg_1014 <= stage;
        tmp_4_reg_1020 <= DFTpts_fu_657_p2[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        i_2_reg_1211 <= i_2_fu_970_p2;
        numBF_phi_reg_633 <= ap_phi_reg_pp0_iter0_numBF_phi_reg_633;
        one_V_phi_reg_621 <= ap_phi_reg_pp0_iter0_one_V_phi_reg_621;
        p_phi_reg_609 <= ap_phi_reg_pp0_iter0_p_phi_reg_609;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        icmp_ln40_reg_1231 <= icmp_ln40_fu_991_p2;
        icmp_ln40_reg_1231_pp0_iter1_reg <= icmp_ln40_reg_1231;
        icmp_ln40_reg_1231_pp0_iter2_reg <= icmp_ln40_reg_1231_pp0_iter1_reg;
        icmp_ln40_reg_1231_pp0_iter3_reg <= icmp_ln40_reg_1231_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul1_reg_1250 <= grp_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul2_reg_1255 <= grp_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul3_reg_1260 <= grp_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul_reg_1245 <= grp_fu_653_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (do_init_reg_478 == 1'd1))) begin
        numBF_reg_1092 <= numBF_fu_735_p3;
        one_V_reg_1097 <= one_V_fu_742_p2;
        sub4_reg_1102 <= sub4_fu_753_p2;
        trunc_ln40_reg_1107 <= trunc_ln40_fu_758_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        temp_I_reg_1271 <= grp_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        temp_R_reg_1265 <= grp_fu_645_p2;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            OUT_I_0_address0 = zext_ln50_reg_1040_pp0_iter4_reg;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            OUT_I_0_address0 = zext_ln47_reg_1144_pp0_iter4_reg;
        end else begin
            OUT_I_0_address0 = 'bx;
        end
    end else begin
        OUT_I_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        OUT_I_0_ce0 = 1'b1;
    end else begin
        OUT_I_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            OUT_I_0_d0 = bitcast_ln53_reg_1301;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            OUT_I_0_d0 = bitcast_ln51_4_reg_1293;
        end else begin
            OUT_I_0_d0 = 'bx;
        end
    end else begin
        OUT_I_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln850_reg_1128_pp0_iter4_reg == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        OUT_I_0_we0 = 1'b1;
    end else begin
        OUT_I_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            OUT_I_1_address0 = zext_ln50_reg_1040_pp0_iter4_reg;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            OUT_I_1_address0 = zext_ln47_reg_1144_pp0_iter4_reg;
        end else begin
            OUT_I_1_address0 = 'bx;
        end
    end else begin
        OUT_I_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        OUT_I_1_ce0 = 1'b1;
    end else begin
        OUT_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            OUT_I_1_d0 = bitcast_ln53_reg_1301;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            OUT_I_1_d0 = bitcast_ln51_4_reg_1293;
        end else begin
            OUT_I_1_d0 = 'bx;
        end
    end else begin
        OUT_I_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln850_reg_1128_pp0_iter4_reg == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        OUT_I_1_we0 = 1'b1;
    end else begin
        OUT_I_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            OUT_I_2_address0 = zext_ln50_reg_1040_pp0_iter4_reg;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            OUT_I_2_address0 = zext_ln47_reg_1144_pp0_iter4_reg;
        end else begin
            OUT_I_2_address0 = 'bx;
        end
    end else begin
        OUT_I_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        OUT_I_2_ce0 = 1'b1;
    end else begin
        OUT_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            OUT_I_2_d0 = bitcast_ln53_reg_1301;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            OUT_I_2_d0 = bitcast_ln51_4_reg_1293;
        end else begin
            OUT_I_2_d0 = 'bx;
        end
    end else begin
        OUT_I_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln850_reg_1128_pp0_iter4_reg == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        OUT_I_2_we0 = 1'b1;
    end else begin
        OUT_I_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            OUT_I_3_address0 = zext_ln50_reg_1040_pp0_iter4_reg;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            OUT_I_3_address0 = zext_ln47_reg_1144_pp0_iter4_reg;
        end else begin
            OUT_I_3_address0 = 'bx;
        end
    end else begin
        OUT_I_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        OUT_I_3_ce0 = 1'b1;
    end else begin
        OUT_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            OUT_I_3_d0 = bitcast_ln53_reg_1301;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            OUT_I_3_d0 = bitcast_ln51_4_reg_1293;
        end else begin
            OUT_I_3_d0 = 'bx;
        end
    end else begin
        OUT_I_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd3) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln850_reg_1128_pp0_iter4_reg == 2'd3) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        OUT_I_3_we0 = 1'b1;
    end else begin
        OUT_I_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            OUT_R_0_address0 = zext_ln50_reg_1040_pp0_iter4_reg;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            OUT_R_0_address0 = zext_ln47_reg_1144_pp0_iter3_reg;
        end else begin
            OUT_R_0_address0 = 'bx;
        end
    end else begin
        OUT_R_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OUT_R_0_ce0 = 1'b1;
    end else begin
        OUT_R_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            OUT_R_0_d0 = bitcast_ln52_reg_1285;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            OUT_R_0_d0 = bitcast_ln50_4_reg_1277;
        end else begin
            OUT_R_0_d0 = 'bx;
        end
    end else begin
        OUT_R_0_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln850_reg_1128_pp0_iter3_reg == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OUT_R_0_we0 = 1'b1;
    end else begin
        OUT_R_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            OUT_R_1_address0 = zext_ln50_reg_1040_pp0_iter4_reg;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            OUT_R_1_address0 = zext_ln47_reg_1144_pp0_iter3_reg;
        end else begin
            OUT_R_1_address0 = 'bx;
        end
    end else begin
        OUT_R_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OUT_R_1_ce0 = 1'b1;
    end else begin
        OUT_R_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            OUT_R_1_d0 = bitcast_ln52_reg_1285;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            OUT_R_1_d0 = bitcast_ln50_4_reg_1277;
        end else begin
            OUT_R_1_d0 = 'bx;
        end
    end else begin
        OUT_R_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln850_reg_1128_pp0_iter3_reg == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OUT_R_1_we0 = 1'b1;
    end else begin
        OUT_R_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            OUT_R_2_address0 = zext_ln50_reg_1040_pp0_iter4_reg;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            OUT_R_2_address0 = zext_ln47_reg_1144_pp0_iter3_reg;
        end else begin
            OUT_R_2_address0 = 'bx;
        end
    end else begin
        OUT_R_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OUT_R_2_ce0 = 1'b1;
    end else begin
        OUT_R_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            OUT_R_2_d0 = bitcast_ln52_reg_1285;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            OUT_R_2_d0 = bitcast_ln50_4_reg_1277;
        end else begin
            OUT_R_2_d0 = 'bx;
        end
    end else begin
        OUT_R_2_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln850_reg_1128_pp0_iter3_reg == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OUT_R_2_we0 = 1'b1;
    end else begin
        OUT_R_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            OUT_R_3_address0 = zext_ln50_reg_1040_pp0_iter4_reg;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            OUT_R_3_address0 = zext_ln47_reg_1144_pp0_iter3_reg;
        end else begin
            OUT_R_3_address0 = 'bx;
        end
    end else begin
        OUT_R_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OUT_R_3_ce0 = 1'b1;
    end else begin
        OUT_R_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            OUT_R_3_d0 = bitcast_ln52_reg_1285;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            OUT_R_3_d0 = bitcast_ln50_4_reg_1277;
        end else begin
            OUT_R_3_d0 = 'bx;
        end
    end else begin
        OUT_R_3_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd3) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (trunc_ln850_reg_1128_pp0_iter3_reg == 2'd3) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        OUT_R_3_we0 = 1'b1;
    end else begin
        OUT_R_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        W_imag_ce0 = 1'b1;
    end else begin
        W_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        W_real_ce0 = 1'b1;
    end else begin
        W_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            X_I_0_address0 = zext_ln47_fu_876_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            X_I_0_address0 = zext_ln50_fu_711_p1;
        end else begin
            X_I_0_address0 = 'bx;
        end
    end else begin
        X_I_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_I_0_ce0 = 1'b1;
    end else begin
        X_I_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            X_I_1_address0 = zext_ln47_fu_876_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            X_I_1_address0 = zext_ln50_fu_711_p1;
        end else begin
            X_I_1_address0 = 'bx;
        end
    end else begin
        X_I_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_I_1_ce0 = 1'b1;
    end else begin
        X_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            X_I_2_address0 = zext_ln47_fu_876_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            X_I_2_address0 = zext_ln50_fu_711_p1;
        end else begin
            X_I_2_address0 = 'bx;
        end
    end else begin
        X_I_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_I_2_ce0 = 1'b1;
    end else begin
        X_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            X_I_3_address0 = zext_ln47_fu_876_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            X_I_3_address0 = zext_ln50_fu_711_p1;
        end else begin
            X_I_3_address0 = 'bx;
        end
    end else begin
        X_I_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_I_3_ce0 = 1'b1;
    end else begin
        X_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            X_R_0_address0 = zext_ln47_fu_876_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            X_R_0_address0 = zext_ln50_fu_711_p1;
        end else begin
            X_R_0_address0 = 'bx;
        end
    end else begin
        X_R_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_R_0_ce0 = 1'b1;
    end else begin
        X_R_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            X_R_1_address0 = zext_ln47_fu_876_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            X_R_1_address0 = zext_ln50_fu_711_p1;
        end else begin
            X_R_1_address0 = 'bx;
        end
    end else begin
        X_R_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_R_1_ce0 = 1'b1;
    end else begin
        X_R_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            X_R_2_address0 = zext_ln47_fu_876_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            X_R_2_address0 = zext_ln50_fu_711_p1;
        end else begin
            X_R_2_address0 = 'bx;
        end
    end else begin
        X_R_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_R_2_ce0 = 1'b1;
    end else begin
        X_R_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            X_R_3_address0 = zext_ln47_fu_876_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            X_R_3_address0 = zext_ln50_fu_711_p1;
        end else begin
            X_R_3_address0 = 'bx;
        end
    end else begin
        X_R_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_R_3_ce0 = 1'b1;
    end else begin
        X_R_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln40_reg_1231_pp0_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to3 = 1'b1;
    end else begin
        ap_idle_pp0_0to3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_449)) begin
        if ((icmp_ln40_reg_1231 == 1'd0)) begin
            ap_phi_mux_do_init_phi_fu_483_p6 = 1'd1;
        end else if ((icmp_ln40_reg_1231 == 1'd1)) begin
            ap_phi_mux_do_init_phi_fu_483_p6 = 1'd0;
        end else begin
            ap_phi_mux_do_init_phi_fu_483_p6 = do_init_reg_478;
        end
    end else begin
        ap_phi_mux_do_init_phi_fu_483_p6 = do_init_reg_478;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_449)) begin
        if ((icmp_ln40_reg_1231 == 1'd0)) begin
            ap_phi_mux_i_31_phi_fu_499_p6 = 32'd0;
        end else if ((icmp_ln40_reg_1231 == 1'd1)) begin
            ap_phi_mux_i_31_phi_fu_499_p6 = i_2_reg_1211;
        end else begin
            ap_phi_mux_i_31_phi_fu_499_p6 = i_31_reg_495;
        end
    end else begin
        ap_phi_mux_i_31_phi_fu_499_p6 = i_31_reg_495;
    end
end

always @ (*) begin
    if ((do_init_reg_478 == 1'd1)) begin
        ap_phi_mux_p_phi4_phi_fu_589_p4 = empty_reg_1035;
    end else begin
        ap_phi_mux_p_phi4_phi_fu_589_p4 = ap_phi_reg_pp0_iter0_p_phi4_reg_585;
    end
end

always @ (*) begin
    if ((do_init_reg_478 == 1'd1)) begin
        ap_phi_mux_sub4_phi_phi_fu_601_p4 = sub4_reg_1102;
    end else begin
        ap_phi_mux_sub4_phi_phi_fu_601_p4 = ap_phi_reg_pp0_iter0_sub4_phi_reg_597;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln40_fu_991_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to3 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_645_ce = 1'b1;
    end else begin
        grp_fu_645_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_00001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_645_opcode = 2'd1;
    end else if ((((1'b0 == ap_block_pp0_stage4_00001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2_00001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage3_00001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_645_opcode = 2'd0;
    end else begin
        grp_fu_645_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_645_p0 = tmp_3_reg_1122_pp0_iter3_reg;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_645_p0 = tmp_2_reg_1116_pp0_iter3_reg;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_645_p0 = mul2_reg_1255;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_645_p0 = mul_reg_1245;
    end else begin
        grp_fu_645_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_645_p1 = temp_I_reg_1271;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_645_p1 = temp_R_reg_1265;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_645_p1 = mul3_reg_1260;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_645_p1 = mul1_reg_1250;
    end else begin
        grp_fu_645_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_649_ce = 1'b1;
    end else begin
        grp_fu_649_ce = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_649_p0 = tmp_3_reg_1122_pp0_iter3_reg;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_649_p0 = tmp_2_reg_1116_pp0_iter2_reg;
        end else begin
            grp_fu_649_p0 = 'bx;
        end
    end else begin
        grp_fu_649_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_649_p1 = temp_I_reg_1271;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_649_p1 = temp_R_reg_1265;
        end else begin
            grp_fu_649_p1 = 'bx;
        end
    end else begin
        grp_fu_649_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_653_ce = 1'b1;
    end else begin
        grp_fu_653_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_653_p0 = tmp_reg_1201_pp0_iter1_reg;
    end else if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_653_p0 = tmp_1_reg_1206;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_653_p0 = tmp_reg_1201;
    end else begin
        grp_fu_653_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_653_p1 = s2_reg_1240;
    end else if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_653_p1 = c2_reg_1235;
    end else begin
        grp_fu_653_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if (((ap_reset_idle_pp0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_reset_idle_pp0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign DFTpts_fu_657_p2 = 32'd1 << stage;

assign W_imag_address0 = zext_ln1540_fu_986_p1;

assign W_real_address0 = zext_ln1540_fu_986_p1;

assign add_ln55_fu_956_p2 = (i_31_reg_495 + ap_phi_reg_pp0_iter0_numBF_phi_reg_633);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = (((ap_ST_fsm_pp0_stage3 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage3_subdone)) | ((ap_ST_fsm_pp0_stage4 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage4_subdone)) | ((ap_ST_fsm_pp0_stage2 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage2_subdone)) | ((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage1_subdone)) | ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_449 = ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

always @ (*) begin
    ap_condition_472 = ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_condition_932 = ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (do_init_reg_478 == 1'd1));
end

always @ (*) begin
    ap_condition_935 = ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (do_init_reg_478 == 1'd0));
end

always @ (*) begin
    ap_enable_operation_233 = (trunc_ln850_reg_1128_pp0_iter3_reg == 2'd2);
end

always @ (*) begin
    ap_enable_operation_235 = (trunc_ln850_reg_1128_pp0_iter3_reg == 2'd1);
end

always @ (*) begin
    ap_enable_operation_237 = (trunc_ln850_reg_1128_pp0_iter3_reg == 2'd0);
end

always @ (*) begin
    ap_enable_operation_239 = (trunc_ln850_reg_1128_pp0_iter3_reg == 2'd3);
end

always @ (*) begin
    ap_enable_operation_249 = (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd2);
end

always @ (*) begin
    ap_enable_operation_251 = (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd1);
end

always @ (*) begin
    ap_enable_operation_253 = (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd0);
end

always @ (*) begin
    ap_enable_operation_255 = (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd3);
end

always @ (*) begin
    ap_enable_operation_257 = (trunc_ln850_reg_1128_pp0_iter4_reg == 2'd2);
end

always @ (*) begin
    ap_enable_operation_260 = (trunc_ln850_reg_1128_pp0_iter4_reg == 2'd1);
end

always @ (*) begin
    ap_enable_operation_263 = (trunc_ln850_reg_1128_pp0_iter4_reg == 2'd0);
end

always @ (*) begin
    ap_enable_operation_266 = (trunc_ln850_reg_1128_pp0_iter4_reg == 2'd3);
end

always @ (*) begin
    ap_enable_operation_271 = (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd2);
end

always @ (*) begin
    ap_enable_operation_274 = (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd1);
end

always @ (*) begin
    ap_enable_operation_277 = (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd0);
end

always @ (*) begin
    ap_enable_operation_280 = (trunc_ln24_reg_1112_pp0_iter4_reg == 2'd3);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state23_pp0_iter4_stage1 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state24_pp0_iter4_stage2 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2));
end

always @ (*) begin
    ap_enable_state25_pp0_iter4_stage3 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3));
end

always @ (*) begin
    ap_enable_state26_pp0_iter4_stage4 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4));
end

assign bitcast_ln50_4_fu_996_p1 = grp_fu_649_p2;

assign bitcast_ln51_4_fu_1004_p1 = grp_fu_649_p2;

assign bitcast_ln52_fu_1000_p1 = grp_fu_645_p2;

assign bitcast_ln53_fu_1008_p1 = grp_fu_645_p2;

assign empty_fu_697_p1 = stage[5:0];

assign i_2_fu_970_p2 = (i_fu_962_p3 + 32'd1);

assign i_fu_962_p3 = ((icmp_ln1065_fu_951_p2[0:0] == 1'b1) ? add_ln55_fu_956_p2 : i_31_reg_495);

assign icmp_ln1065_fu_951_p2 = ((p_Result_1_reg_1134 == ap_phi_reg_pp0_iter0_one_V_phi_reg_621) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_991_p2 = (($signed(tmp_6_reg_1216) < $signed(22'd1)) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_701_p4 = {{ap_phi_mux_i_31_phi_fu_499_p6[9:2]}};

assign lshr_ln674_fu_850_p2 = 32'd4294967295 >> zext_ln674_fu_846_p1;

assign lshr_ln_fu_866_p4 = {{p_Result_s_fu_826_p4[9:2]}};

assign numBF_fu_735_p3 = ((tmp_4_reg_1020[0:0] == 1'b1) ? sub_ln34_1_fu_726_p2 : zext_ln34_1_fu_732_p1);

assign one_V_fu_742_p2 = ($signed(numBF_fu_735_p3) + $signed(32'd4294967295));

assign p_Result_1_fu_856_p2 = (lshr_ln674_fu_850_p2 & i_31_reg_495);

always @ (*) begin
    p_Result_s_fu_826_p4 = i_31_reg_495;
    p_Result_s_fu_826_p4[ap_phi_mux_sub4_phi_phi_fu_601_p4] = |(1'd1);
end

assign rhs_fu_748_p2 = 32'd1024 >> stage_read_reg_1014;

assign sub4_fu_753_p2 = ($signed(stage_read_reg_1014) + $signed(32'd4294967295));

assign sub_ln34_1_fu_726_p2 = (32'd0 - zext_ln34_fu_723_p1);

assign sub_ln34_fu_671_p2 = (32'd0 - DFTpts_fu_657_p2);

assign sub_ln674_fu_840_p2 = ($signed(6'd33) - $signed(ap_phi_mux_p_phi4_phi_fu_589_p4));

assign tmp_1_fu_938_p1 = X_I_0_q0;

assign tmp_1_fu_938_p2 = X_I_1_q0;

assign tmp_1_fu_938_p3 = X_I_2_q0;

assign tmp_1_fu_938_p4 = X_I_3_q0;

assign tmp_2_fu_782_p1 = X_R_0_q0;

assign tmp_2_fu_782_p2 = X_R_1_q0;

assign tmp_2_fu_782_p3 = X_R_2_q0;

assign tmp_2_fu_782_p4 = X_R_3_q0;

assign tmp_3_fu_812_p1 = X_I_0_q0;

assign tmp_3_fu_812_p2 = X_I_1_q0;

assign tmp_3_fu_812_p3 = X_I_2_q0;

assign tmp_3_fu_812_p4 = X_I_3_q0;

assign tmp_fu_909_p1 = X_R_0_q0;

assign tmp_fu_909_p2 = X_R_1_q0;

assign tmp_fu_909_p3 = X_R_2_q0;

assign tmp_fu_909_p4 = X_R_3_q0;

assign trunc_ln1540_fu_862_p1 = p_Result_1_fu_856_p2[8:0];

assign trunc_ln24_fu_762_p1 = i_31_reg_495[1:0];

assign trunc_ln40_fu_758_p1 = rhs_fu_748_p2[8:0];

assign trunc_ln850_fu_836_p1 = p_Result_s_fu_826_p4[1:0];

assign zext_ln1540_fu_986_p1 = ret_V_reg_1196;

assign zext_ln34_1_fu_732_p1 = lshr_ln34_2_reg_1030;

assign zext_ln34_fu_723_p1 = lshr_ln34_1_reg_1025;

assign zext_ln47_fu_876_p1 = lshr_ln_fu_866_p4;

assign zext_ln50_fu_711_p1 = lshr_ln1_fu_701_p4;

assign zext_ln674_fu_846_p1 = sub_ln674_fu_840_p2;

always @ (posedge ap_clk) begin
    zext_ln50_reg_1040[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln50_reg_1040_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln50_reg_1040_pp0_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln50_reg_1040_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln50_reg_1040_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln47_reg_1144[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln47_reg_1144_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln47_reg_1144_pp0_iter2_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln47_reg_1144_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln47_reg_1144_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //fft_stages
