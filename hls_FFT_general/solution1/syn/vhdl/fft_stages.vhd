-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_stages is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_0_ce0 : OUT STD_LOGIC;
    X_R_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_1_ce0 : OUT STD_LOGIC;
    X_R_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_2_ce0 : OUT STD_LOGIC;
    X_R_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_3_ce0 : OUT STD_LOGIC;
    X_R_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_0_ce0 : OUT STD_LOGIC;
    X_I_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_1_ce0 : OUT STD_LOGIC;
    X_I_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_2_ce0 : OUT STD_LOGIC;
    X_I_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_3_ce0 : OUT STD_LOGIC;
    X_I_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    stage : IN STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_0_ce0 : OUT STD_LOGIC;
    OUT_R_0_we0 : OUT STD_LOGIC;
    OUT_R_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_1_ce0 : OUT STD_LOGIC;
    OUT_R_1_we0 : OUT STD_LOGIC;
    OUT_R_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_2_ce0 : OUT STD_LOGIC;
    OUT_R_2_we0 : OUT STD_LOGIC;
    OUT_R_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_3_ce0 : OUT STD_LOGIC;
    OUT_R_3_we0 : OUT STD_LOGIC;
    OUT_R_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_0_ce0 : OUT STD_LOGIC;
    OUT_I_0_we0 : OUT STD_LOGIC;
    OUT_I_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_1_ce0 : OUT STD_LOGIC;
    OUT_I_1_we0 : OUT STD_LOGIC;
    OUT_I_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_2_ce0 : OUT STD_LOGIC;
    OUT_I_2_we0 : OUT STD_LOGIC;
    OUT_I_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_3_ce0 : OUT STD_LOGIC;
    OUT_I_3_we0 : OUT STD_LOGIC;
    OUT_I_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_stages is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft_stages_fft_stages,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2142,HLS_SYN_LUT=2769,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv6_21 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln40_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state26_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal W_real_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_real_ce0 : STD_LOGIC;
    signal W_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_imag_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_imag_ce0 : STD_LOGIC;
    signal W_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal do_init_reg_478 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_31_reg_495 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_phi4_reg_585 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub4_phi_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_phi_reg_609 : STD_LOGIC_VECTOR (8 downto 0);
    signal one_V_phi_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal numBF_phi_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal stage_read_reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_do_init_phi_fu_483_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln34_1_reg_1025 : STD_LOGIC_VECTOR (30 downto 0);
    signal lshr_ln34_2_reg_1030 : STD_LOGIC_VECTOR (30 downto 0);
    signal empty_fu_697_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal empty_reg_1035 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln50_fu_711_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_reg_1040 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_reg_1040_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_reg_1040_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_reg_1040_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln50_reg_1040_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal numBF_fu_735_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal numBF_reg_1092 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal one_V_fu_742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal one_V_reg_1097 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub4_fu_753_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub4_reg_1102 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln40_fu_758_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln40_reg_1107 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln24_fu_762_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln24_reg_1112 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln24_reg_1112_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln24_reg_1112_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln24_reg_1112_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln24_reg_1112_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_782_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1116_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1116_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1116_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_812_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1122 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1122_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1122_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1122_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln850_fu_836_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_1128 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal trunc_ln850_reg_1128_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_1128_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_1128_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_1128_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Result_1_fu_856_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_reg_1134 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1540_fu_862_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1540_reg_1139 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln47_fu_876_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_reg_1144 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_reg_1144_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_reg_1144_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_reg_1144_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln47_reg_1144_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ret_V_fu_888_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_1196 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state25_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_fu_909_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1201 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1201_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_938_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1206 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_970_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_1216 : STD_LOGIC_VECTOR (21 downto 0);
    signal icmp_ln40_reg_1231 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1231_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1231_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_1231_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c2_reg_1235 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_reg_1240 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_653_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal mul1_reg_1250 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal mul2_reg_1255 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_1260 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_645_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_R_reg_1265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal temp_I_reg_1271 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln50_4_fu_996_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln50_4_reg_1277 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln52_fu_1000_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln52_reg_1285 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln51_4_fu_1004_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln51_4_reg_1293 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln53_fu_1008_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln53_reg_1301 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_31_phi_fu_499_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_p_phi4_phi_fu_589_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_reg_pp0_iter0_p_phi4_reg_585 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_sub4_phi_phi_fu_601_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_sub4_phi_reg_597 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_p_phi_reg_609 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_reg_pp0_iter0_one_V_phi_reg_621 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_numBF_phi_reg_633 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln1540_fu_986_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_645_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_645_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_649_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_649_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_653_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_653_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal DFTpts_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln34_fu_671_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1_fu_701_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln34_fu_723_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln34_1_fu_726_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln34_1_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_fu_748_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_782_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_782_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_782_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_812_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_812_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_812_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_812_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_826_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln674_fu_840_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln674_fu_846_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_fu_850_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln_fu_866_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_909_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_909_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_909_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_909_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_938_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_938_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_938_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_938_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln1065_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_fu_956_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_962_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_649_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_645_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_645_ce : STD_LOGIC;
    signal grp_fu_649_ce : STD_LOGIC;
    signal grp_fu_653_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_233 : BOOLEAN;
    signal ap_enable_state23_pp0_iter4_stage1 : BOOLEAN;
    signal ap_enable_operation_249 : BOOLEAN;
    signal ap_enable_state24_pp0_iter4_stage2 : BOOLEAN;
    signal ap_enable_operation_235 : BOOLEAN;
    signal ap_enable_operation_251 : BOOLEAN;
    signal ap_enable_operation_237 : BOOLEAN;
    signal ap_enable_operation_253 : BOOLEAN;
    signal ap_enable_operation_239 : BOOLEAN;
    signal ap_enable_operation_255 : BOOLEAN;
    signal ap_enable_operation_257 : BOOLEAN;
    signal ap_enable_state25_pp0_iter4_stage3 : BOOLEAN;
    signal ap_enable_operation_271 : BOOLEAN;
    signal ap_enable_state26_pp0_iter4_stage4 : BOOLEAN;
    signal ap_enable_operation_260 : BOOLEAN;
    signal ap_enable_operation_274 : BOOLEAN;
    signal ap_enable_operation_263 : BOOLEAN;
    signal ap_enable_operation_277 : BOOLEAN;
    signal ap_enable_operation_266 : BOOLEAN;
    signal ap_enable_operation_280 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_449 : BOOLEAN;
    signal ap_condition_932 : BOOLEAN;
    signal ap_condition_935 : BOOLEAN;
    signal ap_condition_472 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fft_stages_faddfsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stages_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stages_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stages_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stages_mul_9s_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component fft_stages_W_real_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_stages_W_imag_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    W_real_U : component fft_stages_W_real_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_real_address0,
        ce0 => W_real_ce0,
        q0 => W_real_q0);

    W_imag_U : component fft_stages_W_imag_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_imag_address0,
        ce0 => W_imag_ce0,
        q0 => W_imag_q0);

    faddfsub_32ns_32ns_32_5_full_dsp_1_U1 : component fft_stages_faddfsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_645_p0,
        din1 => grp_fu_645_p1,
        opcode => grp_fu_645_opcode,
        ce => grp_fu_645_ce,
        dout => grp_fu_645_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U2 : component fft_stages_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_649_p0,
        din1 => grp_fu_649_p1,
        ce => grp_fu_649_ce,
        dout => grp_fu_649_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U3 : component fft_stages_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_653_p0,
        din1 => grp_fu_653_p1,
        ce => grp_fu_653_ce,
        dout => grp_fu_653_p2);

    mux_42_32_1_1_U4 : component fft_stages_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_2_fu_782_p1,
        din1 => tmp_2_fu_782_p2,
        din2 => tmp_2_fu_782_p3,
        din3 => tmp_2_fu_782_p4,
        din4 => trunc_ln24_fu_762_p1,
        dout => tmp_2_fu_782_p6);

    mux_42_32_1_1_U5 : component fft_stages_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_3_fu_812_p1,
        din1 => tmp_3_fu_812_p2,
        din2 => tmp_3_fu_812_p3,
        din3 => tmp_3_fu_812_p4,
        din4 => trunc_ln24_fu_762_p1,
        dout => tmp_3_fu_812_p6);

    mul_9s_9s_9_1_1_U6 : component fft_stages_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => trunc_ln1540_reg_1139,
        din1 => ap_phi_reg_pp0_iter0_p_phi_reg_609,
        dout => ret_V_fu_888_p2);

    mux_42_32_1_1_U7 : component fft_stages_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_fu_909_p1,
        din1 => tmp_fu_909_p2,
        din2 => tmp_fu_909_p3,
        din3 => tmp_fu_909_p4,
        din4 => trunc_ln850_reg_1128,
        dout => tmp_fu_909_p6);

    mux_42_32_1_1_U8 : component fft_stages_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_1_fu_938_p1,
        din1 => tmp_1_fu_938_p2,
        din2 => tmp_1_fu_938_p3,
        din3 => tmp_1_fu_938_p4,
        din4 => trunc_ln850_reg_1128,
        dout => tmp_1_fu_938_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter0_numBF_phi_reg_633_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_935)) then 
                    ap_phi_reg_pp0_iter0_numBF_phi_reg_633 <= numBF_phi_reg_633;
                elsif ((ap_const_boolean_1 = ap_condition_932)) then 
                    ap_phi_reg_pp0_iter0_numBF_phi_reg_633 <= numBF_reg_1092;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_one_V_phi_reg_621_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_935)) then 
                    ap_phi_reg_pp0_iter0_one_V_phi_reg_621 <= one_V_phi_reg_621;
                elsif ((ap_const_boolean_1 = ap_condition_932)) then 
                    ap_phi_reg_pp0_iter0_one_V_phi_reg_621 <= one_V_reg_1097;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter0_p_phi_reg_609_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_935)) then 
                    ap_phi_reg_pp0_iter0_p_phi_reg_609 <= p_phi_reg_609;
                elsif ((ap_const_boolean_1 = ap_condition_932)) then 
                    ap_phi_reg_pp0_iter0_p_phi_reg_609 <= trunc_ln40_reg_1107;
                end if;
            end if; 
        end if;
    end process;

    do_init_reg_478_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln40_reg_1231 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                do_init_reg_478 <= ap_const_lv1_0;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln40_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                do_init_reg_478 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    i_31_reg_495_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln40_reg_1231 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_31_reg_495 <= i_2_reg_1211;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln40_reg_1231 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                i_31_reg_495 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    p_phi4_reg_585_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_472)) then
                if ((do_init_reg_478 = ap_const_lv1_1)) then 
                    p_phi4_reg_585 <= empty_reg_1035;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    p_phi4_reg_585 <= ap_phi_reg_pp0_iter0_p_phi4_reg_585;
                end if;
            end if; 
        end if;
    end process;

    sub4_phi_reg_597_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_472)) then
                if ((do_init_reg_478 = ap_const_lv1_1)) then 
                    sub4_phi_reg_597 <= sub4_reg_1102;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    sub4_phi_reg_597 <= ap_phi_reg_pp0_iter0_sub4_phi_reg_597;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (do_init_reg_478 = ap_const_lv1_0))) then
                ap_phi_reg_pp0_iter0_p_phi4_reg_585 <= p_phi4_reg_585;
                ap_phi_reg_pp0_iter0_sub4_phi_reg_597 <= sub4_phi_reg_597;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                bitcast_ln50_4_reg_1277 <= bitcast_ln50_4_fu_996_p1;
                c2_reg_1235 <= W_real_q0;
                s2_reg_1240 <= W_imag_q0;
                    zext_ln50_reg_1040(7 downto 0) <= zext_ln50_fu_711_p1(7 downto 0);
                    zext_ln50_reg_1040_pp0_iter1_reg(7 downto 0) <= zext_ln50_reg_1040(7 downto 0);
                    zext_ln50_reg_1040_pp0_iter2_reg(7 downto 0) <= zext_ln50_reg_1040_pp0_iter1_reg(7 downto 0);
                    zext_ln50_reg_1040_pp0_iter3_reg(7 downto 0) <= zext_ln50_reg_1040_pp0_iter2_reg(7 downto 0);
                    zext_ln50_reg_1040_pp0_iter4_reg(7 downto 0) <= zext_ln50_reg_1040_pp0_iter3_reg(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                bitcast_ln51_4_reg_1293 <= bitcast_ln51_4_fu_1004_p1;
                p_Result_1_reg_1134 <= p_Result_1_fu_856_p2;
                trunc_ln1540_reg_1139 <= trunc_ln1540_fu_862_p1;
                trunc_ln850_reg_1128 <= trunc_ln850_fu_836_p1;
                trunc_ln850_reg_1128_pp0_iter1_reg <= trunc_ln850_reg_1128;
                trunc_ln850_reg_1128_pp0_iter2_reg <= trunc_ln850_reg_1128_pp0_iter1_reg;
                trunc_ln850_reg_1128_pp0_iter3_reg <= trunc_ln850_reg_1128_pp0_iter2_reg;
                trunc_ln850_reg_1128_pp0_iter4_reg <= trunc_ln850_reg_1128_pp0_iter3_reg;
                    zext_ln47_reg_1144(7 downto 0) <= zext_ln47_fu_876_p1(7 downto 0);
                    zext_ln47_reg_1144_pp0_iter1_reg(7 downto 0) <= zext_ln47_reg_1144(7 downto 0);
                    zext_ln47_reg_1144_pp0_iter2_reg(7 downto 0) <= zext_ln47_reg_1144_pp0_iter1_reg(7 downto 0);
                    zext_ln47_reg_1144_pp0_iter3_reg(7 downto 0) <= zext_ln47_reg_1144_pp0_iter2_reg(7 downto 0);
                    zext_ln47_reg_1144_pp0_iter4_reg(7 downto 0) <= zext_ln47_reg_1144_pp0_iter3_reg(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                bitcast_ln52_reg_1285 <= bitcast_ln52_fu_1000_p1;
                tmp_2_reg_1116 <= tmp_2_fu_782_p6;
                tmp_2_reg_1116_pp0_iter1_reg <= tmp_2_reg_1116;
                tmp_2_reg_1116_pp0_iter2_reg <= tmp_2_reg_1116_pp0_iter1_reg;
                tmp_2_reg_1116_pp0_iter3_reg <= tmp_2_reg_1116_pp0_iter2_reg;
                tmp_3_reg_1122 <= tmp_3_fu_812_p6;
                tmp_3_reg_1122_pp0_iter1_reg <= tmp_3_reg_1122;
                tmp_3_reg_1122_pp0_iter2_reg <= tmp_3_reg_1122_pp0_iter1_reg;
                tmp_3_reg_1122_pp0_iter3_reg <= tmp_3_reg_1122_pp0_iter2_reg;
                trunc_ln24_reg_1112 <= trunc_ln24_fu_762_p1;
                trunc_ln24_reg_1112_pp0_iter1_reg <= trunc_ln24_reg_1112;
                trunc_ln24_reg_1112_pp0_iter2_reg <= trunc_ln24_reg_1112_pp0_iter1_reg;
                trunc_ln24_reg_1112_pp0_iter3_reg <= trunc_ln24_reg_1112_pp0_iter2_reg;
                trunc_ln24_reg_1112_pp0_iter4_reg <= trunc_ln24_reg_1112_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                bitcast_ln53_reg_1301 <= bitcast_ln53_fu_1008_p1;
                ret_V_reg_1196 <= ret_V_fu_888_p2;
                tmp_1_reg_1206 <= tmp_1_fu_938_p6;
                tmp_6_reg_1216 <= i_2_fu_970_p2(31 downto 10);
                tmp_reg_1201 <= tmp_fu_909_p6;
                tmp_reg_1201_pp0_iter1_reg <= tmp_reg_1201;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_phi_mux_do_init_phi_fu_483_p6 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                empty_reg_1035 <= empty_fu_697_p1;
                lshr_ln34_1_reg_1025 <= sub_ln34_fu_671_p2(31 downto 1);
                lshr_ln34_2_reg_1030 <= DFTpts_fu_657_p2(31 downto 1);
                stage_read_reg_1014 <= stage;
                tmp_4_reg_1020 <= DFTpts_fu_657_p2(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                i_2_reg_1211 <= i_2_fu_970_p2;
                numBF_phi_reg_633 <= ap_phi_reg_pp0_iter0_numBF_phi_reg_633;
                one_V_phi_reg_621 <= ap_phi_reg_pp0_iter0_one_V_phi_reg_621;
                p_phi_reg_609 <= ap_phi_reg_pp0_iter0_p_phi_reg_609;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                icmp_ln40_reg_1231 <= icmp_ln40_fu_991_p2;
                icmp_ln40_reg_1231_pp0_iter1_reg <= icmp_ln40_reg_1231;
                icmp_ln40_reg_1231_pp0_iter2_reg <= icmp_ln40_reg_1231_pp0_iter1_reg;
                icmp_ln40_reg_1231_pp0_iter3_reg <= icmp_ln40_reg_1231_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul1_reg_1250 <= grp_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul2_reg_1255 <= grp_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul3_reg_1260 <= grp_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul_reg_1245 <= grp_fu_653_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (do_init_reg_478 = ap_const_lv1_1))) then
                numBF_reg_1092 <= numBF_fu_735_p3;
                one_V_reg_1097 <= one_V_fu_742_p2;
                sub4_reg_1102 <= sub4_fu_753_p2;
                trunc_ln40_reg_1107 <= trunc_ln40_fu_758_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                temp_I_reg_1271 <= grp_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                temp_R_reg_1265 <= grp_fu_645_p2;
            end if;
        end if;
    end process;
    zext_ln50_reg_1040(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln50_reg_1040_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln50_reg_1040_pp0_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln50_reg_1040_pp0_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln50_reg_1040_pp0_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln47_reg_1144(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln47_reg_1144_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln47_reg_1144_pp0_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln47_reg_1144_pp0_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln47_reg_1144_pp0_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    DFTpts_fu_657_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv32_1),to_integer(unsigned('0' & stage(31-1 downto 0)))));

    OUT_I_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage4, zext_ln50_reg_1040_pp0_iter4_reg, zext_ln47_reg_1144_pp0_iter4_reg, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                OUT_I_0_address0 <= zext_ln50_reg_1040_pp0_iter4_reg(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                OUT_I_0_address0 <= zext_ln47_reg_1144_pp0_iter4_reg(8 - 1 downto 0);
            else 
                OUT_I_0_address0 <= "XXXXXXXX";
            end if;
        else 
            OUT_I_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_I_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            OUT_I_0_ce0 <= ap_const_logic_1;
        else 
            OUT_I_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_0_d0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, bitcast_ln51_4_reg_1293, bitcast_ln53_reg_1301, ap_enable_reg_pp0_iter4, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                OUT_I_0_d0 <= bitcast_ln53_reg_1301;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                OUT_I_0_d0 <= bitcast_ln51_4_reg_1293;
            else 
                OUT_I_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUT_I_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_I_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, trunc_ln24_reg_1112_pp0_iter4_reg, trunc_ln850_reg_1128_pp0_iter4_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln850_reg_1128_pp0_iter4_reg = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            OUT_I_0_we0 <= ap_const_logic_1;
        else 
            OUT_I_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage4, zext_ln50_reg_1040_pp0_iter4_reg, zext_ln47_reg_1144_pp0_iter4_reg, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                OUT_I_1_address0 <= zext_ln50_reg_1040_pp0_iter4_reg(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                OUT_I_1_address0 <= zext_ln47_reg_1144_pp0_iter4_reg(8 - 1 downto 0);
            else 
                OUT_I_1_address0 <= "XXXXXXXX";
            end if;
        else 
            OUT_I_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_I_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            OUT_I_1_ce0 <= ap_const_logic_1;
        else 
            OUT_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_1_d0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, bitcast_ln51_4_reg_1293, bitcast_ln53_reg_1301, ap_enable_reg_pp0_iter4, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                OUT_I_1_d0 <= bitcast_ln53_reg_1301;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                OUT_I_1_d0 <= bitcast_ln51_4_reg_1293;
            else 
                OUT_I_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUT_I_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_I_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, trunc_ln24_reg_1112_pp0_iter4_reg, trunc_ln850_reg_1128_pp0_iter4_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln850_reg_1128_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            OUT_I_1_we0 <= ap_const_logic_1;
        else 
            OUT_I_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage4, zext_ln50_reg_1040_pp0_iter4_reg, zext_ln47_reg_1144_pp0_iter4_reg, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                OUT_I_2_address0 <= zext_ln50_reg_1040_pp0_iter4_reg(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                OUT_I_2_address0 <= zext_ln47_reg_1144_pp0_iter4_reg(8 - 1 downto 0);
            else 
                OUT_I_2_address0 <= "XXXXXXXX";
            end if;
        else 
            OUT_I_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_I_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            OUT_I_2_ce0 <= ap_const_logic_1;
        else 
            OUT_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_2_d0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, bitcast_ln51_4_reg_1293, bitcast_ln53_reg_1301, ap_enable_reg_pp0_iter4, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                OUT_I_2_d0 <= bitcast_ln53_reg_1301;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                OUT_I_2_d0 <= bitcast_ln51_4_reg_1293;
            else 
                OUT_I_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUT_I_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_I_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, trunc_ln24_reg_1112_pp0_iter4_reg, trunc_ln850_reg_1128_pp0_iter4_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln850_reg_1128_pp0_iter4_reg = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            OUT_I_2_we0 <= ap_const_logic_1;
        else 
            OUT_I_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage4, zext_ln50_reg_1040_pp0_iter4_reg, zext_ln47_reg_1144_pp0_iter4_reg, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter4, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                OUT_I_3_address0 <= zext_ln50_reg_1040_pp0_iter4_reg(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                OUT_I_3_address0 <= zext_ln47_reg_1144_pp0_iter4_reg(8 - 1 downto 0);
            else 
                OUT_I_3_address0 <= "XXXXXXXX";
            end if;
        else 
            OUT_I_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_I_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            OUT_I_3_ce0 <= ap_const_logic_1;
        else 
            OUT_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_3_d0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, bitcast_ln51_4_reg_1293, bitcast_ln53_reg_1301, ap_enable_reg_pp0_iter4, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                OUT_I_3_d0 <= bitcast_ln53_reg_1301;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                OUT_I_3_d0 <= bitcast_ln51_4_reg_1293;
            else 
                OUT_I_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUT_I_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_I_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, trunc_ln24_reg_1112_pp0_iter4_reg, trunc_ln850_reg_1128_pp0_iter4_reg, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln850_reg_1128_pp0_iter4_reg = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            OUT_I_3_we0 <= ap_const_logic_1;
        else 
            OUT_I_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_0_address0_assign_proc : process(zext_ln50_reg_1040_pp0_iter4_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln47_reg_1144_pp0_iter3_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OUT_R_0_address0 <= zext_ln50_reg_1040_pp0_iter4_reg(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OUT_R_0_address0 <= zext_ln47_reg_1144_pp0_iter3_reg(8 - 1 downto 0);
            else 
                OUT_R_0_address0 <= "XXXXXXXX";
            end if;
        else 
            OUT_R_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_R_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OUT_R_0_ce0 <= ap_const_logic_1;
        else 
            OUT_R_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_0_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, bitcast_ln50_4_reg_1277, bitcast_ln52_reg_1285, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OUT_R_0_d0 <= bitcast_ln52_reg_1285;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OUT_R_0_d0 <= bitcast_ln50_4_reg_1277;
            else 
                OUT_R_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUT_R_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_R_0_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln24_reg_1112_pp0_iter4_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, trunc_ln850_reg_1128_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln850_reg_1128_pp0_iter3_reg = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OUT_R_0_we0 <= ap_const_logic_1;
        else 
            OUT_R_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_1_address0_assign_proc : process(zext_ln50_reg_1040_pp0_iter4_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln47_reg_1144_pp0_iter3_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OUT_R_1_address0 <= zext_ln50_reg_1040_pp0_iter4_reg(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OUT_R_1_address0 <= zext_ln47_reg_1144_pp0_iter3_reg(8 - 1 downto 0);
            else 
                OUT_R_1_address0 <= "XXXXXXXX";
            end if;
        else 
            OUT_R_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_R_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OUT_R_1_ce0 <= ap_const_logic_1;
        else 
            OUT_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_1_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, bitcast_ln50_4_reg_1277, bitcast_ln52_reg_1285, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OUT_R_1_d0 <= bitcast_ln52_reg_1285;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OUT_R_1_d0 <= bitcast_ln50_4_reg_1277;
            else 
                OUT_R_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUT_R_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_R_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln24_reg_1112_pp0_iter4_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, trunc_ln850_reg_1128_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln850_reg_1128_pp0_iter3_reg = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OUT_R_1_we0 <= ap_const_logic_1;
        else 
            OUT_R_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_2_address0_assign_proc : process(zext_ln50_reg_1040_pp0_iter4_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln47_reg_1144_pp0_iter3_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OUT_R_2_address0 <= zext_ln50_reg_1040_pp0_iter4_reg(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OUT_R_2_address0 <= zext_ln47_reg_1144_pp0_iter3_reg(8 - 1 downto 0);
            else 
                OUT_R_2_address0 <= "XXXXXXXX";
            end if;
        else 
            OUT_R_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_R_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OUT_R_2_ce0 <= ap_const_logic_1;
        else 
            OUT_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_2_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, bitcast_ln50_4_reg_1277, bitcast_ln52_reg_1285, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OUT_R_2_d0 <= bitcast_ln52_reg_1285;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OUT_R_2_d0 <= bitcast_ln50_4_reg_1277;
            else 
                OUT_R_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUT_R_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_R_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln24_reg_1112_pp0_iter4_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, trunc_ln850_reg_1128_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln850_reg_1128_pp0_iter3_reg = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OUT_R_2_we0 <= ap_const_logic_1;
        else 
            OUT_R_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_3_address0_assign_proc : process(zext_ln50_reg_1040_pp0_iter4_reg, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, zext_ln47_reg_1144_pp0_iter3_reg, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OUT_R_3_address0 <= zext_ln50_reg_1040_pp0_iter4_reg(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OUT_R_3_address0 <= zext_ln47_reg_1144_pp0_iter3_reg(8 - 1 downto 0);
            else 
                OUT_R_3_address0 <= "XXXXXXXX";
            end if;
        else 
            OUT_R_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    OUT_R_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OUT_R_3_ce0 <= ap_const_logic_1;
        else 
            OUT_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_3_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, bitcast_ln50_4_reg_1277, bitcast_ln52_reg_1285, ap_enable_reg_pp0_iter4, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter4 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                OUT_R_3_d0 <= bitcast_ln52_reg_1285;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                OUT_R_3_d0 <= bitcast_ln50_4_reg_1277;
            else 
                OUT_R_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            OUT_R_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUT_R_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln24_reg_1112_pp0_iter4_reg, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, trunc_ln850_reg_1128_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (trunc_ln850_reg_1128_pp0_iter3_reg = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            OUT_R_3_we0 <= ap_const_logic_1;
        else 
            OUT_R_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    W_imag_address0 <= zext_ln1540_fu_986_p1(9 - 1 downto 0);

    W_imag_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            W_imag_ce0 <= ap_const_logic_1;
        else 
            W_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_real_address0 <= zext_ln1540_fu_986_p1(9 - 1 downto 0);

    W_real_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            W_real_ce0 <= ap_const_logic_1;
        else 
            W_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_0_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, zext_ln50_fu_711_p1, ap_CS_fsm_pp0_stage2, zext_ln47_fu_876_p1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                X_I_0_address0 <= zext_ln47_fu_876_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                X_I_0_address0 <= zext_ln50_fu_711_p1(8 - 1 downto 0);
            else 
                X_I_0_address0 <= "XXXXXXXX";
            end if;
        else 
            X_I_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    X_I_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_I_0_ce0 <= ap_const_logic_1;
        else 
            X_I_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, zext_ln50_fu_711_p1, ap_CS_fsm_pp0_stage2, zext_ln47_fu_876_p1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                X_I_1_address0 <= zext_ln47_fu_876_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                X_I_1_address0 <= zext_ln50_fu_711_p1(8 - 1 downto 0);
            else 
                X_I_1_address0 <= "XXXXXXXX";
            end if;
        else 
            X_I_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    X_I_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_I_1_ce0 <= ap_const_logic_1;
        else 
            X_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_2_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, zext_ln50_fu_711_p1, ap_CS_fsm_pp0_stage2, zext_ln47_fu_876_p1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                X_I_2_address0 <= zext_ln47_fu_876_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                X_I_2_address0 <= zext_ln50_fu_711_p1(8 - 1 downto 0);
            else 
                X_I_2_address0 <= "XXXXXXXX";
            end if;
        else 
            X_I_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    X_I_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_I_2_ce0 <= ap_const_logic_1;
        else 
            X_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_3_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, zext_ln50_fu_711_p1, ap_CS_fsm_pp0_stage2, zext_ln47_fu_876_p1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                X_I_3_address0 <= zext_ln47_fu_876_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                X_I_3_address0 <= zext_ln50_fu_711_p1(8 - 1 downto 0);
            else 
                X_I_3_address0 <= "XXXXXXXX";
            end if;
        else 
            X_I_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    X_I_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_I_3_ce0 <= ap_const_logic_1;
        else 
            X_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_0_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, zext_ln50_fu_711_p1, ap_CS_fsm_pp0_stage2, zext_ln47_fu_876_p1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                X_R_0_address0 <= zext_ln47_fu_876_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                X_R_0_address0 <= zext_ln50_fu_711_p1(8 - 1 downto 0);
            else 
                X_R_0_address0 <= "XXXXXXXX";
            end if;
        else 
            X_R_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    X_R_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_R_0_ce0 <= ap_const_logic_1;
        else 
            X_R_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_1_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, zext_ln50_fu_711_p1, ap_CS_fsm_pp0_stage2, zext_ln47_fu_876_p1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                X_R_1_address0 <= zext_ln47_fu_876_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                X_R_1_address0 <= zext_ln50_fu_711_p1(8 - 1 downto 0);
            else 
                X_R_1_address0 <= "XXXXXXXX";
            end if;
        else 
            X_R_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    X_R_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_R_1_ce0 <= ap_const_logic_1;
        else 
            X_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_2_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, zext_ln50_fu_711_p1, ap_CS_fsm_pp0_stage2, zext_ln47_fu_876_p1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                X_R_2_address0 <= zext_ln47_fu_876_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                X_R_2_address0 <= zext_ln50_fu_711_p1(8 - 1 downto 0);
            else 
                X_R_2_address0 <= "XXXXXXXX";
            end if;
        else 
            X_R_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    X_R_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_R_2_ce0 <= ap_const_logic_1;
        else 
            X_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_3_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, zext_ln50_fu_711_p1, ap_CS_fsm_pp0_stage2, zext_ln47_fu_876_p1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                X_R_3_address0 <= zext_ln47_fu_876_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                X_R_3_address0 <= zext_ln50_fu_711_p1(8 - 1 downto 0);
            else 
                X_R_3_address0 <= "XXXXXXXX";
            end if;
        else 
            X_R_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    X_R_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            X_R_3_ce0 <= ap_const_logic_1;
        else 
            X_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln55_fu_956_p2 <= std_logic_vector(unsigned(i_31_reg_495) + unsigned(ap_phi_reg_pp0_iter0_numBF_phi_reg_633));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
                ap_block_pp0 <= (((ap_ST_fsm_pp0_stage3 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage3_subdone)) or ((ap_ST_fsm_pp0_stage4 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage4_subdone)) or ((ap_ST_fsm_pp0_stage2 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage2_subdone)) or ((ap_ST_fsm_pp0_stage1 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage1_subdone)) or ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone)));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_449_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_449 <= ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_472_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
                ap_condition_472 <= ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_condition_932_assign_proc : process(do_init_reg_478, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001)
    begin
                ap_condition_932 <= ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (do_init_reg_478 = ap_const_lv1_1));
    end process;


    ap_condition_935_assign_proc : process(do_init_reg_478, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
                ap_condition_935 <= ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (do_init_reg_478 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, icmp_ln40_reg_1231_pp0_iter3_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln40_reg_1231_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_enable_operation_233_assign_proc : process(trunc_ln850_reg_1128_pp0_iter3_reg)
    begin
                ap_enable_operation_233 <= (trunc_ln850_reg_1128_pp0_iter3_reg = ap_const_lv2_2);
    end process;


    ap_enable_operation_235_assign_proc : process(trunc_ln850_reg_1128_pp0_iter3_reg)
    begin
                ap_enable_operation_235 <= (trunc_ln850_reg_1128_pp0_iter3_reg = ap_const_lv2_1);
    end process;


    ap_enable_operation_237_assign_proc : process(trunc_ln850_reg_1128_pp0_iter3_reg)
    begin
                ap_enable_operation_237 <= (trunc_ln850_reg_1128_pp0_iter3_reg = ap_const_lv2_0);
    end process;


    ap_enable_operation_239_assign_proc : process(trunc_ln850_reg_1128_pp0_iter3_reg)
    begin
                ap_enable_operation_239 <= (trunc_ln850_reg_1128_pp0_iter3_reg = ap_const_lv2_3);
    end process;


    ap_enable_operation_249_assign_proc : process(trunc_ln24_reg_1112_pp0_iter4_reg)
    begin
                ap_enable_operation_249 <= (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_2);
    end process;


    ap_enable_operation_251_assign_proc : process(trunc_ln24_reg_1112_pp0_iter4_reg)
    begin
                ap_enable_operation_251 <= (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_1);
    end process;


    ap_enable_operation_253_assign_proc : process(trunc_ln24_reg_1112_pp0_iter4_reg)
    begin
                ap_enable_operation_253 <= (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_0);
    end process;


    ap_enable_operation_255_assign_proc : process(trunc_ln24_reg_1112_pp0_iter4_reg)
    begin
                ap_enable_operation_255 <= (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_3);
    end process;


    ap_enable_operation_257_assign_proc : process(trunc_ln850_reg_1128_pp0_iter4_reg)
    begin
                ap_enable_operation_257 <= (trunc_ln850_reg_1128_pp0_iter4_reg = ap_const_lv2_2);
    end process;


    ap_enable_operation_260_assign_proc : process(trunc_ln850_reg_1128_pp0_iter4_reg)
    begin
                ap_enable_operation_260 <= (trunc_ln850_reg_1128_pp0_iter4_reg = ap_const_lv2_1);
    end process;


    ap_enable_operation_263_assign_proc : process(trunc_ln850_reg_1128_pp0_iter4_reg)
    begin
                ap_enable_operation_263 <= (trunc_ln850_reg_1128_pp0_iter4_reg = ap_const_lv2_0);
    end process;


    ap_enable_operation_266_assign_proc : process(trunc_ln850_reg_1128_pp0_iter4_reg)
    begin
                ap_enable_operation_266 <= (trunc_ln850_reg_1128_pp0_iter4_reg = ap_const_lv2_3);
    end process;


    ap_enable_operation_271_assign_proc : process(trunc_ln24_reg_1112_pp0_iter4_reg)
    begin
                ap_enable_operation_271 <= (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_2);
    end process;


    ap_enable_operation_274_assign_proc : process(trunc_ln24_reg_1112_pp0_iter4_reg)
    begin
                ap_enable_operation_274 <= (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_1);
    end process;


    ap_enable_operation_277_assign_proc : process(trunc_ln24_reg_1112_pp0_iter4_reg)
    begin
                ap_enable_operation_277 <= (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_0);
    end process;


    ap_enable_operation_280_assign_proc : process(trunc_ln24_reg_1112_pp0_iter4_reg)
    begin
                ap_enable_operation_280 <= (trunc_ln24_reg_1112_pp0_iter4_reg = ap_const_lv2_3);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_enable_state23_pp0_iter4_stage1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state23_pp0_iter4_stage1 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1));
    end process;


    ap_enable_state24_pp0_iter4_stage2_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state24_pp0_iter4_stage2 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2));
    end process;


    ap_enable_state25_pp0_iter4_stage3_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state25_pp0_iter4_stage3 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3));
    end process;


    ap_enable_state26_pp0_iter4_stage4_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter4)
    begin
                ap_enable_state26_pp0_iter4_stage4 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4));
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_do_init_phi_fu_483_p6_assign_proc : process(do_init_reg_478, icmp_ln40_reg_1231, ap_condition_449)
    begin
        if ((ap_const_boolean_1 = ap_condition_449)) then
            if ((icmp_ln40_reg_1231 = ap_const_lv1_0)) then 
                ap_phi_mux_do_init_phi_fu_483_p6 <= ap_const_lv1_1;
            elsif ((icmp_ln40_reg_1231 = ap_const_lv1_1)) then 
                ap_phi_mux_do_init_phi_fu_483_p6 <= ap_const_lv1_0;
            else 
                ap_phi_mux_do_init_phi_fu_483_p6 <= do_init_reg_478;
            end if;
        else 
            ap_phi_mux_do_init_phi_fu_483_p6 <= do_init_reg_478;
        end if; 
    end process;


    ap_phi_mux_i_31_phi_fu_499_p6_assign_proc : process(i_31_reg_495, i_2_reg_1211, icmp_ln40_reg_1231, ap_condition_449)
    begin
        if ((ap_const_boolean_1 = ap_condition_449)) then
            if ((icmp_ln40_reg_1231 = ap_const_lv1_0)) then 
                ap_phi_mux_i_31_phi_fu_499_p6 <= ap_const_lv32_0;
            elsif ((icmp_ln40_reg_1231 = ap_const_lv1_1)) then 
                ap_phi_mux_i_31_phi_fu_499_p6 <= i_2_reg_1211;
            else 
                ap_phi_mux_i_31_phi_fu_499_p6 <= i_31_reg_495;
            end if;
        else 
            ap_phi_mux_i_31_phi_fu_499_p6 <= i_31_reg_495;
        end if; 
    end process;


    ap_phi_mux_p_phi4_phi_fu_589_p4_assign_proc : process(do_init_reg_478, empty_reg_1035, ap_phi_reg_pp0_iter0_p_phi4_reg_585)
    begin
        if ((do_init_reg_478 = ap_const_lv1_1)) then 
            ap_phi_mux_p_phi4_phi_fu_589_p4 <= empty_reg_1035;
        else 
            ap_phi_mux_p_phi4_phi_fu_589_p4 <= ap_phi_reg_pp0_iter0_p_phi4_reg_585;
        end if; 
    end process;


    ap_phi_mux_sub4_phi_phi_fu_601_p4_assign_proc : process(do_init_reg_478, sub4_reg_1102, ap_phi_reg_pp0_iter0_sub4_phi_reg_597)
    begin
        if ((do_init_reg_478 = ap_const_lv1_1)) then 
            ap_phi_mux_sub4_phi_phi_fu_601_p4 <= sub4_reg_1102;
        else 
            ap_phi_mux_sub4_phi_phi_fu_601_p4 <= ap_phi_reg_pp0_iter0_sub4_phi_reg_597;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln40_fu_991_p2, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln40_fu_991_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_idle_pp0_0to3 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln50_4_fu_996_p1 <= grp_fu_649_p2;
    bitcast_ln51_4_fu_1004_p1 <= grp_fu_649_p2;
    bitcast_ln52_fu_1000_p1 <= grp_fu_645_p2;
    bitcast_ln53_fu_1008_p1 <= grp_fu_645_p2;
    empty_fu_697_p1 <= stage(6 - 1 downto 0);

    grp_fu_645_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_645_ce <= ap_const_logic_1;
        else 
            grp_fu_645_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_645_opcode_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage3_00001, ap_block_pp0_stage2_00001, ap_block_pp0_stage4_00001, ap_block_pp0_stage1_00001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_645_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4_00001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_00001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_00001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_645_opcode <= ap_const_lv2_0;
        else 
            grp_fu_645_opcode <= "XX";
        end if; 
    end process;


    grp_fu_645_p0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, tmp_2_reg_1116_pp0_iter3_reg, tmp_3_reg_1122_pp0_iter3_reg, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, mul_reg_1245, ap_enable_reg_pp0_iter2, mul2_reg_1255, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_645_p0 <= tmp_3_reg_1122_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_645_p0 <= tmp_2_reg_1116_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_645_p0 <= mul2_reg_1255;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_645_p0 <= mul_reg_1245;
        else 
            grp_fu_645_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_645_p1_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, mul1_reg_1250, ap_enable_reg_pp0_iter2, mul3_reg_1260, temp_R_reg_1265, ap_enable_reg_pp0_iter3, temp_I_reg_1271, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_645_p1 <= temp_I_reg_1271;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_645_p1 <= temp_R_reg_1265;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_645_p1 <= mul3_reg_1260;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_645_p1 <= mul1_reg_1250;
        else 
            grp_fu_645_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_649_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_649_ce <= ap_const_logic_1;
        else 
            grp_fu_649_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_649_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, tmp_2_reg_1116_pp0_iter2_reg, tmp_3_reg_1122_pp0_iter3_reg, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, ap_block_pp0_stage1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_649_p0 <= tmp_3_reg_1122_pp0_iter3_reg;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_649_p0 <= tmp_2_reg_1116_pp0_iter2_reg;
            else 
                grp_fu_649_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_649_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_649_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, temp_R_reg_1265, ap_enable_reg_pp0_iter3, temp_I_reg_1271, ap_block_pp0_stage1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_649_p1 <= temp_I_reg_1271;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_649_p1 <= temp_R_reg_1265;
            else 
                grp_fu_649_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_649_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_653_ce_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_653_ce <= ap_const_logic_1;
        else 
            grp_fu_653_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_653_p0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, tmp_reg_1201, tmp_reg_1201_pp0_iter1_reg, tmp_1_reg_1206, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_653_p0 <= tmp_reg_1201_pp0_iter1_reg;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_653_p0 <= tmp_1_reg_1206;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_653_p0 <= tmp_reg_1201;
        else 
            grp_fu_653_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_653_p1_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, c2_reg_1235, s2_reg_1240, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_653_p1 <= s2_reg_1240;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_653_p1 <= c2_reg_1235;
        else 
            grp_fu_653_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_2_fu_970_p2 <= std_logic_vector(unsigned(i_fu_962_p3) + unsigned(ap_const_lv32_1));
    i_fu_962_p3 <= 
        add_ln55_fu_956_p2 when (icmp_ln1065_fu_951_p2(0) = '1') else 
        i_31_reg_495;
    icmp_ln1065_fu_951_p2 <= "1" when (p_Result_1_reg_1134 = ap_phi_reg_pp0_iter0_one_V_phi_reg_621) else "0";
    icmp_ln40_fu_991_p2 <= "1" when (signed(tmp_6_reg_1216) < signed(ap_const_lv22_1)) else "0";
    lshr_ln1_fu_701_p4 <= ap_phi_mux_i_31_phi_fu_499_p6(9 downto 2);
    lshr_ln674_fu_850_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln674_fu_846_p1(31-1 downto 0)))));
    lshr_ln_fu_866_p4 <= p_Result_s_fu_826_p4(9 downto 2);
    numBF_fu_735_p3 <= 
        sub_ln34_1_fu_726_p2 when (tmp_4_reg_1020(0) = '1') else 
        zext_ln34_1_fu_732_p1;
    one_V_fu_742_p2 <= std_logic_vector(unsigned(numBF_fu_735_p3) + unsigned(ap_const_lv32_FFFFFFFF));
    p_Result_1_fu_856_p2 <= (lshr_ln674_fu_850_p2 and i_31_reg_495);
    
    p_Result_s_fu_826_p4_proc : process(i_31_reg_495, ap_phi_mux_sub4_phi_phi_fu_601_p4)
    begin
        p_Result_s_fu_826_p4 <= i_31_reg_495;
        if to_integer(unsigned(ap_phi_mux_sub4_phi_phi_fu_601_p4)) >= i_31_reg_495'low and to_integer(unsigned(ap_phi_mux_sub4_phi_phi_fu_601_p4)) <= i_31_reg_495'high then
            p_Result_s_fu_826_p4(to_integer(unsigned(ap_phi_mux_sub4_phi_phi_fu_601_p4))) <= ap_const_lv1_1(0);
        end if;
    end process;

    rhs_fu_748_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_400),to_integer(unsigned('0' & stage_read_reg_1014(31-1 downto 0)))));
    sub4_fu_753_p2 <= std_logic_vector(unsigned(stage_read_reg_1014) + unsigned(ap_const_lv32_FFFFFFFF));
    sub_ln34_1_fu_726_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(zext_ln34_fu_723_p1));
    sub_ln34_fu_671_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(DFTpts_fu_657_p2));
    sub_ln674_fu_840_p2 <= std_logic_vector(signed(ap_const_lv6_21) - signed(ap_phi_mux_p_phi4_phi_fu_589_p4));
    tmp_1_fu_938_p1 <= X_I_0_q0;
    tmp_1_fu_938_p2 <= X_I_1_q0;
    tmp_1_fu_938_p3 <= X_I_2_q0;
    tmp_1_fu_938_p4 <= X_I_3_q0;
    tmp_2_fu_782_p1 <= X_R_0_q0;
    tmp_2_fu_782_p2 <= X_R_1_q0;
    tmp_2_fu_782_p3 <= X_R_2_q0;
    tmp_2_fu_782_p4 <= X_R_3_q0;
    tmp_3_fu_812_p1 <= X_I_0_q0;
    tmp_3_fu_812_p2 <= X_I_1_q0;
    tmp_3_fu_812_p3 <= X_I_2_q0;
    tmp_3_fu_812_p4 <= X_I_3_q0;
    tmp_fu_909_p1 <= X_R_0_q0;
    tmp_fu_909_p2 <= X_R_1_q0;
    tmp_fu_909_p3 <= X_R_2_q0;
    tmp_fu_909_p4 <= X_R_3_q0;
    trunc_ln1540_fu_862_p1 <= p_Result_1_fu_856_p2(9 - 1 downto 0);
    trunc_ln24_fu_762_p1 <= i_31_reg_495(2 - 1 downto 0);
    trunc_ln40_fu_758_p1 <= rhs_fu_748_p2(9 - 1 downto 0);
    trunc_ln850_fu_836_p1 <= p_Result_s_fu_826_p4(2 - 1 downto 0);
    zext_ln1540_fu_986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_1196),64));
    zext_ln34_1_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln34_2_reg_1030),32));
    zext_ln34_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln34_1_reg_1025),32));
    zext_ln47_fu_876_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_866_p4),64));
    zext_ln50_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_701_p4),64));
    zext_ln674_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln674_fu_840_p2),32));
end behav;
