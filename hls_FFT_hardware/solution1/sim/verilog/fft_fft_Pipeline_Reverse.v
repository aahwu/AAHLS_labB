// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft_fft_Pipeline_Reverse (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_R_0_address0,
        X_R_0_ce0,
        X_R_0_q0,
        X_R_0_address1,
        X_R_0_ce1,
        X_R_0_q1,
        X_R_1_address0,
        X_R_1_ce0,
        X_R_1_q0,
        X_R_1_address1,
        X_R_1_ce1,
        X_R_1_q1,
        X_R_2_address0,
        X_R_2_ce0,
        X_R_2_q0,
        X_R_2_address1,
        X_R_2_ce1,
        X_R_2_q1,
        X_R_3_address0,
        X_R_3_ce0,
        X_R_3_q0,
        X_R_3_address1,
        X_R_3_ce1,
        X_R_3_q1,
        Stage0_R_1_address0,
        Stage0_R_1_ce0,
        Stage0_R_1_we0,
        Stage0_R_1_d0,
        Stage0_R_3_address0,
        Stage0_R_3_ce0,
        Stage0_R_3_we0,
        Stage0_R_3_d0,
        Stage0_I_1_address0,
        Stage0_I_1_ce0,
        Stage0_I_1_we0,
        Stage0_I_1_d0,
        X_I_0_address0,
        X_I_0_ce0,
        X_I_0_q0,
        X_I_0_address1,
        X_I_0_ce1,
        X_I_0_q1,
        X_I_1_address0,
        X_I_1_ce0,
        X_I_1_q0,
        X_I_1_address1,
        X_I_1_ce1,
        X_I_1_q1,
        X_I_2_address0,
        X_I_2_ce0,
        X_I_2_q0,
        X_I_2_address1,
        X_I_2_ce1,
        X_I_2_q1,
        X_I_3_address0,
        X_I_3_ce0,
        X_I_3_q0,
        X_I_3_address1,
        X_I_3_ce1,
        X_I_3_q1,
        Stage0_R_address0,
        Stage0_R_ce0,
        Stage0_R_we0,
        Stage0_R_d0,
        Stage0_R_2_address0,
        Stage0_R_2_ce0,
        Stage0_R_2_we0,
        Stage0_R_2_d0,
        Stage0_I_address0,
        Stage0_I_ce0,
        Stage0_I_we0,
        Stage0_I_d0,
        Stage0_I_2_address0,
        Stage0_I_2_ce0,
        Stage0_I_2_we0,
        Stage0_I_2_d0,
        Stage0_I_3_address0,
        Stage0_I_3_ce0,
        Stage0_I_3_we0,
        Stage0_I_3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] X_R_0_address0;
output   X_R_0_ce0;
input  [31:0] X_R_0_q0;
output  [7:0] X_R_0_address1;
output   X_R_0_ce1;
input  [31:0] X_R_0_q1;
output  [7:0] X_R_1_address0;
output   X_R_1_ce0;
input  [31:0] X_R_1_q0;
output  [7:0] X_R_1_address1;
output   X_R_1_ce1;
input  [31:0] X_R_1_q1;
output  [7:0] X_R_2_address0;
output   X_R_2_ce0;
input  [31:0] X_R_2_q0;
output  [7:0] X_R_2_address1;
output   X_R_2_ce1;
input  [31:0] X_R_2_q1;
output  [7:0] X_R_3_address0;
output   X_R_3_ce0;
input  [31:0] X_R_3_q0;
output  [7:0] X_R_3_address1;
output   X_R_3_ce1;
input  [31:0] X_R_3_q1;
output  [7:0] Stage0_R_1_address0;
output   Stage0_R_1_ce0;
output   Stage0_R_1_we0;
output  [31:0] Stage0_R_1_d0;
output  [7:0] Stage0_R_3_address0;
output   Stage0_R_3_ce0;
output   Stage0_R_3_we0;
output  [31:0] Stage0_R_3_d0;
output  [7:0] Stage0_I_1_address0;
output   Stage0_I_1_ce0;
output   Stage0_I_1_we0;
output  [31:0] Stage0_I_1_d0;
output  [7:0] X_I_0_address0;
output   X_I_0_ce0;
input  [31:0] X_I_0_q0;
output  [7:0] X_I_0_address1;
output   X_I_0_ce1;
input  [31:0] X_I_0_q1;
output  [7:0] X_I_1_address0;
output   X_I_1_ce0;
input  [31:0] X_I_1_q0;
output  [7:0] X_I_1_address1;
output   X_I_1_ce1;
input  [31:0] X_I_1_q1;
output  [7:0] X_I_2_address0;
output   X_I_2_ce0;
input  [31:0] X_I_2_q0;
output  [7:0] X_I_2_address1;
output   X_I_2_ce1;
input  [31:0] X_I_2_q1;
output  [7:0] X_I_3_address0;
output   X_I_3_ce0;
input  [31:0] X_I_3_q0;
output  [7:0] X_I_3_address1;
output   X_I_3_ce1;
input  [31:0] X_I_3_q1;
output  [7:0] Stage0_R_address0;
output   Stage0_R_ce0;
output   Stage0_R_we0;
output  [31:0] Stage0_R_d0;
output  [7:0] Stage0_R_2_address0;
output   Stage0_R_2_ce0;
output   Stage0_R_2_we0;
output  [31:0] Stage0_R_2_d0;
output  [7:0] Stage0_I_address0;
output   Stage0_I_ce0;
output   Stage0_I_we0;
output  [31:0] Stage0_I_d0;
output  [7:0] Stage0_I_2_address0;
output   Stage0_I_2_ce0;
output   Stage0_I_2_we0;
output  [31:0] Stage0_I_2_d0;
output  [7:0] Stage0_I_3_address0;
output   Stage0_I_3_ce0;
output   Stage0_I_3_we0;
output  [31:0] Stage0_I_3_d0;

reg ap_idle;
reg X_R_0_ce0;
reg X_R_0_ce1;
reg X_R_1_ce0;
reg X_R_1_ce1;
reg X_R_2_ce0;
reg X_R_2_ce1;
reg X_R_3_ce0;
reg X_R_3_ce1;
reg Stage0_R_1_ce0;
reg Stage0_R_1_we0;
reg Stage0_R_3_ce0;
reg Stage0_R_3_we0;
reg Stage0_I_1_ce0;
reg Stage0_I_1_we0;
reg X_I_0_ce0;
reg X_I_0_ce1;
reg X_I_1_ce0;
reg X_I_1_ce1;
reg X_I_2_ce0;
reg X_I_2_ce1;
reg X_I_3_ce0;
reg X_I_3_ce1;
reg Stage0_R_ce0;
reg Stage0_R_we0;
reg Stage0_R_2_ce0;
reg Stage0_R_2_we0;
reg Stage0_I_ce0;
reg Stage0_I_we0;
reg Stage0_I_2_ce0;
reg Stage0_I_2_we0;
reg Stage0_I_3_ce0;
reg Stage0_I_3_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] tmp_6_fu_404_p3;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] or_ln_fu_412_p4;
reg   [1:0] or_ln_reg_633;
reg   [7:0] lshr_ln_reg_661;
reg   [7:0] lshr_ln_reg_661_pp0_iter1_reg;
wire   [0:0] icmp_ln111_fu_458_p2;
reg   [0:0] icmp_ln111_reg_666;
reg   [0:0] icmp_ln111_reg_666_pp0_iter1_reg;
wire   [31:0] tmp_fu_511_p6;
reg   [31:0] tmp_reg_730;
wire   [31:0] tmp_4_fu_540_p6;
reg   [31:0] tmp_4_reg_736;
wire   [31:0] tmp_s_fu_569_p6;
reg   [31:0] tmp_s_reg_742;
wire   [31:0] tmp_1_fu_598_p6;
reg   [31:0] tmp_1_reg_748;
wire   [63:0] zext_ln111_fu_432_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln111_2_fu_472_p1;
wire   [63:0] zext_ln111_1_fu_611_p1;
reg   [10:0] temp_fu_88;
wire   [10:0] add_ln107_fu_484_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_temp_2;
reg   [6:0] or_ln111_1_fu_422_p4;
wire   [1:0] trunc_ln111_fu_454_p1;
wire   [7:0] zext_ln111_1_cast_fu_464_p3;
wire   [31:0] tmp_fu_511_p1;
wire   [31:0] tmp_fu_511_p2;
wire   [31:0] tmp_fu_511_p3;
wire   [31:0] tmp_fu_511_p4;
wire   [31:0] tmp_4_fu_540_p1;
wire   [31:0] tmp_4_fu_540_p2;
wire   [31:0] tmp_4_fu_540_p3;
wire   [31:0] tmp_4_fu_540_p4;
wire   [31:0] tmp_s_fu_569_p1;
wire   [31:0] tmp_s_fu_569_p2;
wire   [31:0] tmp_s_fu_569_p3;
wire   [31:0] tmp_s_fu_569_p4;
wire   [31:0] tmp_1_fu_598_p1;
wire   [31:0] tmp_1_fu_598_p2;
wire   [31:0] tmp_1_fu_598_p3;
wire   [31:0] tmp_1_fu_598_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U1(
    .din0(tmp_fu_511_p1),
    .din1(tmp_fu_511_p2),
    .din2(tmp_fu_511_p3),
    .din3(tmp_fu_511_p4),
    .din4(or_ln_reg_633),
    .dout(tmp_fu_511_p6)
);

fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U2(
    .din0(tmp_4_fu_540_p1),
    .din1(tmp_4_fu_540_p2),
    .din2(tmp_4_fu_540_p3),
    .din3(tmp_4_fu_540_p4),
    .din4(or_ln_reg_633),
    .dout(tmp_4_fu_540_p6)
);

fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U3(
    .din0(tmp_s_fu_569_p1),
    .din1(tmp_s_fu_569_p2),
    .din2(tmp_s_fu_569_p3),
    .din3(tmp_s_fu_569_p4),
    .din4(or_ln_reg_633),
    .dout(tmp_s_fu_569_p6)
);

fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U4(
    .din0(tmp_1_fu_598_p1),
    .din1(tmp_1_fu_598_p2),
    .din2(tmp_1_fu_598_p3),
    .din3(tmp_1_fu_598_p4),
    .din4(or_ln_reg_633),
    .dout(tmp_1_fu_598_p6)
);

fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((tmp_6_fu_404_p3 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            temp_fu_88 <= add_ln107_fu_484_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            temp_fu_88 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln111_reg_666_pp0_iter1_reg <= icmp_ln111_reg_666;
        lshr_ln_reg_661_pp0_iter1_reg <= lshr_ln_reg_661;
        tmp_1_reg_748 <= tmp_1_fu_598_p6;
        tmp_4_reg_736 <= tmp_4_fu_540_p6;
        tmp_reg_730 <= tmp_fu_511_p6;
        tmp_s_reg_742 <= tmp_s_fu_569_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_404_p3 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln111_reg_666 <= icmp_ln111_fu_458_p2;
        lshr_ln_reg_661 <= {{ap_sig_allocacmp_temp_2[9:2]}};
        or_ln_reg_633 <= or_ln_fu_412_p4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Stage0_I_1_ce0 = 1'b1;
    end else begin
        Stage0_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln111_reg_666_pp0_iter1_reg == 1'd1))) begin
        Stage0_I_1_we0 = 1'b1;
    end else begin
        Stage0_I_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Stage0_I_2_ce0 = 1'b1;
    end else begin
        Stage0_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln111_reg_666_pp0_iter1_reg == 1'd0))) begin
        Stage0_I_2_we0 = 1'b1;
    end else begin
        Stage0_I_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Stage0_I_3_ce0 = 1'b1;
    end else begin
        Stage0_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln111_reg_666_pp0_iter1_reg == 1'd0))) begin
        Stage0_I_3_we0 = 1'b1;
    end else begin
        Stage0_I_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Stage0_I_ce0 = 1'b1;
    end else begin
        Stage0_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln111_reg_666_pp0_iter1_reg == 1'd1))) begin
        Stage0_I_we0 = 1'b1;
    end else begin
        Stage0_I_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Stage0_R_1_ce0 = 1'b1;
    end else begin
        Stage0_R_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln111_reg_666_pp0_iter1_reg == 1'd1))) begin
        Stage0_R_1_we0 = 1'b1;
    end else begin
        Stage0_R_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Stage0_R_2_ce0 = 1'b1;
    end else begin
        Stage0_R_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln111_reg_666_pp0_iter1_reg == 1'd0))) begin
        Stage0_R_2_we0 = 1'b1;
    end else begin
        Stage0_R_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Stage0_R_3_ce0 = 1'b1;
    end else begin
        Stage0_R_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln111_reg_666_pp0_iter1_reg == 1'd0))) begin
        Stage0_R_3_we0 = 1'b1;
    end else begin
        Stage0_R_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        Stage0_R_ce0 = 1'b1;
    end else begin
        Stage0_R_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln111_reg_666_pp0_iter1_reg == 1'd1))) begin
        Stage0_R_we0 = 1'b1;
    end else begin
        Stage0_R_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_0_ce0 = 1'b1;
    end else begin
        X_I_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_0_ce1 = 1'b1;
    end else begin
        X_I_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_1_ce0 = 1'b1;
    end else begin
        X_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_1_ce1 = 1'b1;
    end else begin
        X_I_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_2_ce0 = 1'b1;
    end else begin
        X_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_2_ce1 = 1'b1;
    end else begin
        X_I_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_3_ce0 = 1'b1;
    end else begin
        X_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_3_ce1 = 1'b1;
    end else begin
        X_I_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_0_ce0 = 1'b1;
    end else begin
        X_R_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_0_ce1 = 1'b1;
    end else begin
        X_R_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_1_ce0 = 1'b1;
    end else begin
        X_R_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_1_ce1 = 1'b1;
    end else begin
        X_R_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_2_ce0 = 1'b1;
    end else begin
        X_R_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_2_ce1 = 1'b1;
    end else begin
        X_R_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_3_ce0 = 1'b1;
    end else begin
        X_R_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_3_ce1 = 1'b1;
    end else begin
        X_R_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_6_fu_404_p3 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_temp_2 = 11'd0;
    end else begin
        ap_sig_allocacmp_temp_2 = temp_fu_88;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Stage0_I_1_address0 = zext_ln111_1_fu_611_p1;

assign Stage0_I_1_d0 = tmp_1_reg_748;

assign Stage0_I_2_address0 = zext_ln111_1_fu_611_p1;

assign Stage0_I_2_d0 = tmp_4_reg_736;

assign Stage0_I_3_address0 = zext_ln111_1_fu_611_p1;

assign Stage0_I_3_d0 = tmp_1_reg_748;

assign Stage0_I_address0 = zext_ln111_1_fu_611_p1;

assign Stage0_I_d0 = tmp_4_reg_736;

assign Stage0_R_1_address0 = zext_ln111_1_fu_611_p1;

assign Stage0_R_1_d0 = tmp_s_reg_742;

assign Stage0_R_2_address0 = zext_ln111_1_fu_611_p1;

assign Stage0_R_2_d0 = tmp_reg_730;

assign Stage0_R_3_address0 = zext_ln111_1_fu_611_p1;

assign Stage0_R_3_d0 = tmp_s_reg_742;

assign Stage0_R_address0 = zext_ln111_1_fu_611_p1;

assign Stage0_R_d0 = tmp_reg_730;

assign X_I_0_address0 = zext_ln111_2_fu_472_p1;

assign X_I_0_address1 = zext_ln111_fu_432_p1;

assign X_I_1_address0 = zext_ln111_2_fu_472_p1;

assign X_I_1_address1 = zext_ln111_fu_432_p1;

assign X_I_2_address0 = zext_ln111_2_fu_472_p1;

assign X_I_2_address1 = zext_ln111_fu_432_p1;

assign X_I_3_address0 = zext_ln111_2_fu_472_p1;

assign X_I_3_address1 = zext_ln111_fu_432_p1;

assign X_R_0_address0 = zext_ln111_2_fu_472_p1;

assign X_R_0_address1 = zext_ln111_fu_432_p1;

assign X_R_1_address0 = zext_ln111_2_fu_472_p1;

assign X_R_1_address1 = zext_ln111_fu_432_p1;

assign X_R_2_address0 = zext_ln111_2_fu_472_p1;

assign X_R_2_address1 = zext_ln111_fu_432_p1;

assign X_R_3_address0 = zext_ln111_2_fu_472_p1;

assign X_R_3_address1 = zext_ln111_fu_432_p1;

assign add_ln107_fu_484_p2 = (ap_sig_allocacmp_temp_2 + 11'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln111_fu_458_p2 = ((trunc_ln111_fu_454_p1 == 2'd0) ? 1'b1 : 1'b0);

integer ap_tvar_int_0;

always @ (ap_sig_allocacmp_temp_2) begin
    for (ap_tvar_int_0 = 7 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 7 - 1) begin
            or_ln111_1_fu_422_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            or_ln111_1_fu_422_p4[ap_tvar_int_0] = ap_sig_allocacmp_temp_2[7 - ap_tvar_int_0];
        end
    end
end

integer ap_tvar_int_1;

always @ (ap_sig_allocacmp_temp_2) begin
    for (ap_tvar_int_1 = 2 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 9 - 8) begin
            or_ln_fu_412_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            or_ln_fu_412_p4[ap_tvar_int_1] = ap_sig_allocacmp_temp_2[9 - ap_tvar_int_1];
        end
    end
end

assign tmp_1_fu_598_p1 = X_I_0_q0;

assign tmp_1_fu_598_p2 = X_I_1_q0;

assign tmp_1_fu_598_p3 = X_I_2_q0;

assign tmp_1_fu_598_p4 = X_I_3_q0;

assign tmp_4_fu_540_p1 = X_I_0_q1;

assign tmp_4_fu_540_p2 = X_I_1_q1;

assign tmp_4_fu_540_p3 = X_I_2_q1;

assign tmp_4_fu_540_p4 = X_I_3_q1;

assign tmp_6_fu_404_p3 = ap_sig_allocacmp_temp_2[32'd10];

assign tmp_fu_511_p1 = X_R_0_q1;

assign tmp_fu_511_p2 = X_R_1_q1;

assign tmp_fu_511_p3 = X_R_2_q1;

assign tmp_fu_511_p4 = X_R_3_q1;

assign tmp_s_fu_569_p1 = X_R_0_q0;

assign tmp_s_fu_569_p2 = X_R_1_q0;

assign tmp_s_fu_569_p3 = X_R_2_q0;

assign tmp_s_fu_569_p4 = X_R_3_q0;

assign trunc_ln111_fu_454_p1 = ap_sig_allocacmp_temp_2[1:0];

assign zext_ln111_1_cast_fu_464_p3 = {{1'd1}, {or_ln111_1_fu_422_p4}};

assign zext_ln111_1_fu_611_p1 = lshr_ln_reg_661_pp0_iter1_reg;

assign zext_ln111_2_fu_472_p1 = zext_ln111_1_cast_fu_464_p3;

assign zext_ln111_fu_432_p1 = or_ln111_1_fu_422_p4;

endmodule //fft_fft_Pipeline_Reverse
