-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_fft_Pipeline_DFTpts is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Stage0_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_R_1_ce0 : OUT STD_LOGIC;
    Stage0_R_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage0_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_I_1_ce0 : OUT STD_LOGIC;
    Stage0_I_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage0_R_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_R_ce0 : OUT STD_LOGIC;
    Stage0_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage1_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage1_R_1_ce0 : OUT STD_LOGIC;
    Stage1_R_1_we0 : OUT STD_LOGIC;
    Stage1_R_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage0_I_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_I_ce0 : OUT STD_LOGIC;
    Stage0_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage1_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage1_I_1_ce0 : OUT STD_LOGIC;
    Stage1_I_1_we0 : OUT STD_LOGIC;
    Stage1_I_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage1_R_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage1_R_ce0 : OUT STD_LOGIC;
    Stage1_R_we0 : OUT STD_LOGIC;
    Stage1_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage1_I_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage1_I_ce0 : OUT STD_LOGIC;
    Stage1_I_we0 : OUT STD_LOGIC;
    Stage1_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage0_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_R_3_ce0 : OUT STD_LOGIC;
    Stage0_R_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage0_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_I_3_ce0 : OUT STD_LOGIC;
    Stage0_I_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage0_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_R_2_ce0 : OUT STD_LOGIC;
    Stage0_R_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage1_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage1_R_3_ce0 : OUT STD_LOGIC;
    Stage1_R_3_we0 : OUT STD_LOGIC;
    Stage1_R_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage0_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_I_2_ce0 : OUT STD_LOGIC;
    Stage0_I_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage1_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage1_I_3_ce0 : OUT STD_LOGIC;
    Stage1_I_3_we0 : OUT STD_LOGIC;
    Stage1_I_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage1_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage1_R_2_ce0 : OUT STD_LOGIC;
    Stage1_R_2_we0 : OUT STD_LOGIC;
    Stage1_R_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage1_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage1_I_2_ce0 : OUT STD_LOGIC;
    Stage1_I_2_we0 : OUT STD_LOGIC;
    Stage1_I_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_519_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_519_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_519_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_519_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_519_p_ce : OUT STD_LOGIC;
    grp_fu_523_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_523_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_523_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_523_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_523_p_ce : OUT STD_LOGIC;
    grp_fu_527_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_527_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_527_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_527_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_527_p_ce : OUT STD_LOGIC;
    grp_fu_531_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_531_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_531_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_531_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_531_p_ce : OUT STD_LOGIC;
    grp_fu_535_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_535_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_535_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_535_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_535_p_ce : OUT STD_LOGIC;
    grp_fu_539_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_539_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_539_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_539_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_539_p_ce : OUT STD_LOGIC;
    grp_fu_543_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_543_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_543_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_543_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_543_p_ce : OUT STD_LOGIC;
    grp_fu_547_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_547_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_547_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_547_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_547_p_ce : OUT STD_LOGIC;
    grp_fu_551_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_551_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_551_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_551_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_551_p_ce : OUT STD_LOGIC;
    grp_fu_555_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_555_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_555_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_555_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_555_p_ce : OUT STD_LOGIC;
    grp_fu_559_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_559_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_559_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_559_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_559_p_ce : OUT STD_LOGIC;
    grp_fu_563_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_563_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_563_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_563_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_563_p_ce : OUT STD_LOGIC;
    grp_fu_567_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_567_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_567_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_567_p_ce : OUT STD_LOGIC;
    grp_fu_571_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_571_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_571_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_571_p_ce : OUT STD_LOGIC;
    grp_fu_575_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_575_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_575_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_575_p_ce : OUT STD_LOGIC;
    grp_fu_579_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_579_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_579_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_579_p_ce : OUT STD_LOGIC );
end;


architecture behav of fft_fft_Pipeline_DFTpts is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln137_fu_374_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln137_reg_404_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal Stage0_R_1_load_reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_R_1_load_reg_440_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_R_1_load_reg_440_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_R_1_load_reg_440_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_R_1_load_reg_440_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_I_1_load_reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_I_1_load_reg_446_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_I_1_load_reg_446_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_I_1_load_reg_446_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_I_1_load_reg_446_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_R_3_load_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_R_3_load_reg_452_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_R_3_load_reg_452_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_R_3_load_reg_452_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_R_3_load_reg_452_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_I_3_load_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_I_3_load_reg_458_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_I_3_load_reg_458_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_I_3_load_reg_458_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_I_3_load_reg_458_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_i_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul9_i_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_1_i_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul9_1_i_reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_R_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_I_reg_510 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_R_load_reg_516 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_I_load_reg_522 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_R_1_reg_528 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_I_1_reg_534 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_R_2_load_reg_540 : STD_LOGIC_VECTOR (31 downto 0);
    signal Stage0_I_2_load_reg_546 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub13_i_reg_552 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub18_i_reg_557 : STD_LOGIC_VECTOR (31 downto 0);
    signal add23_i_reg_562 : STD_LOGIC_VECTOR (31 downto 0);
    signal add28_i_reg_567 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub13_1_i_reg_572 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub18_1_i_reg_577 : STD_LOGIC_VECTOR (31 downto 0);
    signal add23_1_i_reg_582 : STD_LOGIC_VECTOR (31 downto 0);
    signal add28_1_i_reg_587 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_68 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln134_fu_382_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_5 : STD_LOGIC_VECTOR (10 downto 0);
    signal lshr_ln2_fu_364_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component fft_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component fft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_fu_356_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_68 <= add_ln134_fu_382_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_68 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Stage0_I_1_load_reg_446 <= Stage0_I_1_q0;
                Stage0_I_3_load_reg_458 <= Stage0_I_3_q0;
                Stage0_R_1_load_reg_440 <= Stage0_R_1_q0;
                Stage0_R_3_load_reg_452 <= Stage0_R_3_q0;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    zext_ln137_reg_404_pp0_iter1_reg(7 downto 0) <= zext_ln137_reg_404(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                Stage0_I_1_load_reg_446_pp0_iter2_reg <= Stage0_I_1_load_reg_446;
                Stage0_I_1_load_reg_446_pp0_iter3_reg <= Stage0_I_1_load_reg_446_pp0_iter2_reg;
                Stage0_I_1_load_reg_446_pp0_iter4_reg <= Stage0_I_1_load_reg_446_pp0_iter3_reg;
                Stage0_I_1_load_reg_446_pp0_iter5_reg <= Stage0_I_1_load_reg_446_pp0_iter4_reg;
                Stage0_I_2_load_reg_546 <= Stage0_I_2_q0;
                Stage0_I_3_load_reg_458_pp0_iter2_reg <= Stage0_I_3_load_reg_458;
                Stage0_I_3_load_reg_458_pp0_iter3_reg <= Stage0_I_3_load_reg_458_pp0_iter2_reg;
                Stage0_I_3_load_reg_458_pp0_iter4_reg <= Stage0_I_3_load_reg_458_pp0_iter3_reg;
                Stage0_I_3_load_reg_458_pp0_iter5_reg <= Stage0_I_3_load_reg_458_pp0_iter4_reg;
                Stage0_I_load_reg_522 <= Stage0_I_q0;
                Stage0_R_1_load_reg_440_pp0_iter2_reg <= Stage0_R_1_load_reg_440;
                Stage0_R_1_load_reg_440_pp0_iter3_reg <= Stage0_R_1_load_reg_440_pp0_iter2_reg;
                Stage0_R_1_load_reg_440_pp0_iter4_reg <= Stage0_R_1_load_reg_440_pp0_iter3_reg;
                Stage0_R_1_load_reg_440_pp0_iter5_reg <= Stage0_R_1_load_reg_440_pp0_iter4_reg;
                Stage0_R_2_load_reg_540 <= Stage0_R_2_q0;
                Stage0_R_3_load_reg_452_pp0_iter2_reg <= Stage0_R_3_load_reg_452;
                Stage0_R_3_load_reg_452_pp0_iter3_reg <= Stage0_R_3_load_reg_452_pp0_iter2_reg;
                Stage0_R_3_load_reg_452_pp0_iter4_reg <= Stage0_R_3_load_reg_452_pp0_iter3_reg;
                Stage0_R_3_load_reg_452_pp0_iter5_reg <= Stage0_R_3_load_reg_452_pp0_iter4_reg;
                Stage0_R_load_reg_516 <= Stage0_R_q0;
                add23_1_i_reg_582 <= grp_fu_559_p_dout0;
                add23_i_reg_562 <= grp_fu_543_p_dout0;
                add28_1_i_reg_587 <= grp_fu_563_p_dout0;
                add28_i_reg_567 <= grp_fu_547_p_dout0;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                mul3_1_i_reg_474 <= grp_fu_575_p_dout0;
                mul3_i_reg_464 <= grp_fu_567_p_dout0;
                mul9_1_i_reg_479 <= grp_fu_579_p_dout0;
                mul9_i_reg_469 <= grp_fu_571_p_dout0;
                sub13_1_i_reg_572 <= grp_fu_551_p_dout0;
                sub13_i_reg_552 <= grp_fu_535_p_dout0;
                sub18_1_i_reg_577 <= grp_fu_555_p_dout0;
                sub18_i_reg_557 <= grp_fu_539_p_dout0;
                temp_I_1_reg_534 <= grp_fu_531_p_dout0;
                temp_I_reg_510 <= grp_fu_523_p_dout0;
                temp_R_1_reg_528 <= grp_fu_527_p_dout0;
                temp_R_reg_504 <= grp_fu_519_p_dout0;
                    zext_ln137_reg_404_pp0_iter10_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter9_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter11_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter10_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter12_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter11_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter13_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter12_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter14_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter13_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter15_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter14_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter2_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter1_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter3_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter2_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter4_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter3_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter5_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter4_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter6_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter5_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter7_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter6_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter8_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter7_reg(7 downto 0);
                    zext_ln137_reg_404_pp0_iter9_reg(7 downto 0) <= zext_ln137_reg_404_pp0_iter8_reg(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_356_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln137_reg_404(7 downto 0) <= zext_ln137_fu_374_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln137_reg_404(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter1_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter2_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter5_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter6_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter7_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter8_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter9_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter10_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter11_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter12_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter13_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter14_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln137_reg_404_pp0_iter15_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Stage0_I_1_address0 <= zext_ln137_fu_374_p1(8 - 1 downto 0);

    Stage0_I_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Stage0_I_1_ce0 <= ap_const_logic_1;
        else 
            Stage0_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_I_2_address0 <= zext_ln137_reg_404_pp0_iter8_reg(8 - 1 downto 0);

    Stage0_I_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Stage0_I_2_ce0 <= ap_const_logic_1;
        else 
            Stage0_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_I_3_address0 <= zext_ln137_fu_374_p1(8 - 1 downto 0);

    Stage0_I_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Stage0_I_3_ce0 <= ap_const_logic_1;
        else 
            Stage0_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_I_address0 <= zext_ln137_reg_404_pp0_iter8_reg(8 - 1 downto 0);

    Stage0_I_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Stage0_I_ce0 <= ap_const_logic_1;
        else 
            Stage0_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_R_1_address0 <= zext_ln137_fu_374_p1(8 - 1 downto 0);

    Stage0_R_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Stage0_R_1_ce0 <= ap_const_logic_1;
        else 
            Stage0_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_R_2_address0 <= zext_ln137_reg_404_pp0_iter8_reg(8 - 1 downto 0);

    Stage0_R_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Stage0_R_2_ce0 <= ap_const_logic_1;
        else 
            Stage0_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_R_3_address0 <= zext_ln137_fu_374_p1(8 - 1 downto 0);

    Stage0_R_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Stage0_R_3_ce0 <= ap_const_logic_1;
        else 
            Stage0_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_R_address0 <= zext_ln137_reg_404_pp0_iter8_reg(8 - 1 downto 0);

    Stage0_R_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            Stage0_R_ce0 <= ap_const_logic_1;
        else 
            Stage0_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_I_1_address0 <= zext_ln137_reg_404_pp0_iter15_reg(8 - 1 downto 0);

    Stage1_I_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_I_1_ce0 <= ap_const_logic_1;
        else 
            Stage1_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_I_1_d0 <= sub18_i_reg_557;

    Stage1_I_1_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_I_1_we0 <= ap_const_logic_1;
        else 
            Stage1_I_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_I_2_address0 <= zext_ln137_reg_404_pp0_iter15_reg(8 - 1 downto 0);

    Stage1_I_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_I_2_ce0 <= ap_const_logic_1;
        else 
            Stage1_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_I_2_d0 <= add28_1_i_reg_587;

    Stage1_I_2_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_I_2_we0 <= ap_const_logic_1;
        else 
            Stage1_I_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_I_3_address0 <= zext_ln137_reg_404_pp0_iter15_reg(8 - 1 downto 0);

    Stage1_I_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_I_3_ce0 <= ap_const_logic_1;
        else 
            Stage1_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_I_3_d0 <= sub18_1_i_reg_577;

    Stage1_I_3_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_I_3_we0 <= ap_const_logic_1;
        else 
            Stage1_I_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_I_address0 <= zext_ln137_reg_404_pp0_iter15_reg(8 - 1 downto 0);

    Stage1_I_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_I_ce0 <= ap_const_logic_1;
        else 
            Stage1_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_I_d0 <= add28_i_reg_567;

    Stage1_I_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_I_we0 <= ap_const_logic_1;
        else 
            Stage1_I_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_R_1_address0 <= zext_ln137_reg_404_pp0_iter15_reg(8 - 1 downto 0);

    Stage1_R_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_R_1_ce0 <= ap_const_logic_1;
        else 
            Stage1_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_R_1_d0 <= sub13_i_reg_552;

    Stage1_R_1_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_R_1_we0 <= ap_const_logic_1;
        else 
            Stage1_R_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_R_2_address0 <= zext_ln137_reg_404_pp0_iter15_reg(8 - 1 downto 0);

    Stage1_R_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_R_2_ce0 <= ap_const_logic_1;
        else 
            Stage1_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_R_2_d0 <= add23_1_i_reg_582;

    Stage1_R_2_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_R_2_we0 <= ap_const_logic_1;
        else 
            Stage1_R_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_R_3_address0 <= zext_ln137_reg_404_pp0_iter15_reg(8 - 1 downto 0);

    Stage1_R_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_R_3_ce0 <= ap_const_logic_1;
        else 
            Stage1_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_R_3_d0 <= sub13_1_i_reg_572;

    Stage1_R_3_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_R_3_we0 <= ap_const_logic_1;
        else 
            Stage1_R_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_R_address0 <= zext_ln137_reg_404_pp0_iter15_reg(8 - 1 downto 0);

    Stage1_R_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_R_ce0 <= ap_const_logic_1;
        else 
            Stage1_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage1_R_d0 <= add23_i_reg_562;

    Stage1_R_we0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter16 = ap_const_logic_1))) then 
            Stage1_R_we0 <= ap_const_logic_1;
        else 
            Stage1_R_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln134_fu_382_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_5) + unsigned(ap_const_lv11_4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_fu_356_p3)
    begin
        if (((tmp_fu_356_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_68, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_5 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_i_5 <= i_fu_68;
        end if; 
    end process;

    grp_fu_519_p_ce <= ap_const_logic_1;
    grp_fu_519_p_din0 <= Stage0_R_1_load_reg_440_pp0_iter5_reg;
    grp_fu_519_p_din1 <= mul3_i_reg_464;
    grp_fu_519_p_opcode <= ap_const_lv2_1;
    grp_fu_523_p_ce <= ap_const_logic_1;
    grp_fu_523_p_din0 <= Stage0_I_1_load_reg_446_pp0_iter5_reg;
    grp_fu_523_p_din1 <= mul9_i_reg_469;
    grp_fu_523_p_opcode <= ap_const_lv2_0;
    grp_fu_527_p_ce <= ap_const_logic_1;
    grp_fu_527_p_din0 <= Stage0_R_3_load_reg_452_pp0_iter5_reg;
    grp_fu_527_p_din1 <= mul3_1_i_reg_474;
    grp_fu_527_p_opcode <= ap_const_lv2_1;
    grp_fu_531_p_ce <= ap_const_logic_1;
    grp_fu_531_p_din0 <= Stage0_I_3_load_reg_458_pp0_iter5_reg;
    grp_fu_531_p_din1 <= mul9_1_i_reg_479;
    grp_fu_531_p_opcode <= ap_const_lv2_0;
    grp_fu_535_p_ce <= ap_const_logic_1;
    grp_fu_535_p_din0 <= Stage0_R_load_reg_516;
    grp_fu_535_p_din1 <= temp_R_reg_504;
    grp_fu_535_p_opcode <= ap_const_lv2_1;
    grp_fu_539_p_ce <= ap_const_logic_1;
    grp_fu_539_p_din0 <= Stage0_I_load_reg_522;
    grp_fu_539_p_din1 <= temp_I_reg_510;
    grp_fu_539_p_opcode <= ap_const_lv2_1;
    grp_fu_543_p_ce <= ap_const_logic_1;
    grp_fu_543_p_din0 <= Stage0_R_load_reg_516;
    grp_fu_543_p_din1 <= temp_R_reg_504;
    grp_fu_543_p_opcode <= ap_const_lv2_0;
    grp_fu_547_p_ce <= ap_const_logic_1;
    grp_fu_547_p_din0 <= Stage0_I_load_reg_522;
    grp_fu_547_p_din1 <= temp_I_reg_510;
    grp_fu_547_p_opcode <= ap_const_lv2_0;
    grp_fu_551_p_ce <= ap_const_logic_1;
    grp_fu_551_p_din0 <= Stage0_R_2_load_reg_540;
    grp_fu_551_p_din1 <= temp_R_1_reg_528;
    grp_fu_551_p_opcode <= ap_const_lv2_1;
    grp_fu_555_p_ce <= ap_const_logic_1;
    grp_fu_555_p_din0 <= Stage0_I_2_load_reg_546;
    grp_fu_555_p_din1 <= temp_I_1_reg_534;
    grp_fu_555_p_opcode <= ap_const_lv2_1;
    grp_fu_559_p_ce <= ap_const_logic_1;
    grp_fu_559_p_din0 <= Stage0_R_2_load_reg_540;
    grp_fu_559_p_din1 <= temp_R_1_reg_528;
    grp_fu_559_p_opcode <= ap_const_lv2_0;
    grp_fu_563_p_ce <= ap_const_logic_1;
    grp_fu_563_p_din0 <= Stage0_I_2_load_reg_546;
    grp_fu_563_p_din1 <= temp_I_1_reg_534;
    grp_fu_563_p_opcode <= ap_const_lv2_0;
    grp_fu_567_p_ce <= ap_const_logic_1;
    grp_fu_567_p_din0 <= Stage0_I_1_load_reg_446;
    grp_fu_567_p_din1 <= ap_const_lv32_80000000;
    grp_fu_571_p_ce <= ap_const_logic_1;
    grp_fu_571_p_din0 <= Stage0_R_1_load_reg_440;
    grp_fu_571_p_din1 <= ap_const_lv32_80000000;
    grp_fu_575_p_ce <= ap_const_logic_1;
    grp_fu_575_p_din0 <= Stage0_I_3_load_reg_458;
    grp_fu_575_p_din1 <= ap_const_lv32_80000000;
    grp_fu_579_p_ce <= ap_const_logic_1;
    grp_fu_579_p_din0 <= Stage0_R_3_load_reg_452;
    grp_fu_579_p_din1 <= ap_const_lv32_80000000;
    lshr_ln2_fu_364_p4 <= ap_sig_allocacmp_i_5(9 downto 2);
    tmp_fu_356_p3 <= ap_sig_allocacmp_i_5(10 downto 10);
    zext_ln137_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln2_fu_364_p4),64));
end behav;
