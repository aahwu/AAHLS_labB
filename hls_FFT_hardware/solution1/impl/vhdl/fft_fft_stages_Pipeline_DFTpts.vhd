-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_fft_stages_Pipeline_DFTpts is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln160 : IN STD_LOGIC_VECTOR (8 downto 0);
    zext_ln157 : IN STD_LOGIC_VECTOR (8 downto 0);
    OUT_I_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_0_ce0 : OUT STD_LOGIC;
    OUT_I_0_we0 : OUT STD_LOGIC;
    OUT_I_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_0_ce1 : OUT STD_LOGIC;
    OUT_I_0_we1 : OUT STD_LOGIC;
    OUT_I_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_0_ce0 : OUT STD_LOGIC;
    OUT_R_0_we0 : OUT STD_LOGIC;
    OUT_R_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_0_ce1 : OUT STD_LOGIC;
    OUT_R_0_we1 : OUT STD_LOGIC;
    OUT_R_0_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_1_ce0 : OUT STD_LOGIC;
    OUT_R_1_we0 : OUT STD_LOGIC;
    OUT_R_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_1_ce1 : OUT STD_LOGIC;
    OUT_R_1_we1 : OUT STD_LOGIC;
    OUT_R_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_2_ce0 : OUT STD_LOGIC;
    OUT_R_2_we0 : OUT STD_LOGIC;
    OUT_R_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_2_ce1 : OUT STD_LOGIC;
    OUT_R_2_we1 : OUT STD_LOGIC;
    OUT_R_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_3_ce0 : OUT STD_LOGIC;
    OUT_R_3_we0 : OUT STD_LOGIC;
    OUT_R_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_R_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_R_3_ce1 : OUT STD_LOGIC;
    OUT_R_3_we1 : OUT STD_LOGIC;
    OUT_R_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    sub3_cast : IN STD_LOGIC_VECTOR (3 downto 0);
    sub5_cast : IN STD_LOGIC_VECTOR (3 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (8 downto 0);
    X_R_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_0_ce0 : OUT STD_LOGIC;
    X_R_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_0_ce1 : OUT STD_LOGIC;
    X_R_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_1_ce0 : OUT STD_LOGIC;
    X_R_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_1_ce1 : OUT STD_LOGIC;
    X_R_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_2_ce0 : OUT STD_LOGIC;
    X_R_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_2_ce1 : OUT STD_LOGIC;
    X_R_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_3_ce0 : OUT STD_LOGIC;
    X_R_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_3_ce1 : OUT STD_LOGIC;
    X_R_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_0_ce0 : OUT STD_LOGIC;
    X_I_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_0_ce1 : OUT STD_LOGIC;
    X_I_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_1_ce0 : OUT STD_LOGIC;
    X_I_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_1_ce1 : OUT STD_LOGIC;
    X_I_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_2_ce0 : OUT STD_LOGIC;
    X_I_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_2_ce1 : OUT STD_LOGIC;
    X_I_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_3_ce0 : OUT STD_LOGIC;
    X_I_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_3_ce1 : OUT STD_LOGIC;
    X_I_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_1_ce0 : OUT STD_LOGIC;
    OUT_I_1_we0 : OUT STD_LOGIC;
    OUT_I_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_1_ce1 : OUT STD_LOGIC;
    OUT_I_1_we1 : OUT STD_LOGIC;
    OUT_I_1_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_2_ce0 : OUT STD_LOGIC;
    OUT_I_2_we0 : OUT STD_LOGIC;
    OUT_I_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_2_ce1 : OUT STD_LOGIC;
    OUT_I_2_we1 : OUT STD_LOGIC;
    OUT_I_2_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_3_ce0 : OUT STD_LOGIC;
    OUT_I_3_we0 : OUT STD_LOGIC;
    OUT_I_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    OUT_I_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    OUT_I_3_ce1 : OUT STD_LOGIC;
    OUT_I_3_we1 : OUT STD_LOGIC;
    OUT_I_3_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_fft_stages_Pipeline_DFTpts is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln169_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal W_real_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_real_ce0 : STD_LOGIC;
    signal W_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_imag_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_imag_ce0 : STD_LOGIC;
    signal W_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sub3_cast_cast_fu_594_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub3_cast_cast_reg_817 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln1540_fu_656_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln1540_reg_834 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln1065_fu_660_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1065_reg_839 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln184_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln184_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_fu_672_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849 : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal empty_reg_849_pp0_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_fu_683_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln850_reg_855_pp0_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ret_V_fu_687_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_861 : STD_LOGIC_VECTOR (8 downto 0);
    signal lshr_ln_reg_866 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_reg_871 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_reg_871_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_reg_871_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_reg_871_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_reg_871_pp0_iter5_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_reg_871_pp0_iter6_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_reg_871_pp0_iter7_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_reg_871_pp0_iter8_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_reg_871_pp0_iter9_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_reg_871_pp0_iter10_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln176_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_reg_886_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal c2_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal s2_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_742_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_950 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_755_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_578_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_962 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul1_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_586_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul2_reg_972 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_590_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul3_reg_977 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln179_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_reg_982 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_reg_982_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_reg_982_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_reg_982_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_reg_982_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_reg_982_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln179_reg_982_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_554_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_R_reg_1034 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_558_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_I_reg_1040 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_779_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_792_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1052 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_566_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub1_reg_1066 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_570_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_1074 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_574_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add1_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln1540_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_Val2_s_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_715_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal tmp_4_fu_614_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal zext_ln674_fu_630_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal xor_ln674_fu_634_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln674_1_fu_640_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln674_fu_644_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lhs_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln160_cast_fu_602_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln157_cast_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_675_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_710_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0 : BOOLEAN;
    signal ap_enable_operation_170 : BOOLEAN;
    signal ap_enable_state19_pp0_iter18_stage0 : BOOLEAN;
    signal ap_enable_operation_190 : BOOLEAN;
    signal ap_enable_operation_172 : BOOLEAN;
    signal ap_enable_operation_192 : BOOLEAN;
    signal ap_enable_operation_174 : BOOLEAN;
    signal ap_enable_operation_194 : BOOLEAN;
    signal ap_enable_operation_176 : BOOLEAN;
    signal ap_enable_operation_196 : BOOLEAN;
    signal ap_enable_operation_178 : BOOLEAN;
    signal ap_enable_operation_198 : BOOLEAN;
    signal ap_enable_operation_180 : BOOLEAN;
    signal ap_enable_operation_200 : BOOLEAN;
    signal ap_enable_operation_182 : BOOLEAN;
    signal ap_enable_operation_202 : BOOLEAN;
    signal ap_enable_operation_184 : BOOLEAN;
    signal ap_enable_operation_204 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft_fsub_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fadd_32ns_32ns_32_5_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_mul_9s_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component fft_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fft_stages_Pipeline_DFTpts_W_real_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fft_stages_Pipeline_DFTpts_W_imag_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    W_real_U : component fft_fft_stages_Pipeline_DFTpts_W_real_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_real_address0,
        ce0 => W_real_ce0,
        q0 => W_real_q0);

    W_imag_U : component fft_fft_stages_Pipeline_DFTpts_W_imag_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_imag_address0,
        ce0 => W_imag_ce0,
        q0 => W_imag_q0);

    fsub_32ns_32ns_32_5_full_dsp_1_U54 : component fft_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul_reg_962,
        din1 => mul1_reg_967,
        ce => ap_const_logic_1,
        dout => grp_fu_554_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U55 : component fft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => mul2_reg_972,
        din1 => mul3_reg_977,
        ce => ap_const_logic_1,
        dout => grp_fu_558_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U56 : component fft_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1046,
        din1 => temp_R_reg_1034,
        ce => ap_const_logic_1,
        dout => grp_fu_562_p2);

    fsub_32ns_32ns_32_5_full_dsp_1_U57 : component fft_fsub_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_1052,
        din1 => temp_I_reg_1040,
        ce => ap_const_logic_1,
        dout => grp_fu_566_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U58 : component fft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_reg_1046,
        din1 => temp_R_reg_1034,
        ce => ap_const_logic_1,
        dout => grp_fu_570_p2);

    fadd_32ns_32ns_32_5_full_dsp_1_U59 : component fft_fadd_32ns_32ns_32_5_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_reg_1052,
        din1 => temp_I_reg_1040,
        ce => ap_const_logic_1,
        dout => grp_fu_574_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U60 : component fft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_950,
        din1 => c2_reg_938,
        ce => ap_const_logic_1,
        dout => grp_fu_578_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U61 : component fft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_956,
        din1 => s2_reg_944,
        ce => ap_const_logic_1,
        dout => grp_fu_582_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U62 : component fft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_1_reg_956,
        din1 => c2_reg_938,
        ce => ap_const_logic_1,
        dout => grp_fu_586_p2);

    fmul_32ns_32ns_32_4_max_dsp_1_U63 : component fft_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_950,
        din1 => s2_reg_944,
        ce => ap_const_logic_1,
        dout => grp_fu_590_p2);

    mul_9s_9s_9_1_1_U64 : component fft_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => trunc_ln1540_reg_834,
        din1 => trunc_ln,
        dout => ret_V_fu_687_p2);

    mux_42_32_1_1_U65 : component fft_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => X_R_0_q1,
        din1 => X_R_1_q1,
        din2 => X_R_2_q1,
        din3 => X_R_3_q1,
        din4 => trunc_ln850_reg_855_pp0_iter2_reg,
        dout => tmp_fu_742_p6);

    mux_42_32_1_1_U66 : component fft_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => X_I_0_q1,
        din1 => X_I_1_q1,
        din2 => X_I_2_q1,
        din3 => X_I_3_q1,
        din4 => trunc_ln850_reg_855_pp0_iter2_reg,
        dout => tmp_1_fu_755_p6);

    mux_42_32_1_1_U67 : component fft_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => X_R_0_q0,
        din1 => X_R_1_q0,
        din2 => X_R_2_q0,
        din3 => X_R_3_q0,
        din4 => empty_reg_849_pp0_iter11_reg,
        dout => tmp_2_fu_779_p6);

    mux_42_32_1_1_U68 : component fft_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => X_I_0_q0,
        din1 => X_I_1_q0,
        din2 => X_I_2_q0,
        din3 => X_I_3_q0,
        din4 => empty_reg_849_pp0_iter11_reg,
        dout => tmp_3_fu_792_p6);

    flow_control_loop_pipe_sequential_init_U : component fft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    p_Val2_s_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    p_Val2_s_fu_94 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    p_Val2_s_fu_94 <= i_2_fu_715_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add1_reg_1082 <= grp_fu_574_p2;
                add_reg_1074 <= grp_fu_570_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                c2_reg_938 <= W_real_q0;
                empty_reg_849_pp0_iter10_reg <= empty_reg_849_pp0_iter9_reg;
                empty_reg_849_pp0_iter11_reg <= empty_reg_849_pp0_iter10_reg;
                empty_reg_849_pp0_iter12_reg <= empty_reg_849_pp0_iter11_reg;
                empty_reg_849_pp0_iter13_reg <= empty_reg_849_pp0_iter12_reg;
                empty_reg_849_pp0_iter14_reg <= empty_reg_849_pp0_iter13_reg;
                empty_reg_849_pp0_iter15_reg <= empty_reg_849_pp0_iter14_reg;
                empty_reg_849_pp0_iter16_reg <= empty_reg_849_pp0_iter15_reg;
                empty_reg_849_pp0_iter17_reg <= empty_reg_849_pp0_iter16_reg;
                empty_reg_849_pp0_iter2_reg <= empty_reg_849;
                empty_reg_849_pp0_iter3_reg <= empty_reg_849_pp0_iter2_reg;
                empty_reg_849_pp0_iter4_reg <= empty_reg_849_pp0_iter3_reg;
                empty_reg_849_pp0_iter5_reg <= empty_reg_849_pp0_iter4_reg;
                empty_reg_849_pp0_iter6_reg <= empty_reg_849_pp0_iter5_reg;
                empty_reg_849_pp0_iter7_reg <= empty_reg_849_pp0_iter6_reg;
                empty_reg_849_pp0_iter8_reg <= empty_reg_849_pp0_iter7_reg;
                empty_reg_849_pp0_iter9_reg <= empty_reg_849_pp0_iter8_reg;
                lshr_ln1_reg_871_pp0_iter10_reg <= lshr_ln1_reg_871_pp0_iter9_reg;
                lshr_ln1_reg_871_pp0_iter2_reg <= lshr_ln1_reg_871;
                lshr_ln1_reg_871_pp0_iter3_reg <= lshr_ln1_reg_871_pp0_iter2_reg;
                lshr_ln1_reg_871_pp0_iter4_reg <= lshr_ln1_reg_871_pp0_iter3_reg;
                lshr_ln1_reg_871_pp0_iter5_reg <= lshr_ln1_reg_871_pp0_iter4_reg;
                lshr_ln1_reg_871_pp0_iter6_reg <= lshr_ln1_reg_871_pp0_iter5_reg;
                lshr_ln1_reg_871_pp0_iter7_reg <= lshr_ln1_reg_871_pp0_iter6_reg;
                lshr_ln1_reg_871_pp0_iter8_reg <= lshr_ln1_reg_871_pp0_iter7_reg;
                lshr_ln1_reg_871_pp0_iter9_reg <= lshr_ln1_reg_871_pp0_iter8_reg;
                mul1_reg_967 <= grp_fu_582_p2;
                mul2_reg_972 <= grp_fu_586_p2;
                mul3_reg_977 <= grp_fu_590_p2;
                mul_reg_962 <= grp_fu_578_p2;
                s2_reg_944 <= W_imag_q0;
                sub1_reg_1066 <= grp_fu_566_p2;
                sub_reg_1058 <= grp_fu_562_p2;
                temp_I_reg_1040 <= grp_fu_558_p2;
                temp_R_reg_1034 <= grp_fu_554_p2;
                tmp_1_reg_956 <= tmp_1_fu_755_p6;
                tmp_2_reg_1046 <= tmp_2_fu_779_p6;
                tmp_3_reg_1052 <= tmp_3_fu_792_p6;
                tmp_reg_950 <= tmp_fu_742_p6;
                trunc_ln850_reg_855_pp0_iter10_reg <= trunc_ln850_reg_855_pp0_iter9_reg;
                trunc_ln850_reg_855_pp0_iter11_reg <= trunc_ln850_reg_855_pp0_iter10_reg;
                trunc_ln850_reg_855_pp0_iter12_reg <= trunc_ln850_reg_855_pp0_iter11_reg;
                trunc_ln850_reg_855_pp0_iter13_reg <= trunc_ln850_reg_855_pp0_iter12_reg;
                trunc_ln850_reg_855_pp0_iter14_reg <= trunc_ln850_reg_855_pp0_iter13_reg;
                trunc_ln850_reg_855_pp0_iter15_reg <= trunc_ln850_reg_855_pp0_iter14_reg;
                trunc_ln850_reg_855_pp0_iter16_reg <= trunc_ln850_reg_855_pp0_iter15_reg;
                trunc_ln850_reg_855_pp0_iter17_reg <= trunc_ln850_reg_855_pp0_iter16_reg;
                trunc_ln850_reg_855_pp0_iter2_reg <= trunc_ln850_reg_855;
                trunc_ln850_reg_855_pp0_iter3_reg <= trunc_ln850_reg_855_pp0_iter2_reg;
                trunc_ln850_reg_855_pp0_iter4_reg <= trunc_ln850_reg_855_pp0_iter3_reg;
                trunc_ln850_reg_855_pp0_iter5_reg <= trunc_ln850_reg_855_pp0_iter4_reg;
                trunc_ln850_reg_855_pp0_iter6_reg <= trunc_ln850_reg_855_pp0_iter5_reg;
                trunc_ln850_reg_855_pp0_iter7_reg <= trunc_ln850_reg_855_pp0_iter6_reg;
                trunc_ln850_reg_855_pp0_iter8_reg <= trunc_ln850_reg_855_pp0_iter7_reg;
                trunc_ln850_reg_855_pp0_iter9_reg <= trunc_ln850_reg_855_pp0_iter8_reg;
                    zext_ln176_reg_886(7 downto 0) <= zext_ln176_fu_731_p1(7 downto 0);
                    zext_ln176_reg_886_pp0_iter10_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter9_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter11_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter10_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter12_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter11_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter13_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter12_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter14_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter13_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter15_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter14_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter16_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter15_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter17_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter16_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter3_reg(7 downto 0) <= zext_ln176_reg_886(7 downto 0);
                    zext_ln176_reg_886_pp0_iter4_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter3_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter5_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter4_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter6_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter5_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter7_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter6_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter8_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter7_reg(7 downto 0);
                    zext_ln176_reg_886_pp0_iter9_reg(7 downto 0) <= zext_ln176_reg_886_pp0_iter8_reg(7 downto 0);
                    zext_ln179_reg_982(7 downto 0) <= zext_ln179_fu_768_p1(7 downto 0);
                    zext_ln179_reg_982_pp0_iter12_reg(7 downto 0) <= zext_ln179_reg_982(7 downto 0);
                    zext_ln179_reg_982_pp0_iter13_reg(7 downto 0) <= zext_ln179_reg_982_pp0_iter12_reg(7 downto 0);
                    zext_ln179_reg_982_pp0_iter14_reg(7 downto 0) <= zext_ln179_reg_982_pp0_iter13_reg(7 downto 0);
                    zext_ln179_reg_982_pp0_iter15_reg(7 downto 0) <= zext_ln179_reg_982_pp0_iter14_reg(7 downto 0);
                    zext_ln179_reg_982_pp0_iter16_reg(7 downto 0) <= zext_ln179_reg_982_pp0_iter15_reg(7 downto 0);
                    zext_ln179_reg_982_pp0_iter17_reg(7 downto 0) <= zext_ln179_reg_982_pp0_iter16_reg(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln169_fu_624_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln184_reg_844 <= add_ln184_fu_666_p2;
                icmp_ln1065_reg_839 <= icmp_ln1065_fu_660_p2;
                trunc_ln1540_reg_834 <= trunc_ln1540_fu_656_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                empty_reg_849 <= empty_fu_672_p1;
                i_3_reg_822 <= ap_sig_allocacmp_i_3;
                lshr_ln1_reg_871 <= i_3_reg_822(9 downto 2);
                lshr_ln_reg_866 <= p_Result_s_fu_675_p4(9 downto 2);
                ret_V_reg_861 <= ret_V_fu_687_p2;
                    sub3_cast_cast_reg_817(3 downto 0) <= sub3_cast_cast_fu_594_p1(3 downto 0);
                trunc_ln850_reg_855 <= trunc_ln850_fu_683_p1;
            end if;
        end if;
    end process;
    sub3_cast_cast_reg_817(31 downto 4) <= "0000000000000000000000000000";
    zext_ln176_reg_886(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter3_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter4_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter5_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter6_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter7_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter8_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter9_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter10_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter11_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter12_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter13_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter14_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter15_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter16_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln176_reg_886_pp0_iter17_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln179_reg_982(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln179_reg_982_pp0_iter12_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln179_reg_982_pp0_iter13_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln179_reg_982_pp0_iter14_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln179_reg_982_pp0_iter15_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln179_reg_982_pp0_iter16_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";
    zext_ln179_reg_982_pp0_iter17_reg(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    OUT_I_0_address0 <= zext_ln179_reg_982_pp0_iter17_reg(8 - 1 downto 0);
    OUT_I_0_address1 <= zext_ln176_reg_886_pp0_iter17_reg(8 - 1 downto 0);

    OUT_I_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_0_ce0 <= ap_const_logic_1;
        else 
            OUT_I_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_0_ce1 <= ap_const_logic_1;
        else 
            OUT_I_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_0_d0 <= add1_reg_1082;
    OUT_I_0_d1 <= sub1_reg_1066;

    OUT_I_0_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, empty_reg_849_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (empty_reg_849_pp0_iter17_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_0_we0 <= ap_const_logic_1;
        else 
            OUT_I_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_0_we1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, trunc_ln850_reg_855_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_0_we1 <= ap_const_logic_1;
        else 
            OUT_I_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_1_address0 <= zext_ln179_reg_982_pp0_iter17_reg(8 - 1 downto 0);
    OUT_I_1_address1 <= zext_ln176_reg_886_pp0_iter17_reg(8 - 1 downto 0);

    OUT_I_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_1_ce0 <= ap_const_logic_1;
        else 
            OUT_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_1_ce1 <= ap_const_logic_1;
        else 
            OUT_I_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_1_d0 <= add1_reg_1082;
    OUT_I_1_d1 <= sub1_reg_1066;

    OUT_I_1_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, empty_reg_849_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (empty_reg_849_pp0_iter17_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_1_we0 <= ap_const_logic_1;
        else 
            OUT_I_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_1_we1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, trunc_ln850_reg_855_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_1_we1 <= ap_const_logic_1;
        else 
            OUT_I_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_2_address0 <= zext_ln179_reg_982_pp0_iter17_reg(8 - 1 downto 0);
    OUT_I_2_address1 <= zext_ln176_reg_886_pp0_iter17_reg(8 - 1 downto 0);

    OUT_I_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_2_ce0 <= ap_const_logic_1;
        else 
            OUT_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_2_ce1 <= ap_const_logic_1;
        else 
            OUT_I_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_2_d0 <= add1_reg_1082;
    OUT_I_2_d1 <= sub1_reg_1066;

    OUT_I_2_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, empty_reg_849_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (empty_reg_849_pp0_iter17_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_2_we0 <= ap_const_logic_1;
        else 
            OUT_I_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_2_we1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, trunc_ln850_reg_855_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_2_we1 <= ap_const_logic_1;
        else 
            OUT_I_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_3_address0 <= zext_ln179_reg_982_pp0_iter17_reg(8 - 1 downto 0);
    OUT_I_3_address1 <= zext_ln176_reg_886_pp0_iter17_reg(8 - 1 downto 0);

    OUT_I_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_3_ce0 <= ap_const_logic_1;
        else 
            OUT_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_3_ce1 <= ap_const_logic_1;
        else 
            OUT_I_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_I_3_d0 <= add1_reg_1082;
    OUT_I_3_d1 <= sub1_reg_1066;

    OUT_I_3_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, empty_reg_849_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (empty_reg_849_pp0_iter17_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_3_we0 <= ap_const_logic_1;
        else 
            OUT_I_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_I_3_we1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, trunc_ln850_reg_855_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_I_3_we1 <= ap_const_logic_1;
        else 
            OUT_I_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_0_address0 <= zext_ln179_reg_982_pp0_iter17_reg(8 - 1 downto 0);
    OUT_R_0_address1 <= zext_ln176_reg_886_pp0_iter17_reg(8 - 1 downto 0);

    OUT_R_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_0_ce0 <= ap_const_logic_1;
        else 
            OUT_R_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_0_ce1 <= ap_const_logic_1;
        else 
            OUT_R_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_0_d0 <= add_reg_1074;
    OUT_R_0_d1 <= sub_reg_1058;

    OUT_R_0_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, empty_reg_849_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (empty_reg_849_pp0_iter17_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_0_we0 <= ap_const_logic_1;
        else 
            OUT_R_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_0_we1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, trunc_ln850_reg_855_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_0_we1 <= ap_const_logic_1;
        else 
            OUT_R_0_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_1_address0 <= zext_ln179_reg_982_pp0_iter17_reg(8 - 1 downto 0);
    OUT_R_1_address1 <= zext_ln176_reg_886_pp0_iter17_reg(8 - 1 downto 0);

    OUT_R_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_1_ce0 <= ap_const_logic_1;
        else 
            OUT_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_1_ce1 <= ap_const_logic_1;
        else 
            OUT_R_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_1_d0 <= add_reg_1074;
    OUT_R_1_d1 <= sub_reg_1058;

    OUT_R_1_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, empty_reg_849_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (empty_reg_849_pp0_iter17_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_1_we0 <= ap_const_logic_1;
        else 
            OUT_R_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_1_we1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, trunc_ln850_reg_855_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_1_we1 <= ap_const_logic_1;
        else 
            OUT_R_1_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_2_address0 <= zext_ln179_reg_982_pp0_iter17_reg(8 - 1 downto 0);
    OUT_R_2_address1 <= zext_ln176_reg_886_pp0_iter17_reg(8 - 1 downto 0);

    OUT_R_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_2_ce0 <= ap_const_logic_1;
        else 
            OUT_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_2_ce1 <= ap_const_logic_1;
        else 
            OUT_R_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_2_d0 <= add_reg_1074;
    OUT_R_2_d1 <= sub_reg_1058;

    OUT_R_2_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, empty_reg_849_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (empty_reg_849_pp0_iter17_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_2_we0 <= ap_const_logic_1;
        else 
            OUT_R_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_2_we1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, trunc_ln850_reg_855_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_2_we1 <= ap_const_logic_1;
        else 
            OUT_R_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_3_address0 <= zext_ln179_reg_982_pp0_iter17_reg(8 - 1 downto 0);
    OUT_R_3_address1 <= zext_ln176_reg_886_pp0_iter17_reg(8 - 1 downto 0);

    OUT_R_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_3_ce0 <= ap_const_logic_1;
        else 
            OUT_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_3_ce1 <= ap_const_logic_1;
        else 
            OUT_R_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    OUT_R_3_d0 <= add_reg_1074;
    OUT_R_3_d1 <= sub_reg_1058;

    OUT_R_3_we0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, empty_reg_849_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (empty_reg_849_pp0_iter17_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_3_we0 <= ap_const_logic_1;
        else 
            OUT_R_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    OUT_R_3_we1_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001, trunc_ln850_reg_855_pp0_iter17_reg)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            OUT_R_3_we1 <= ap_const_logic_1;
        else 
            OUT_R_3_we1 <= ap_const_logic_0;
        end if; 
    end process;

    W_imag_address0 <= zext_ln1540_fu_726_p1(9 - 1 downto 0);

    W_imag_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            W_imag_ce0 <= ap_const_logic_1;
        else 
            W_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_real_address0 <= zext_ln1540_fu_726_p1(9 - 1 downto 0);

    W_real_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            W_real_ce0 <= ap_const_logic_1;
        else 
            W_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_0_address0 <= zext_ln179_fu_768_p1(8 - 1 downto 0);
    X_I_0_address1 <= zext_ln176_fu_731_p1(8 - 1 downto 0);

    X_I_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_I_0_ce0 <= ap_const_logic_1;
        else 
            X_I_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_I_0_ce1 <= ap_const_logic_1;
        else 
            X_I_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_1_address0 <= zext_ln179_fu_768_p1(8 - 1 downto 0);
    X_I_1_address1 <= zext_ln176_fu_731_p1(8 - 1 downto 0);

    X_I_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_I_1_ce0 <= ap_const_logic_1;
        else 
            X_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_I_1_ce1 <= ap_const_logic_1;
        else 
            X_I_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_2_address0 <= zext_ln179_fu_768_p1(8 - 1 downto 0);
    X_I_2_address1 <= zext_ln176_fu_731_p1(8 - 1 downto 0);

    X_I_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_I_2_ce0 <= ap_const_logic_1;
        else 
            X_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_I_2_ce1 <= ap_const_logic_1;
        else 
            X_I_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_3_address0 <= zext_ln179_fu_768_p1(8 - 1 downto 0);
    X_I_3_address1 <= zext_ln176_fu_731_p1(8 - 1 downto 0);

    X_I_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_I_3_ce0 <= ap_const_logic_1;
        else 
            X_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_I_3_ce1 <= ap_const_logic_1;
        else 
            X_I_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_0_address0 <= zext_ln179_fu_768_p1(8 - 1 downto 0);
    X_R_0_address1 <= zext_ln176_fu_731_p1(8 - 1 downto 0);

    X_R_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_R_0_ce0 <= ap_const_logic_1;
        else 
            X_R_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_R_0_ce1 <= ap_const_logic_1;
        else 
            X_R_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_1_address0 <= zext_ln179_fu_768_p1(8 - 1 downto 0);
    X_R_1_address1 <= zext_ln176_fu_731_p1(8 - 1 downto 0);

    X_R_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_R_1_ce0 <= ap_const_logic_1;
        else 
            X_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_R_1_ce1 <= ap_const_logic_1;
        else 
            X_R_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_2_address0 <= zext_ln179_fu_768_p1(8 - 1 downto 0);
    X_R_2_address1 <= zext_ln176_fu_731_p1(8 - 1 downto 0);

    X_R_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_R_2_ce0 <= ap_const_logic_1;
        else 
            X_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_R_2_ce1 <= ap_const_logic_1;
        else 
            X_R_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_3_address0 <= zext_ln179_fu_768_p1(8 - 1 downto 0);
    X_R_3_address1 <= zext_ln176_fu_731_p1(8 - 1 downto 0);

    X_R_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_R_3_ce0 <= ap_const_logic_1;
        else 
            X_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            X_R_3_ce1 <= ap_const_logic_1;
        else 
            X_R_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln184_fu_666_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(zext_ln157_cast_fu_598_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);

    ap_block_pp0_assign_proc : process(ap_CS_fsm, ap_block_pp0_stage0_subdone)
    begin
                ap_block_pp0 <= ((ap_ST_fsm_pp0_stage0 = ap_CS_fsm) and (ap_const_boolean_1 = ap_block_pp0_stage0_subdone));
    end process;

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln169_fu_624_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln169_fu_624_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter17_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter17_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_enable_operation_170_assign_proc : process(trunc_ln850_reg_855_pp0_iter17_reg)
    begin
                ap_enable_operation_170 <= (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_2);
    end process;


    ap_enable_operation_172_assign_proc : process(trunc_ln850_reg_855_pp0_iter17_reg)
    begin
                ap_enable_operation_172 <= (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_2);
    end process;


    ap_enable_operation_174_assign_proc : process(trunc_ln850_reg_855_pp0_iter17_reg)
    begin
                ap_enable_operation_174 <= (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_1);
    end process;


    ap_enable_operation_176_assign_proc : process(trunc_ln850_reg_855_pp0_iter17_reg)
    begin
                ap_enable_operation_176 <= (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_1);
    end process;


    ap_enable_operation_178_assign_proc : process(trunc_ln850_reg_855_pp0_iter17_reg)
    begin
                ap_enable_operation_178 <= (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_0);
    end process;


    ap_enable_operation_180_assign_proc : process(trunc_ln850_reg_855_pp0_iter17_reg)
    begin
                ap_enable_operation_180 <= (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_0);
    end process;


    ap_enable_operation_182_assign_proc : process(trunc_ln850_reg_855_pp0_iter17_reg)
    begin
                ap_enable_operation_182 <= (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_3);
    end process;


    ap_enable_operation_184_assign_proc : process(trunc_ln850_reg_855_pp0_iter17_reg)
    begin
                ap_enable_operation_184 <= (trunc_ln850_reg_855_pp0_iter17_reg = ap_const_lv2_3);
    end process;


    ap_enable_operation_190_assign_proc : process(empty_reg_849_pp0_iter17_reg)
    begin
                ap_enable_operation_190 <= (empty_reg_849_pp0_iter17_reg = ap_const_lv2_2);
    end process;


    ap_enable_operation_192_assign_proc : process(empty_reg_849_pp0_iter17_reg)
    begin
                ap_enable_operation_192 <= (empty_reg_849_pp0_iter17_reg = ap_const_lv2_2);
    end process;


    ap_enable_operation_194_assign_proc : process(empty_reg_849_pp0_iter17_reg)
    begin
                ap_enable_operation_194 <= (empty_reg_849_pp0_iter17_reg = ap_const_lv2_1);
    end process;


    ap_enable_operation_196_assign_proc : process(empty_reg_849_pp0_iter17_reg)
    begin
                ap_enable_operation_196 <= (empty_reg_849_pp0_iter17_reg = ap_const_lv2_1);
    end process;


    ap_enable_operation_198_assign_proc : process(empty_reg_849_pp0_iter17_reg)
    begin
                ap_enable_operation_198 <= (empty_reg_849_pp0_iter17_reg = ap_const_lv2_0);
    end process;


    ap_enable_operation_200_assign_proc : process(empty_reg_849_pp0_iter17_reg)
    begin
                ap_enable_operation_200 <= (empty_reg_849_pp0_iter17_reg = ap_const_lv2_0);
    end process;


    ap_enable_operation_202_assign_proc : process(empty_reg_849_pp0_iter17_reg)
    begin
                ap_enable_operation_202 <= (empty_reg_849_pp0_iter17_reg = ap_const_lv2_3);
    end process;


    ap_enable_operation_204_assign_proc : process(empty_reg_849_pp0_iter17_reg)
    begin
                ap_enable_operation_204 <= (empty_reg_849_pp0_iter17_reg = ap_const_lv2_3);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_enable_state19_pp0_iter18_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18)
    begin
                ap_enable_state19_pp0_iter18_stage0 <= ((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, p_Val2_s_fu_94, i_2_fu_715_p2, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((ap_loop_init = ap_const_logic_1)) then 
                ap_sig_allocacmp_i_3 <= ap_const_lv32_0;
            elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                ap_sig_allocacmp_i_3 <= i_2_fu_715_p2;
            else 
                ap_sig_allocacmp_i_3 <= p_Val2_s_fu_94;
            end if;
        else 
            ap_sig_allocacmp_i_3 <= p_Val2_s_fu_94;
        end if; 
    end process;

    empty_fu_672_p1 <= i_3_reg_822(2 - 1 downto 0);
    i_2_fu_715_p2 <= std_logic_vector(unsigned(i_fu_710_p3) + unsigned(ap_const_lv32_1));
    i_fu_710_p3 <= 
        add_ln184_reg_844 when (icmp_ln1065_reg_839(0) = '1') else 
        i_3_reg_822;
    icmp_ln1065_fu_660_p2 <= "1" when (lhs_fu_650_p2 = zext_ln160_cast_fu_602_p1) else "0";
    icmp_ln169_fu_624_p2 <= "1" when (signed(tmp_4_fu_614_p4) < signed(ap_const_lv22_1)) else "0";
    lhs_fu_650_p2 <= (lshr_ln674_fu_644_p2 and ap_sig_allocacmp_i_3);
    lshr_ln674_fu_644_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv32_FFFFFFFF),to_integer(unsigned('0' & zext_ln674_1_fu_640_p1(31-1 downto 0)))));
    
    p_Result_s_fu_675_p4_proc : process(i_3_reg_822, sub3_cast_cast_reg_817)
    begin
        p_Result_s_fu_675_p4 <= i_3_reg_822;
        if to_integer(unsigned(sub3_cast_cast_reg_817)) >= i_3_reg_822'low and to_integer(unsigned(sub3_cast_cast_reg_817)) <= i_3_reg_822'high then
            p_Result_s_fu_675_p4(to_integer(unsigned(sub3_cast_cast_reg_817))) <= ap_const_lv1_1(0);
        end if;
    end process;

    sub3_cast_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub3_cast),32));
    tmp_4_fu_614_p4 <= ap_sig_allocacmp_i_3(31 downto 10);
    trunc_ln1540_fu_656_p1 <= lhs_fu_650_p2(9 - 1 downto 0);
    trunc_ln850_fu_683_p1 <= p_Result_s_fu_675_p4(2 - 1 downto 0);
    xor_ln674_fu_634_p2 <= (zext_ln674_fu_630_p1 xor ap_const_lv6_1F);
    zext_ln1540_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_861),64));
    zext_ln157_cast_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln157),32));
    zext_ln160_cast_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln160),32));
    zext_ln176_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_866),64));
    zext_ln179_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_reg_871_pp0_iter10_reg),64));
    zext_ln674_1_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln674_fu_634_p2),32));
    zext_ln674_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub5_cast),6));
end behav;
