-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft_fft_Pipeline_Reverse is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_0_ce0 : OUT STD_LOGIC;
    X_R_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_0_ce1 : OUT STD_LOGIC;
    X_R_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_1_ce0 : OUT STD_LOGIC;
    X_R_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_1_ce1 : OUT STD_LOGIC;
    X_R_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_2_ce0 : OUT STD_LOGIC;
    X_R_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_2_ce1 : OUT STD_LOGIC;
    X_R_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_3_ce0 : OUT STD_LOGIC;
    X_R_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_R_3_ce1 : OUT STD_LOGIC;
    X_R_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage0_R_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_R_1_ce0 : OUT STD_LOGIC;
    Stage0_R_1_we0 : OUT STD_LOGIC;
    Stage0_R_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage0_R_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_R_3_ce0 : OUT STD_LOGIC;
    Stage0_R_3_we0 : OUT STD_LOGIC;
    Stage0_R_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage0_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_I_1_ce0 : OUT STD_LOGIC;
    Stage0_I_1_we0 : OUT STD_LOGIC;
    Stage0_I_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_0_ce0 : OUT STD_LOGIC;
    X_I_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_0_ce1 : OUT STD_LOGIC;
    X_I_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_1_ce0 : OUT STD_LOGIC;
    X_I_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_1_ce1 : OUT STD_LOGIC;
    X_I_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_2_ce0 : OUT STD_LOGIC;
    X_I_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_2_ce1 : OUT STD_LOGIC;
    X_I_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_3_ce0 : OUT STD_LOGIC;
    X_I_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    X_I_3_ce1 : OUT STD_LOGIC;
    X_I_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Stage0_R_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_R_ce0 : OUT STD_LOGIC;
    Stage0_R_we0 : OUT STD_LOGIC;
    Stage0_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage0_R_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_R_2_ce0 : OUT STD_LOGIC;
    Stage0_R_2_we0 : OUT STD_LOGIC;
    Stage0_R_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage0_I_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_I_ce0 : OUT STD_LOGIC;
    Stage0_I_we0 : OUT STD_LOGIC;
    Stage0_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage0_I_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_I_2_ce0 : OUT STD_LOGIC;
    Stage0_I_2_we0 : OUT STD_LOGIC;
    Stage0_I_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Stage0_I_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    Stage0_I_3_ce0 : OUT STD_LOGIC;
    Stage0_I_3_we0 : OUT STD_LOGIC;
    Stage0_I_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft_fft_Pipeline_Reverse is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_6_fu_404_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln_fu_412_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln_reg_633 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln_reg_661 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_reg_661_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln111_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_666 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln111_reg_666_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_511_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_730 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_540_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_569_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_598_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln111_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln111_2_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_1_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_fu_88 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln107_fu_484_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_temp_2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln111_1_fu_422_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln111_fu_454_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln111_1_cast_fu_464_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_511_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_511_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_511_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_511_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_540_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_540_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_540_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_569_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_569_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_598_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_598_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_598_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_598_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft_mux_42_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_42_32_1_1_U1 : component fft_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_fu_511_p1,
        din1 => tmp_fu_511_p2,
        din2 => tmp_fu_511_p3,
        din3 => tmp_fu_511_p4,
        din4 => or_ln_reg_633,
        dout => tmp_fu_511_p6);

    mux_42_32_1_1_U2 : component fft_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_4_fu_540_p1,
        din1 => tmp_4_fu_540_p2,
        din2 => tmp_4_fu_540_p3,
        din3 => tmp_4_fu_540_p4,
        din4 => or_ln_reg_633,
        dout => tmp_4_fu_540_p6);

    mux_42_32_1_1_U3 : component fft_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_s_fu_569_p1,
        din1 => tmp_s_fu_569_p2,
        din2 => tmp_s_fu_569_p3,
        din3 => tmp_s_fu_569_p4,
        din4 => or_ln_reg_633,
        dout => tmp_s_fu_569_p6);

    mux_42_32_1_1_U4 : component fft_mux_42_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_1_fu_598_p1,
        din1 => tmp_1_fu_598_p2,
        din2 => tmp_1_fu_598_p3,
        din3 => tmp_1_fu_598_p4,
        din4 => or_ln_reg_633,
        dout => tmp_1_fu_598_p6);

    flow_control_loop_pipe_sequential_init_U : component fft_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    temp_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_6_fu_404_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    temp_fu_88 <= add_ln107_fu_484_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    temp_fu_88 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln111_reg_666_pp0_iter1_reg <= icmp_ln111_reg_666;
                lshr_ln_reg_661_pp0_iter1_reg <= lshr_ln_reg_661;
                tmp_1_reg_748 <= tmp_1_fu_598_p6;
                tmp_4_reg_736 <= tmp_4_fu_540_p6;
                tmp_reg_730 <= tmp_fu_511_p6;
                tmp_s_reg_742 <= tmp_s_fu_569_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_404_p3 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln111_reg_666 <= icmp_ln111_fu_458_p2;
                lshr_ln_reg_661 <= ap_sig_allocacmp_temp_2(9 downto 2);
                or_ln_reg_633 <= or_ln_fu_412_p4;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Stage0_I_1_address0 <= zext_ln111_1_fu_611_p1(8 - 1 downto 0);

    Stage0_I_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Stage0_I_1_ce0 <= ap_const_logic_1;
        else 
            Stage0_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_I_1_d0 <= tmp_1_reg_748;

    Stage0_I_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln111_reg_666_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln111_reg_666_pp0_iter1_reg = ap_const_lv1_1))) then 
            Stage0_I_1_we0 <= ap_const_logic_1;
        else 
            Stage0_I_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_I_2_address0 <= zext_ln111_1_fu_611_p1(8 - 1 downto 0);

    Stage0_I_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Stage0_I_2_ce0 <= ap_const_logic_1;
        else 
            Stage0_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_I_2_d0 <= tmp_4_reg_736;

    Stage0_I_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln111_reg_666_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln111_reg_666_pp0_iter1_reg = ap_const_lv1_0))) then 
            Stage0_I_2_we0 <= ap_const_logic_1;
        else 
            Stage0_I_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_I_3_address0 <= zext_ln111_1_fu_611_p1(8 - 1 downto 0);

    Stage0_I_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Stage0_I_3_ce0 <= ap_const_logic_1;
        else 
            Stage0_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_I_3_d0 <= tmp_1_reg_748;

    Stage0_I_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln111_reg_666_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln111_reg_666_pp0_iter1_reg = ap_const_lv1_0))) then 
            Stage0_I_3_we0 <= ap_const_logic_1;
        else 
            Stage0_I_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_I_address0 <= zext_ln111_1_fu_611_p1(8 - 1 downto 0);

    Stage0_I_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Stage0_I_ce0 <= ap_const_logic_1;
        else 
            Stage0_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_I_d0 <= tmp_4_reg_736;

    Stage0_I_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln111_reg_666_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln111_reg_666_pp0_iter1_reg = ap_const_lv1_1))) then 
            Stage0_I_we0 <= ap_const_logic_1;
        else 
            Stage0_I_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_R_1_address0 <= zext_ln111_1_fu_611_p1(8 - 1 downto 0);

    Stage0_R_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Stage0_R_1_ce0 <= ap_const_logic_1;
        else 
            Stage0_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_R_1_d0 <= tmp_s_reg_742;

    Stage0_R_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln111_reg_666_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln111_reg_666_pp0_iter1_reg = ap_const_lv1_1))) then 
            Stage0_R_1_we0 <= ap_const_logic_1;
        else 
            Stage0_R_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_R_2_address0 <= zext_ln111_1_fu_611_p1(8 - 1 downto 0);

    Stage0_R_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Stage0_R_2_ce0 <= ap_const_logic_1;
        else 
            Stage0_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_R_2_d0 <= tmp_reg_730;

    Stage0_R_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln111_reg_666_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln111_reg_666_pp0_iter1_reg = ap_const_lv1_0))) then 
            Stage0_R_2_we0 <= ap_const_logic_1;
        else 
            Stage0_R_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_R_3_address0 <= zext_ln111_1_fu_611_p1(8 - 1 downto 0);

    Stage0_R_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Stage0_R_3_ce0 <= ap_const_logic_1;
        else 
            Stage0_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_R_3_d0 <= tmp_s_reg_742;

    Stage0_R_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln111_reg_666_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln111_reg_666_pp0_iter1_reg = ap_const_lv1_0))) then 
            Stage0_R_3_we0 <= ap_const_logic_1;
        else 
            Stage0_R_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_R_address0 <= zext_ln111_1_fu_611_p1(8 - 1 downto 0);

    Stage0_R_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            Stage0_R_ce0 <= ap_const_logic_1;
        else 
            Stage0_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Stage0_R_d0 <= tmp_reg_730;

    Stage0_R_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln111_reg_666_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln111_reg_666_pp0_iter1_reg = ap_const_lv1_1))) then 
            Stage0_R_we0 <= ap_const_logic_1;
        else 
            Stage0_R_we0 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_0_address0 <= zext_ln111_2_fu_472_p1(8 - 1 downto 0);
    X_I_0_address1 <= zext_ln111_fu_432_p1(8 - 1 downto 0);

    X_I_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_0_ce0 <= ap_const_logic_1;
        else 
            X_I_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_0_ce1 <= ap_const_logic_1;
        else 
            X_I_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_1_address0 <= zext_ln111_2_fu_472_p1(8 - 1 downto 0);
    X_I_1_address1 <= zext_ln111_fu_432_p1(8 - 1 downto 0);

    X_I_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_1_ce0 <= ap_const_logic_1;
        else 
            X_I_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_1_ce1 <= ap_const_logic_1;
        else 
            X_I_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_2_address0 <= zext_ln111_2_fu_472_p1(8 - 1 downto 0);
    X_I_2_address1 <= zext_ln111_fu_432_p1(8 - 1 downto 0);

    X_I_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_2_ce0 <= ap_const_logic_1;
        else 
            X_I_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_2_ce1 <= ap_const_logic_1;
        else 
            X_I_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_I_3_address0 <= zext_ln111_2_fu_472_p1(8 - 1 downto 0);
    X_I_3_address1 <= zext_ln111_fu_432_p1(8 - 1 downto 0);

    X_I_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_3_ce0 <= ap_const_logic_1;
        else 
            X_I_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_I_3_ce1 <= ap_const_logic_1;
        else 
            X_I_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_0_address0 <= zext_ln111_2_fu_472_p1(8 - 1 downto 0);
    X_R_0_address1 <= zext_ln111_fu_432_p1(8 - 1 downto 0);

    X_R_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_0_ce0 <= ap_const_logic_1;
        else 
            X_R_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_0_ce1 <= ap_const_logic_1;
        else 
            X_R_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_1_address0 <= zext_ln111_2_fu_472_p1(8 - 1 downto 0);
    X_R_1_address1 <= zext_ln111_fu_432_p1(8 - 1 downto 0);

    X_R_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_1_ce0 <= ap_const_logic_1;
        else 
            X_R_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_1_ce1 <= ap_const_logic_1;
        else 
            X_R_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_2_address0 <= zext_ln111_2_fu_472_p1(8 - 1 downto 0);
    X_R_2_address1 <= zext_ln111_fu_432_p1(8 - 1 downto 0);

    X_R_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_2_ce0 <= ap_const_logic_1;
        else 
            X_R_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_2_ce1 <= ap_const_logic_1;
        else 
            X_R_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    X_R_3_address0 <= zext_ln111_2_fu_472_p1(8 - 1 downto 0);
    X_R_3_address1 <= zext_ln111_fu_432_p1(8 - 1 downto 0);

    X_R_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_3_ce0 <= ap_const_logic_1;
        else 
            X_R_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            X_R_3_ce1 <= ap_const_logic_1;
        else 
            X_R_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln107_fu_484_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_temp_2) + unsigned(ap_const_lv11_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_6_fu_404_p3)
    begin
        if (((tmp_6_fu_404_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_temp_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, temp_fu_88, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_temp_2 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_temp_2 <= temp_fu_88;
        end if; 
    end process;

    icmp_ln111_fu_458_p2 <= "1" when (trunc_ln111_fu_454_p1 = ap_const_lv2_0) else "0";
    
    or_ln111_1_fu_422_p4_proc : process(ap_sig_allocacmp_temp_2)
    variable vlo_cpy : STD_LOGIC_VECTOR(11+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(11+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable or_ln111_1_fu_422_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(11 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_7(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_1(4 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_temp_2;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(11-1-unsigned(ap_const_lv32_1(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(11-1-unsigned(ap_const_lv32_7(4-1 downto 0)));
            for or_ln111_1_fu_422_p4_i in 0 to 11-1 loop
                v0_cpy(or_ln111_1_fu_422_p4_i) := ap_sig_allocacmp_temp_2(11-1-or_ln111_1_fu_422_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(11-1 downto 0)))));
        res_mask := res_mask(11-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        or_ln111_1_fu_422_p4 <= resvalue(7-1 downto 0);
    end process;

    
    or_ln_fu_412_p4_proc : process(ap_sig_allocacmp_temp_2)
    variable vlo_cpy : STD_LOGIC_VECTOR(11+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(11+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable or_ln_fu_412_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(11 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(11 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_9(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_8(4 - 1 downto 0);
        v0_cpy := ap_sig_allocacmp_temp_2;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(11-1-unsigned(ap_const_lv32_8(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(11-1-unsigned(ap_const_lv32_9(4-1 downto 0)));
            for or_ln_fu_412_p4_i in 0 to 11-1 loop
                v0_cpy(or_ln_fu_412_p4_i) := ap_sig_allocacmp_temp_2(11-1-or_ln_fu_412_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(11-1 downto 0)))));
        res_mask := res_mask(11-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        or_ln_fu_412_p4 <= resvalue(2-1 downto 0);
    end process;

    tmp_1_fu_598_p1 <= X_I_0_q0;
    tmp_1_fu_598_p2 <= X_I_1_q0;
    tmp_1_fu_598_p3 <= X_I_2_q0;
    tmp_1_fu_598_p4 <= X_I_3_q0;
    tmp_4_fu_540_p1 <= X_I_0_q1;
    tmp_4_fu_540_p2 <= X_I_1_q1;
    tmp_4_fu_540_p3 <= X_I_2_q1;
    tmp_4_fu_540_p4 <= X_I_3_q1;
    tmp_6_fu_404_p3 <= ap_sig_allocacmp_temp_2(10 downto 10);
    tmp_fu_511_p1 <= X_R_0_q1;
    tmp_fu_511_p2 <= X_R_1_q1;
    tmp_fu_511_p3 <= X_R_2_q1;
    tmp_fu_511_p4 <= X_R_3_q1;
    tmp_s_fu_569_p1 <= X_R_0_q0;
    tmp_s_fu_569_p2 <= X_R_1_q0;
    tmp_s_fu_569_p3 <= X_R_2_q0;
    tmp_s_fu_569_p4 <= X_R_3_q0;
    trunc_ln111_fu_454_p1 <= ap_sig_allocacmp_temp_2(2 - 1 downto 0);
    zext_ln111_1_cast_fu_464_p3 <= (ap_const_lv1_1 & or_ln111_1_fu_422_p4);
    zext_ln111_1_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_661_pp0_iter1_reg),64));
    zext_ln111_2_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln111_1_cast_fu_464_p3),64));
    zext_ln111_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln111_1_fu_422_p4),64));
end behav;
