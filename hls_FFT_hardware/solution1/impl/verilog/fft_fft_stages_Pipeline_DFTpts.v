// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft_fft_stages_Pipeline_DFTpts (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln160,
        zext_ln157,
        OUT_I_0_address0,
        OUT_I_0_ce0,
        OUT_I_0_we0,
        OUT_I_0_d0,
        OUT_I_0_address1,
        OUT_I_0_ce1,
        OUT_I_0_we1,
        OUT_I_0_d1,
        OUT_R_0_address0,
        OUT_R_0_ce0,
        OUT_R_0_we0,
        OUT_R_0_d0,
        OUT_R_0_address1,
        OUT_R_0_ce1,
        OUT_R_0_we1,
        OUT_R_0_d1,
        OUT_R_1_address0,
        OUT_R_1_ce0,
        OUT_R_1_we0,
        OUT_R_1_d0,
        OUT_R_1_address1,
        OUT_R_1_ce1,
        OUT_R_1_we1,
        OUT_R_1_d1,
        OUT_R_2_address0,
        OUT_R_2_ce0,
        OUT_R_2_we0,
        OUT_R_2_d0,
        OUT_R_2_address1,
        OUT_R_2_ce1,
        OUT_R_2_we1,
        OUT_R_2_d1,
        OUT_R_3_address0,
        OUT_R_3_ce0,
        OUT_R_3_we0,
        OUT_R_3_d0,
        OUT_R_3_address1,
        OUT_R_3_ce1,
        OUT_R_3_we1,
        OUT_R_3_d1,
        sub3_cast,
        sub5_cast,
        trunc_ln,
        X_R_0_address0,
        X_R_0_ce0,
        X_R_0_q0,
        X_R_0_address1,
        X_R_0_ce1,
        X_R_0_q1,
        X_R_1_address0,
        X_R_1_ce0,
        X_R_1_q0,
        X_R_1_address1,
        X_R_1_ce1,
        X_R_1_q1,
        X_R_2_address0,
        X_R_2_ce0,
        X_R_2_q0,
        X_R_2_address1,
        X_R_2_ce1,
        X_R_2_q1,
        X_R_3_address0,
        X_R_3_ce0,
        X_R_3_q0,
        X_R_3_address1,
        X_R_3_ce1,
        X_R_3_q1,
        X_I_0_address0,
        X_I_0_ce0,
        X_I_0_q0,
        X_I_0_address1,
        X_I_0_ce1,
        X_I_0_q1,
        X_I_1_address0,
        X_I_1_ce0,
        X_I_1_q0,
        X_I_1_address1,
        X_I_1_ce1,
        X_I_1_q1,
        X_I_2_address0,
        X_I_2_ce0,
        X_I_2_q0,
        X_I_2_address1,
        X_I_2_ce1,
        X_I_2_q1,
        X_I_3_address0,
        X_I_3_ce0,
        X_I_3_q0,
        X_I_3_address1,
        X_I_3_ce1,
        X_I_3_q1,
        OUT_I_1_address0,
        OUT_I_1_ce0,
        OUT_I_1_we0,
        OUT_I_1_d0,
        OUT_I_1_address1,
        OUT_I_1_ce1,
        OUT_I_1_we1,
        OUT_I_1_d1,
        OUT_I_2_address0,
        OUT_I_2_ce0,
        OUT_I_2_we0,
        OUT_I_2_d0,
        OUT_I_2_address1,
        OUT_I_2_ce1,
        OUT_I_2_we1,
        OUT_I_2_d1,
        OUT_I_3_address0,
        OUT_I_3_ce0,
        OUT_I_3_we0,
        OUT_I_3_d0,
        OUT_I_3_address1,
        OUT_I_3_ce1,
        OUT_I_3_we1,
        OUT_I_3_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [8:0] zext_ln160;
input  [8:0] zext_ln157;
output  [7:0] OUT_I_0_address0;
output   OUT_I_0_ce0;
output   OUT_I_0_we0;
output  [31:0] OUT_I_0_d0;
output  [7:0] OUT_I_0_address1;
output   OUT_I_0_ce1;
output   OUT_I_0_we1;
output  [31:0] OUT_I_0_d1;
output  [7:0] OUT_R_0_address0;
output   OUT_R_0_ce0;
output   OUT_R_0_we0;
output  [31:0] OUT_R_0_d0;
output  [7:0] OUT_R_0_address1;
output   OUT_R_0_ce1;
output   OUT_R_0_we1;
output  [31:0] OUT_R_0_d1;
output  [7:0] OUT_R_1_address0;
output   OUT_R_1_ce0;
output   OUT_R_1_we0;
output  [31:0] OUT_R_1_d0;
output  [7:0] OUT_R_1_address1;
output   OUT_R_1_ce1;
output   OUT_R_1_we1;
output  [31:0] OUT_R_1_d1;
output  [7:0] OUT_R_2_address0;
output   OUT_R_2_ce0;
output   OUT_R_2_we0;
output  [31:0] OUT_R_2_d0;
output  [7:0] OUT_R_2_address1;
output   OUT_R_2_ce1;
output   OUT_R_2_we1;
output  [31:0] OUT_R_2_d1;
output  [7:0] OUT_R_3_address0;
output   OUT_R_3_ce0;
output   OUT_R_3_we0;
output  [31:0] OUT_R_3_d0;
output  [7:0] OUT_R_3_address1;
output   OUT_R_3_ce1;
output   OUT_R_3_we1;
output  [31:0] OUT_R_3_d1;
input  [3:0] sub3_cast;
input  [3:0] sub5_cast;
input  [8:0] trunc_ln;
output  [7:0] X_R_0_address0;
output   X_R_0_ce0;
input  [31:0] X_R_0_q0;
output  [7:0] X_R_0_address1;
output   X_R_0_ce1;
input  [31:0] X_R_0_q1;
output  [7:0] X_R_1_address0;
output   X_R_1_ce0;
input  [31:0] X_R_1_q0;
output  [7:0] X_R_1_address1;
output   X_R_1_ce1;
input  [31:0] X_R_1_q1;
output  [7:0] X_R_2_address0;
output   X_R_2_ce0;
input  [31:0] X_R_2_q0;
output  [7:0] X_R_2_address1;
output   X_R_2_ce1;
input  [31:0] X_R_2_q1;
output  [7:0] X_R_3_address0;
output   X_R_3_ce0;
input  [31:0] X_R_3_q0;
output  [7:0] X_R_3_address1;
output   X_R_3_ce1;
input  [31:0] X_R_3_q1;
output  [7:0] X_I_0_address0;
output   X_I_0_ce0;
input  [31:0] X_I_0_q0;
output  [7:0] X_I_0_address1;
output   X_I_0_ce1;
input  [31:0] X_I_0_q1;
output  [7:0] X_I_1_address0;
output   X_I_1_ce0;
input  [31:0] X_I_1_q0;
output  [7:0] X_I_1_address1;
output   X_I_1_ce1;
input  [31:0] X_I_1_q1;
output  [7:0] X_I_2_address0;
output   X_I_2_ce0;
input  [31:0] X_I_2_q0;
output  [7:0] X_I_2_address1;
output   X_I_2_ce1;
input  [31:0] X_I_2_q1;
output  [7:0] X_I_3_address0;
output   X_I_3_ce0;
input  [31:0] X_I_3_q0;
output  [7:0] X_I_3_address1;
output   X_I_3_ce1;
input  [31:0] X_I_3_q1;
output  [7:0] OUT_I_1_address0;
output   OUT_I_1_ce0;
output   OUT_I_1_we0;
output  [31:0] OUT_I_1_d0;
output  [7:0] OUT_I_1_address1;
output   OUT_I_1_ce1;
output   OUT_I_1_we1;
output  [31:0] OUT_I_1_d1;
output  [7:0] OUT_I_2_address0;
output   OUT_I_2_ce0;
output   OUT_I_2_we0;
output  [31:0] OUT_I_2_d0;
output  [7:0] OUT_I_2_address1;
output   OUT_I_2_ce1;
output   OUT_I_2_we1;
output  [31:0] OUT_I_2_d1;
output  [7:0] OUT_I_3_address0;
output   OUT_I_3_ce0;
output   OUT_I_3_we0;
output  [31:0] OUT_I_3_d0;
output  [7:0] OUT_I_3_address1;
output   OUT_I_3_ce1;
output   OUT_I_3_we1;
output  [31:0] OUT_I_3_d1;

reg ap_idle;
reg OUT_I_0_ce0;
reg OUT_I_0_we0;
reg OUT_I_0_ce1;
reg OUT_I_0_we1;
reg OUT_R_0_ce0;
reg OUT_R_0_we0;
reg OUT_R_0_ce1;
reg OUT_R_0_we1;
reg OUT_R_1_ce0;
reg OUT_R_1_we0;
reg OUT_R_1_ce1;
reg OUT_R_1_we1;
reg OUT_R_2_ce0;
reg OUT_R_2_we0;
reg OUT_R_2_ce1;
reg OUT_R_2_we1;
reg OUT_R_3_ce0;
reg OUT_R_3_we0;
reg OUT_R_3_ce1;
reg OUT_R_3_we1;
reg X_R_0_ce0;
reg X_R_0_ce1;
reg X_R_1_ce0;
reg X_R_1_ce1;
reg X_R_2_ce0;
reg X_R_2_ce1;
reg X_R_3_ce0;
reg X_R_3_ce1;
reg X_I_0_ce0;
reg X_I_0_ce1;
reg X_I_1_ce0;
reg X_I_1_ce1;
reg X_I_2_ce0;
reg X_I_2_ce1;
reg X_I_3_ce0;
reg X_I_3_ce1;
reg OUT_I_1_ce0;
reg OUT_I_1_we0;
reg OUT_I_1_ce1;
reg OUT_I_1_we1;
reg OUT_I_2_ce0;
reg OUT_I_2_we0;
reg OUT_I_2_ce1;
reg OUT_I_2_we1;
reg OUT_I_3_ce0;
reg OUT_I_3_we0;
reg OUT_I_3_ce1;
reg OUT_I_3_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln169_fu_624_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [8:0] W_real_address0;
reg    W_real_ce0;
wire   [31:0] W_real_q0;
wire   [8:0] W_imag_address0;
reg    W_imag_ce0;
wire   [31:0] W_imag_q0;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] sub3_cast_cast_fu_594_p1;
reg   [31:0] sub3_cast_cast_reg_817;
reg   [31:0] i_3_reg_822;
wire  signed [8:0] trunc_ln1540_fu_656_p1;
reg  signed [8:0] trunc_ln1540_reg_834;
wire   [0:0] icmp_ln1065_fu_660_p2;
reg   [0:0] icmp_ln1065_reg_839;
wire   [31:0] add_ln184_fu_666_p2;
reg   [31:0] add_ln184_reg_844;
wire   [1:0] empty_fu_672_p1;
reg   [1:0] empty_reg_849;
reg   [1:0] empty_reg_849_pp0_iter2_reg;
reg   [1:0] empty_reg_849_pp0_iter3_reg;
reg   [1:0] empty_reg_849_pp0_iter4_reg;
reg   [1:0] empty_reg_849_pp0_iter5_reg;
reg   [1:0] empty_reg_849_pp0_iter6_reg;
reg   [1:0] empty_reg_849_pp0_iter7_reg;
reg   [1:0] empty_reg_849_pp0_iter8_reg;
reg   [1:0] empty_reg_849_pp0_iter9_reg;
reg   [1:0] empty_reg_849_pp0_iter10_reg;
reg   [1:0] empty_reg_849_pp0_iter11_reg;
reg   [1:0] empty_reg_849_pp0_iter12_reg;
reg   [1:0] empty_reg_849_pp0_iter13_reg;
reg   [1:0] empty_reg_849_pp0_iter14_reg;
reg   [1:0] empty_reg_849_pp0_iter15_reg;
reg   [1:0] empty_reg_849_pp0_iter16_reg;
reg   [1:0] empty_reg_849_pp0_iter17_reg;
wire   [1:0] trunc_ln850_fu_683_p1;
reg   [1:0] trunc_ln850_reg_855;
reg   [1:0] trunc_ln850_reg_855_pp0_iter2_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter3_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter4_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter5_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter6_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter7_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter8_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter9_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter10_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter11_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter12_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter13_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter14_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter15_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter16_reg;
reg   [1:0] trunc_ln850_reg_855_pp0_iter17_reg;
wire   [8:0] ret_V_fu_687_p2;
reg   [8:0] ret_V_reg_861;
reg   [7:0] lshr_ln_reg_866;
reg   [7:0] lshr_ln1_reg_871;
reg   [7:0] lshr_ln1_reg_871_pp0_iter2_reg;
reg   [7:0] lshr_ln1_reg_871_pp0_iter3_reg;
reg   [7:0] lshr_ln1_reg_871_pp0_iter4_reg;
reg   [7:0] lshr_ln1_reg_871_pp0_iter5_reg;
reg   [7:0] lshr_ln1_reg_871_pp0_iter6_reg;
reg   [7:0] lshr_ln1_reg_871_pp0_iter7_reg;
reg   [7:0] lshr_ln1_reg_871_pp0_iter8_reg;
reg   [7:0] lshr_ln1_reg_871_pp0_iter9_reg;
reg   [7:0] lshr_ln1_reg_871_pp0_iter10_reg;
wire   [63:0] zext_ln176_fu_731_p1;
reg   [63:0] zext_ln176_reg_886;
reg   [63:0] zext_ln176_reg_886_pp0_iter3_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter4_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter5_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter6_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter7_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter8_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter9_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter10_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter11_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter12_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter13_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter14_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter15_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter16_reg;
reg   [63:0] zext_ln176_reg_886_pp0_iter17_reg;
reg   [31:0] c2_reg_938;
reg   [31:0] s2_reg_944;
wire   [31:0] tmp_fu_742_p6;
reg   [31:0] tmp_reg_950;
wire   [31:0] tmp_1_fu_755_p6;
reg   [31:0] tmp_1_reg_956;
wire   [31:0] grp_fu_578_p2;
reg   [31:0] mul_reg_962;
wire   [31:0] grp_fu_582_p2;
reg   [31:0] mul1_reg_967;
wire   [31:0] grp_fu_586_p2;
reg   [31:0] mul2_reg_972;
wire   [31:0] grp_fu_590_p2;
reg   [31:0] mul3_reg_977;
wire   [63:0] zext_ln179_fu_768_p1;
reg   [63:0] zext_ln179_reg_982;
reg   [63:0] zext_ln179_reg_982_pp0_iter12_reg;
reg   [63:0] zext_ln179_reg_982_pp0_iter13_reg;
reg   [63:0] zext_ln179_reg_982_pp0_iter14_reg;
reg   [63:0] zext_ln179_reg_982_pp0_iter15_reg;
reg   [63:0] zext_ln179_reg_982_pp0_iter16_reg;
reg   [63:0] zext_ln179_reg_982_pp0_iter17_reg;
wire   [31:0] grp_fu_554_p2;
reg   [31:0] temp_R_reg_1034;
wire   [31:0] grp_fu_558_p2;
reg   [31:0] temp_I_reg_1040;
wire   [31:0] tmp_2_fu_779_p6;
reg   [31:0] tmp_2_reg_1046;
wire   [31:0] tmp_3_fu_792_p6;
reg   [31:0] tmp_3_reg_1052;
wire   [31:0] grp_fu_562_p2;
reg   [31:0] sub_reg_1058;
wire   [31:0] grp_fu_566_p2;
reg   [31:0] sub1_reg_1066;
wire   [31:0] grp_fu_570_p2;
reg   [31:0] add_reg_1074;
wire   [31:0] grp_fu_574_p2;
reg   [31:0] add1_reg_1082;
wire   [63:0] zext_ln1540_fu_726_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] p_Val2_s_fu_94;
wire   [31:0] i_2_fu_715_p2;
reg   [31:0] ap_sig_allocacmp_i_3;
wire    ap_loop_init;
wire   [21:0] tmp_4_fu_614_p4;
wire   [5:0] zext_ln674_fu_630_p1;
wire   [5:0] xor_ln674_fu_634_p2;
wire   [31:0] zext_ln674_1_fu_640_p1;
wire   [31:0] lshr_ln674_fu_644_p2;
wire   [31:0] lhs_fu_650_p2;
wire   [31:0] zext_ln160_cast_fu_602_p1;
wire   [31:0] zext_ln157_cast_fu_598_p1;
reg   [31:0] p_Result_s_fu_675_p4;
wire   [31:0] i_fu_710_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg   [0:0] ap_NS_fsm;
reg    ap_block_pp0;
reg    ap_enable_operation_170;
reg    ap_enable_state19_pp0_iter18_stage0;
reg    ap_enable_operation_190;
reg    ap_enable_operation_172;
reg    ap_enable_operation_192;
reg    ap_enable_operation_174;
reg    ap_enable_operation_194;
reg    ap_enable_operation_176;
reg    ap_enable_operation_196;
reg    ap_enable_operation_178;
reg    ap_enable_operation_198;
reg    ap_enable_operation_180;
reg    ap_enable_operation_200;
reg    ap_enable_operation_182;
reg    ap_enable_operation_202;
reg    ap_enable_operation_184;
reg    ap_enable_operation_204;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft_fft_stages_Pipeline_DFTpts_W_real_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
W_real_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_real_address0),
    .ce0(W_real_ce0),
    .q0(W_real_q0)
);

fft_fft_stages_Pipeline_DFTpts_W_imag_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 512 ),
    .AddressWidth( 9 ))
W_imag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W_imag_address0),
    .ce0(W_imag_ce0),
    .q0(W_imag_q0)
);

fft_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U54(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul_reg_962),
    .din1(mul1_reg_967),
    .ce(1'b1),
    .dout(grp_fu_554_p2)
);

fft_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(mul2_reg_972),
    .din1(mul3_reg_977),
    .ce(1'b1),
    .dout(grp_fu_558_p2)
);

fft_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_1046),
    .din1(temp_R_reg_1034),
    .ce(1'b1),
    .dout(grp_fu_562_p2)
);

fft_fsub_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fsub_32ns_32ns_32_5_full_dsp_1_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_reg_1052),
    .din1(temp_I_reg_1040),
    .ce(1'b1),
    .dout(grp_fu_566_p2)
);

fft_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U58(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_reg_1046),
    .din1(temp_R_reg_1034),
    .ce(1'b1),
    .dout(grp_fu_570_p2)
);

fft_fadd_32ns_32ns_32_5_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_5_full_dsp_1_U59(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_reg_1052),
    .din1(temp_I_reg_1040),
    .ce(1'b1),
    .dout(grp_fu_574_p2)
);

fft_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U60(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_950),
    .din1(c2_reg_938),
    .ce(1'b1),
    .dout(grp_fu_578_p2)
);

fft_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U61(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_956),
    .din1(s2_reg_944),
    .ce(1'b1),
    .dout(grp_fu_582_p2)
);

fft_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U62(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_reg_956),
    .din1(c2_reg_938),
    .ce(1'b1),
    .dout(grp_fu_586_p2)
);

fft_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_950),
    .din1(s2_reg_944),
    .ce(1'b1),
    .dout(grp_fu_590_p2)
);

fft_mul_9s_9s_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 9 ))
mul_9s_9s_9_1_1_U64(
    .din0(trunc_ln1540_reg_834),
    .din1(trunc_ln),
    .dout(ret_V_fu_687_p2)
);

fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U65(
    .din0(X_R_0_q1),
    .din1(X_R_1_q1),
    .din2(X_R_2_q1),
    .din3(X_R_3_q1),
    .din4(trunc_ln850_reg_855_pp0_iter2_reg),
    .dout(tmp_fu_742_p6)
);

fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U66(
    .din0(X_I_0_q1),
    .din1(X_I_1_q1),
    .din2(X_I_2_q1),
    .din3(X_I_3_q1),
    .din4(trunc_ln850_reg_855_pp0_iter2_reg),
    .dout(tmp_1_fu_755_p6)
);

fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U67(
    .din0(X_R_0_q0),
    .din1(X_R_1_q0),
    .din2(X_R_2_q0),
    .din3(X_R_3_q0),
    .din4(empty_reg_849_pp0_iter11_reg),
    .dout(tmp_2_fu_779_p6)
);

fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
mux_42_32_1_1_U68(
    .din0(X_I_0_q0),
    .din1(X_I_1_q0),
    .din2(X_I_2_q0),
    .din3(X_I_3_q0),
    .din4(empty_reg_849_pp0_iter11_reg),
    .dout(tmp_3_fu_792_p6)
);

fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            p_Val2_s_fu_94 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_Val2_s_fu_94 <= i_2_fu_715_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add1_reg_1082 <= grp_fu_574_p2;
        add_reg_1074 <= grp_fu_570_p2;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        c2_reg_938 <= W_real_q0;
        empty_reg_849_pp0_iter10_reg <= empty_reg_849_pp0_iter9_reg;
        empty_reg_849_pp0_iter11_reg <= empty_reg_849_pp0_iter10_reg;
        empty_reg_849_pp0_iter12_reg <= empty_reg_849_pp0_iter11_reg;
        empty_reg_849_pp0_iter13_reg <= empty_reg_849_pp0_iter12_reg;
        empty_reg_849_pp0_iter14_reg <= empty_reg_849_pp0_iter13_reg;
        empty_reg_849_pp0_iter15_reg <= empty_reg_849_pp0_iter14_reg;
        empty_reg_849_pp0_iter16_reg <= empty_reg_849_pp0_iter15_reg;
        empty_reg_849_pp0_iter17_reg <= empty_reg_849_pp0_iter16_reg;
        empty_reg_849_pp0_iter2_reg <= empty_reg_849;
        empty_reg_849_pp0_iter3_reg <= empty_reg_849_pp0_iter2_reg;
        empty_reg_849_pp0_iter4_reg <= empty_reg_849_pp0_iter3_reg;
        empty_reg_849_pp0_iter5_reg <= empty_reg_849_pp0_iter4_reg;
        empty_reg_849_pp0_iter6_reg <= empty_reg_849_pp0_iter5_reg;
        empty_reg_849_pp0_iter7_reg <= empty_reg_849_pp0_iter6_reg;
        empty_reg_849_pp0_iter8_reg <= empty_reg_849_pp0_iter7_reg;
        empty_reg_849_pp0_iter9_reg <= empty_reg_849_pp0_iter8_reg;
        lshr_ln1_reg_871_pp0_iter10_reg <= lshr_ln1_reg_871_pp0_iter9_reg;
        lshr_ln1_reg_871_pp0_iter2_reg <= lshr_ln1_reg_871;
        lshr_ln1_reg_871_pp0_iter3_reg <= lshr_ln1_reg_871_pp0_iter2_reg;
        lshr_ln1_reg_871_pp0_iter4_reg <= lshr_ln1_reg_871_pp0_iter3_reg;
        lshr_ln1_reg_871_pp0_iter5_reg <= lshr_ln1_reg_871_pp0_iter4_reg;
        lshr_ln1_reg_871_pp0_iter6_reg <= lshr_ln1_reg_871_pp0_iter5_reg;
        lshr_ln1_reg_871_pp0_iter7_reg <= lshr_ln1_reg_871_pp0_iter6_reg;
        lshr_ln1_reg_871_pp0_iter8_reg <= lshr_ln1_reg_871_pp0_iter7_reg;
        lshr_ln1_reg_871_pp0_iter9_reg <= lshr_ln1_reg_871_pp0_iter8_reg;
        mul1_reg_967 <= grp_fu_582_p2;
        mul2_reg_972 <= grp_fu_586_p2;
        mul3_reg_977 <= grp_fu_590_p2;
        mul_reg_962 <= grp_fu_578_p2;
        s2_reg_944 <= W_imag_q0;
        sub1_reg_1066 <= grp_fu_566_p2;
        sub_reg_1058 <= grp_fu_562_p2;
        temp_I_reg_1040 <= grp_fu_558_p2;
        temp_R_reg_1034 <= grp_fu_554_p2;
        tmp_1_reg_956 <= tmp_1_fu_755_p6;
        tmp_2_reg_1046 <= tmp_2_fu_779_p6;
        tmp_3_reg_1052 <= tmp_3_fu_792_p6;
        tmp_reg_950 <= tmp_fu_742_p6;
        trunc_ln850_reg_855_pp0_iter10_reg <= trunc_ln850_reg_855_pp0_iter9_reg;
        trunc_ln850_reg_855_pp0_iter11_reg <= trunc_ln850_reg_855_pp0_iter10_reg;
        trunc_ln850_reg_855_pp0_iter12_reg <= trunc_ln850_reg_855_pp0_iter11_reg;
        trunc_ln850_reg_855_pp0_iter13_reg <= trunc_ln850_reg_855_pp0_iter12_reg;
        trunc_ln850_reg_855_pp0_iter14_reg <= trunc_ln850_reg_855_pp0_iter13_reg;
        trunc_ln850_reg_855_pp0_iter15_reg <= trunc_ln850_reg_855_pp0_iter14_reg;
        trunc_ln850_reg_855_pp0_iter16_reg <= trunc_ln850_reg_855_pp0_iter15_reg;
        trunc_ln850_reg_855_pp0_iter17_reg <= trunc_ln850_reg_855_pp0_iter16_reg;
        trunc_ln850_reg_855_pp0_iter2_reg <= trunc_ln850_reg_855;
        trunc_ln850_reg_855_pp0_iter3_reg <= trunc_ln850_reg_855_pp0_iter2_reg;
        trunc_ln850_reg_855_pp0_iter4_reg <= trunc_ln850_reg_855_pp0_iter3_reg;
        trunc_ln850_reg_855_pp0_iter5_reg <= trunc_ln850_reg_855_pp0_iter4_reg;
        trunc_ln850_reg_855_pp0_iter6_reg <= trunc_ln850_reg_855_pp0_iter5_reg;
        trunc_ln850_reg_855_pp0_iter7_reg <= trunc_ln850_reg_855_pp0_iter6_reg;
        trunc_ln850_reg_855_pp0_iter8_reg <= trunc_ln850_reg_855_pp0_iter7_reg;
        trunc_ln850_reg_855_pp0_iter9_reg <= trunc_ln850_reg_855_pp0_iter8_reg;
        zext_ln176_reg_886[7 : 0] <= zext_ln176_fu_731_p1[7 : 0];
        zext_ln176_reg_886_pp0_iter10_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter9_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter11_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter10_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter12_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter11_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter13_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter12_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter14_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter13_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter15_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter14_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter16_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter15_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter17_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter16_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter3_reg[7 : 0] <= zext_ln176_reg_886[7 : 0];
        zext_ln176_reg_886_pp0_iter4_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter3_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter5_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter4_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter6_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter5_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter7_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter6_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter8_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter7_reg[7 : 0];
        zext_ln176_reg_886_pp0_iter9_reg[7 : 0] <= zext_ln176_reg_886_pp0_iter8_reg[7 : 0];
        zext_ln179_reg_982[7 : 0] <= zext_ln179_fu_768_p1[7 : 0];
        zext_ln179_reg_982_pp0_iter12_reg[7 : 0] <= zext_ln179_reg_982[7 : 0];
        zext_ln179_reg_982_pp0_iter13_reg[7 : 0] <= zext_ln179_reg_982_pp0_iter12_reg[7 : 0];
        zext_ln179_reg_982_pp0_iter14_reg[7 : 0] <= zext_ln179_reg_982_pp0_iter13_reg[7 : 0];
        zext_ln179_reg_982_pp0_iter15_reg[7 : 0] <= zext_ln179_reg_982_pp0_iter14_reg[7 : 0];
        zext_ln179_reg_982_pp0_iter16_reg[7 : 0] <= zext_ln179_reg_982_pp0_iter15_reg[7 : 0];
        zext_ln179_reg_982_pp0_iter17_reg[7 : 0] <= zext_ln179_reg_982_pp0_iter16_reg[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln169_fu_624_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln184_reg_844 <= add_ln184_fu_666_p2;
        icmp_ln1065_reg_839 <= icmp_ln1065_fu_660_p2;
        trunc_ln1540_reg_834 <= trunc_ln1540_fu_656_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_849 <= empty_fu_672_p1;
        i_3_reg_822 <= ap_sig_allocacmp_i_3;
        lshr_ln1_reg_871 <= {{i_3_reg_822[9:2]}};
        lshr_ln_reg_866 <= {{p_Result_s_fu_675_p4[9:2]}};
        ret_V_reg_861 <= ret_V_fu_687_p2;
        sub3_cast_cast_reg_817[3 : 0] <= sub3_cast_cast_fu_594_p1[3 : 0];
        trunc_ln850_reg_855 <= trunc_ln850_fu_683_p1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_0_ce0 = 1'b1;
    end else begin
        OUT_I_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_0_ce1 = 1'b1;
    end else begin
        OUT_I_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (empty_reg_849_pp0_iter17_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_0_we0 = 1'b1;
    end else begin
        OUT_I_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (trunc_ln850_reg_855_pp0_iter17_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_0_we1 = 1'b1;
    end else begin
        OUT_I_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_1_ce0 = 1'b1;
    end else begin
        OUT_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_1_ce1 = 1'b1;
    end else begin
        OUT_I_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (empty_reg_849_pp0_iter17_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_1_we0 = 1'b1;
    end else begin
        OUT_I_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (trunc_ln850_reg_855_pp0_iter17_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_1_we1 = 1'b1;
    end else begin
        OUT_I_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_2_ce0 = 1'b1;
    end else begin
        OUT_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_2_ce1 = 1'b1;
    end else begin
        OUT_I_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (empty_reg_849_pp0_iter17_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_2_we0 = 1'b1;
    end else begin
        OUT_I_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (trunc_ln850_reg_855_pp0_iter17_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_2_we1 = 1'b1;
    end else begin
        OUT_I_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_3_ce0 = 1'b1;
    end else begin
        OUT_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_3_ce1 = 1'b1;
    end else begin
        OUT_I_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (empty_reg_849_pp0_iter17_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_3_we0 = 1'b1;
    end else begin
        OUT_I_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (trunc_ln850_reg_855_pp0_iter17_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_I_3_we1 = 1'b1;
    end else begin
        OUT_I_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_0_ce0 = 1'b1;
    end else begin
        OUT_R_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_0_ce1 = 1'b1;
    end else begin
        OUT_R_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (empty_reg_849_pp0_iter17_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_0_we0 = 1'b1;
    end else begin
        OUT_R_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (trunc_ln850_reg_855_pp0_iter17_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_0_we1 = 1'b1;
    end else begin
        OUT_R_0_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_1_ce0 = 1'b1;
    end else begin
        OUT_R_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_1_ce1 = 1'b1;
    end else begin
        OUT_R_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (empty_reg_849_pp0_iter17_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_1_we0 = 1'b1;
    end else begin
        OUT_R_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (trunc_ln850_reg_855_pp0_iter17_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_1_we1 = 1'b1;
    end else begin
        OUT_R_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_2_ce0 = 1'b1;
    end else begin
        OUT_R_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_2_ce1 = 1'b1;
    end else begin
        OUT_R_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (empty_reg_849_pp0_iter17_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_2_we0 = 1'b1;
    end else begin
        OUT_R_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (trunc_ln850_reg_855_pp0_iter17_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_2_we1 = 1'b1;
    end else begin
        OUT_R_2_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_3_ce0 = 1'b1;
    end else begin
        OUT_R_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_3_ce1 = 1'b1;
    end else begin
        OUT_R_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (empty_reg_849_pp0_iter17_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_3_we0 = 1'b1;
    end else begin
        OUT_R_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (trunc_ln850_reg_855_pp0_iter17_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        OUT_R_3_we1 = 1'b1;
    end else begin
        OUT_R_3_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_imag_ce0 = 1'b1;
    end else begin
        W_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        W_real_ce0 = 1'b1;
    end else begin
        W_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_I_0_ce0 = 1'b1;
    end else begin
        X_I_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_I_0_ce1 = 1'b1;
    end else begin
        X_I_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_I_1_ce0 = 1'b1;
    end else begin
        X_I_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_I_1_ce1 = 1'b1;
    end else begin
        X_I_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_I_2_ce0 = 1'b1;
    end else begin
        X_I_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_I_2_ce1 = 1'b1;
    end else begin
        X_I_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_I_3_ce0 = 1'b1;
    end else begin
        X_I_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_I_3_ce1 = 1'b1;
    end else begin
        X_I_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_R_0_ce0 = 1'b1;
    end else begin
        X_R_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_R_0_ce1 = 1'b1;
    end else begin
        X_R_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_R_1_ce0 = 1'b1;
    end else begin
        X_R_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_R_1_ce1 = 1'b1;
    end else begin
        X_R_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_R_2_ce0 = 1'b1;
    end else begin
        X_R_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_R_2_ce1 = 1'b1;
    end else begin
        X_R_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_R_3_ce0 = 1'b1;
    end else begin
        X_R_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        X_R_3_ce1 = 1'b1;
    end else begin
        X_R_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln169_fu_624_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter17_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ap_sig_allocacmp_i_3 = 32'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            ap_sig_allocacmp_i_3 = i_2_fu_715_p2;
        end else begin
            ap_sig_allocacmp_i_3 = p_Val2_s_fu_94;
        end
    end else begin
        ap_sig_allocacmp_i_3 = p_Val2_s_fu_94;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OUT_I_0_address0 = zext_ln179_reg_982_pp0_iter17_reg;

assign OUT_I_0_address1 = zext_ln176_reg_886_pp0_iter17_reg;

assign OUT_I_0_d0 = add1_reg_1082;

assign OUT_I_0_d1 = sub1_reg_1066;

assign OUT_I_1_address0 = zext_ln179_reg_982_pp0_iter17_reg;

assign OUT_I_1_address1 = zext_ln176_reg_886_pp0_iter17_reg;

assign OUT_I_1_d0 = add1_reg_1082;

assign OUT_I_1_d1 = sub1_reg_1066;

assign OUT_I_2_address0 = zext_ln179_reg_982_pp0_iter17_reg;

assign OUT_I_2_address1 = zext_ln176_reg_886_pp0_iter17_reg;

assign OUT_I_2_d0 = add1_reg_1082;

assign OUT_I_2_d1 = sub1_reg_1066;

assign OUT_I_3_address0 = zext_ln179_reg_982_pp0_iter17_reg;

assign OUT_I_3_address1 = zext_ln176_reg_886_pp0_iter17_reg;

assign OUT_I_3_d0 = add1_reg_1082;

assign OUT_I_3_d1 = sub1_reg_1066;

assign OUT_R_0_address0 = zext_ln179_reg_982_pp0_iter17_reg;

assign OUT_R_0_address1 = zext_ln176_reg_886_pp0_iter17_reg;

assign OUT_R_0_d0 = add_reg_1074;

assign OUT_R_0_d1 = sub_reg_1058;

assign OUT_R_1_address0 = zext_ln179_reg_982_pp0_iter17_reg;

assign OUT_R_1_address1 = zext_ln176_reg_886_pp0_iter17_reg;

assign OUT_R_1_d0 = add_reg_1074;

assign OUT_R_1_d1 = sub_reg_1058;

assign OUT_R_2_address0 = zext_ln179_reg_982_pp0_iter17_reg;

assign OUT_R_2_address1 = zext_ln176_reg_886_pp0_iter17_reg;

assign OUT_R_2_d0 = add_reg_1074;

assign OUT_R_2_d1 = sub_reg_1058;

assign OUT_R_3_address0 = zext_ln179_reg_982_pp0_iter17_reg;

assign OUT_R_3_address1 = zext_ln176_reg_886_pp0_iter17_reg;

assign OUT_R_3_d0 = add_reg_1074;

assign OUT_R_3_d1 = sub_reg_1058;

assign W_imag_address0 = zext_ln1540_fu_726_p1;

assign W_real_address0 = zext_ln1540_fu_726_p1;

assign X_I_0_address0 = zext_ln179_fu_768_p1;

assign X_I_0_address1 = zext_ln176_fu_731_p1;

assign X_I_1_address0 = zext_ln179_fu_768_p1;

assign X_I_1_address1 = zext_ln176_fu_731_p1;

assign X_I_2_address0 = zext_ln179_fu_768_p1;

assign X_I_2_address1 = zext_ln176_fu_731_p1;

assign X_I_3_address0 = zext_ln179_fu_768_p1;

assign X_I_3_address1 = zext_ln176_fu_731_p1;

assign X_R_0_address0 = zext_ln179_fu_768_p1;

assign X_R_0_address1 = zext_ln176_fu_731_p1;

assign X_R_1_address0 = zext_ln179_fu_768_p1;

assign X_R_1_address1 = zext_ln176_fu_731_p1;

assign X_R_2_address0 = zext_ln179_fu_768_p1;

assign X_R_2_address1 = zext_ln176_fu_731_p1;

assign X_R_3_address0 = zext_ln179_fu_768_p1;

assign X_R_3_address1 = zext_ln176_fu_731_p1;

assign add_ln184_fu_666_p2 = (ap_sig_allocacmp_i_3 + zext_ln157_cast_fu_598_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_pp0 = ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_170 = (trunc_ln850_reg_855_pp0_iter17_reg == 2'd2);
end

always @ (*) begin
    ap_enable_operation_172 = (trunc_ln850_reg_855_pp0_iter17_reg == 2'd2);
end

always @ (*) begin
    ap_enable_operation_174 = (trunc_ln850_reg_855_pp0_iter17_reg == 2'd1);
end

always @ (*) begin
    ap_enable_operation_176 = (trunc_ln850_reg_855_pp0_iter17_reg == 2'd1);
end

always @ (*) begin
    ap_enable_operation_178 = (trunc_ln850_reg_855_pp0_iter17_reg == 2'd0);
end

always @ (*) begin
    ap_enable_operation_180 = (trunc_ln850_reg_855_pp0_iter17_reg == 2'd0);
end

always @ (*) begin
    ap_enable_operation_182 = (trunc_ln850_reg_855_pp0_iter17_reg == 2'd3);
end

always @ (*) begin
    ap_enable_operation_184 = (trunc_ln850_reg_855_pp0_iter17_reg == 2'd3);
end

always @ (*) begin
    ap_enable_operation_190 = (empty_reg_849_pp0_iter17_reg == 2'd2);
end

always @ (*) begin
    ap_enable_operation_192 = (empty_reg_849_pp0_iter17_reg == 2'd2);
end

always @ (*) begin
    ap_enable_operation_194 = (empty_reg_849_pp0_iter17_reg == 2'd1);
end

always @ (*) begin
    ap_enable_operation_196 = (empty_reg_849_pp0_iter17_reg == 2'd1);
end

always @ (*) begin
    ap_enable_operation_198 = (empty_reg_849_pp0_iter17_reg == 2'd0);
end

always @ (*) begin
    ap_enable_operation_200 = (empty_reg_849_pp0_iter17_reg == 2'd0);
end

always @ (*) begin
    ap_enable_operation_202 = (empty_reg_849_pp0_iter17_reg == 2'd3);
end

always @ (*) begin
    ap_enable_operation_204 = (empty_reg_849_pp0_iter17_reg == 2'd3);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

always @ (*) begin
    ap_enable_state19_pp0_iter18_stage0 = ((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign empty_fu_672_p1 = i_3_reg_822[1:0];

assign i_2_fu_715_p2 = (i_fu_710_p3 + 32'd1);

assign i_fu_710_p3 = ((icmp_ln1065_reg_839[0:0] == 1'b1) ? add_ln184_reg_844 : i_3_reg_822);

assign icmp_ln1065_fu_660_p2 = ((lhs_fu_650_p2 == zext_ln160_cast_fu_602_p1) ? 1'b1 : 1'b0);

assign icmp_ln169_fu_624_p2 = (($signed(tmp_4_fu_614_p4) < $signed(22'd1)) ? 1'b1 : 1'b0);

assign lhs_fu_650_p2 = (lshr_ln674_fu_644_p2 & ap_sig_allocacmp_i_3);

assign lshr_ln674_fu_644_p2 = 32'd4294967295 >> zext_ln674_1_fu_640_p1;

always @ (*) begin
    p_Result_s_fu_675_p4 = i_3_reg_822;
    p_Result_s_fu_675_p4[sub3_cast_cast_reg_817] = |(1'd1);
end

assign sub3_cast_cast_fu_594_p1 = sub3_cast;

assign tmp_4_fu_614_p4 = {{ap_sig_allocacmp_i_3[31:10]}};

assign trunc_ln1540_fu_656_p1 = lhs_fu_650_p2[8:0];

assign trunc_ln850_fu_683_p1 = p_Result_s_fu_675_p4[1:0];

assign xor_ln674_fu_634_p2 = (zext_ln674_fu_630_p1 ^ 6'd31);

assign zext_ln1540_fu_726_p1 = ret_V_reg_861;

assign zext_ln157_cast_fu_598_p1 = zext_ln157;

assign zext_ln160_cast_fu_602_p1 = zext_ln160;

assign zext_ln176_fu_731_p1 = lshr_ln_reg_866;

assign zext_ln179_fu_768_p1 = lshr_ln1_reg_871_pp0_iter10_reg;

assign zext_ln674_1_fu_640_p1 = xor_ln674_fu_634_p2;

assign zext_ln674_fu_630_p1 = sub5_cast;

always @ (posedge ap_clk) begin
    sub3_cast_cast_reg_817[31:4] <= 28'b0000000000000000000000000000;
    zext_ln176_reg_886[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter3_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter4_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter5_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter6_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter7_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter8_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter9_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter10_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter11_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter12_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter13_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter14_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter15_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter16_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln176_reg_886_pp0_iter17_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln179_reg_982[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln179_reg_982_pp0_iter12_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln179_reg_982_pp0_iter13_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln179_reg_982_pp0_iter14_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln179_reg_982_pp0_iter15_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln179_reg_982_pp0_iter16_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln179_reg_982_pp0_iter17_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
end

endmodule //fft_fft_stages_Pipeline_DFTpts
