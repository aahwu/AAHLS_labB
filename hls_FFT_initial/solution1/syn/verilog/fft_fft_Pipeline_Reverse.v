// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fft_fft_Pipeline_Reverse (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X_R_address0,
        X_R_ce0,
        X_R_we0,
        X_R_d0,
        X_R_q0,
        X_R_address1,
        X_R_ce1,
        X_R_we1,
        X_R_d1,
        X_R_q1,
        X_I_address0,
        X_I_ce0,
        X_I_we0,
        X_I_d0,
        X_I_q0,
        X_I_address1,
        X_I_ce1,
        X_I_we1,
        X_I_d1,
        X_I_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] X_R_address0;
output   X_R_ce0;
output   X_R_we0;
output  [31:0] X_R_d0;
input  [31:0] X_R_q0;
output  [9:0] X_R_address1;
output   X_R_ce1;
output   X_R_we1;
output  [31:0] X_R_d1;
input  [31:0] X_R_q1;
output  [9:0] X_I_address0;
output   X_I_ce0;
output   X_I_we0;
output  [31:0] X_I_d0;
input  [31:0] X_I_q0;
output  [9:0] X_I_address1;
output   X_I_ce1;
output   X_I_we1;
output  [31:0] X_I_d1;
input  [31:0] X_I_q1;

reg ap_idle;
reg[9:0] X_R_address0;
reg X_R_ce0;
reg X_R_we0;
reg[9:0] X_R_address1;
reg X_R_ce1;
reg X_R_we1;
reg[9:0] X_I_address0;
reg X_I_ce0;
reg X_I_we0;
reg[9:0] X_I_address1;
reg X_I_ce1;
reg X_I_we1;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln69_fu_123_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [0:0] icmp_ln69_reg_219;
wire    ap_block_pp0_stage1_11001;
wire   [10:0] add_ln69_fu_129_p2;
reg   [10:0] add_ln69_reg_223;
wire   [0:0] p_Result_s_fu_160_p2;
reg   [0:0] p_Result_s_reg_228;
reg   [9:0] X_R_addr_reg_232;
reg   [9:0] X_I_addr_reg_237;
reg   [9:0] X_R_addr_1_reg_242;
reg   [9:0] X_I_addr_1_reg_247;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [63:0] i_2_cast_fu_138_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln587_fu_190_p1;
reg   [10:0] i_2_fu_48;
wire    ap_block_pp0_stage0_11001;
wire    ap_loop_init;
reg   [1023:0] p_Val2_s_fu_52;
reg   [1023:0] p_Result_2_fu_180_p4;
wire    ap_block_pp0_stage0;
wire   [1023:0] zext_ln825_fu_144_p1;
wire   [1023:0] shl_ln825_fu_148_p2;
wire   [1023:0] and_ln825_fu_154_p2;
reg   [9:0] or_ln37_8_fu_166_p4;
wire   [31:0] zext_ln850_fu_176_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0;
reg    ap_predicate_op42_store_state3;
reg    ap_enable_operation_42;
reg    ap_enable_state3_pp0_iter1_stage0;
reg    ap_predicate_op35_load_state2;
reg    ap_enable_operation_35;
reg    ap_enable_state2_pp0_iter0_stage1;
reg    ap_predicate_op41_load_state3;
reg    ap_enable_operation_41;
reg    ap_predicate_op45_store_state3;
reg    ap_enable_operation_45;
reg    ap_predicate_op44_store_state3;
reg    ap_enable_operation_44;
reg    ap_predicate_op37_load_state2;
reg    ap_enable_operation_37;
reg    ap_predicate_op43_load_state3;
reg    ap_enable_operation_43;
reg    ap_predicate_op46_store_state3;
reg    ap_enable_operation_46;
reg    ap_predicate_op30_load_state2;
reg    ap_enable_operation_30;
reg    ap_predicate_op39_load_state3;
reg    ap_enable_operation_39;
reg    ap_predicate_op32_load_state2;
reg    ap_enable_operation_32;
reg    ap_predicate_op40_load_state3;
reg    ap_enable_operation_40;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

fft_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_exit_pp0_iter0_stage1) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_2_fu_48 <= 11'd0;
        end else if (((icmp_ln69_reg_219 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_2_fu_48 <= add_ln69_reg_223;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        p_Val2_s_fu_52 <= 1024'd0;
    end else if (((p_Result_s_fu_160_p2 == 1'd1) & (icmp_ln69_fu_123_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_Val2_s_fu_52 <= p_Result_2_fu_180_p4;
    end
end

always @ (posedge ap_clk) begin
    if (((p_Result_s_fu_160_p2 == 1'd1) & (icmp_ln69_fu_123_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        X_I_addr_1_reg_247 <= zext_ln587_fu_190_p1;
        X_I_addr_reg_237 <= i_2_cast_fu_138_p1;
        X_R_addr_1_reg_242 <= zext_ln587_fu_190_p1;
        X_R_addr_reg_232 <= i_2_cast_fu_138_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln69_reg_223 <= add_ln69_fu_129_p2;
        icmp_ln69_reg_219 <= icmp_ln69_fu_123_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln69_fu_123_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        p_Result_s_reg_228 <= p_Result_s_fu_160_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_address0 = X_I_addr_1_reg_247;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        X_I_address0 = zext_ln587_fu_190_p1;
    end else begin
        X_I_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_address1 = X_I_addr_reg_237;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        X_I_address1 = i_2_cast_fu_138_p1;
    end else begin
        X_I_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_I_ce0 = 1'b1;
    end else begin
        X_I_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_I_ce1 = 1'b1;
    end else begin
        X_I_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_228 == 1'd1) & (icmp_ln69_reg_219 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_we0 = 1'b1;
    end else begin
        X_I_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_228 == 1'd1) & (icmp_ln69_reg_219 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_I_we1 = 1'b1;
    end else begin
        X_I_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_address0 = X_R_addr_1_reg_242;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        X_R_address0 = zext_ln587_fu_190_p1;
    end else begin
        X_R_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_address1 = X_R_addr_reg_232;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        X_R_address1 = i_2_cast_fu_138_p1;
    end else begin
        X_R_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_R_ce0 = 1'b1;
    end else begin
        X_R_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        X_R_ce1 = 1'b1;
    end else begin
        X_R_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_228 == 1'd1) & (icmp_ln69_reg_219 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_we0 = 1'b1;
    end else begin
        X_R_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((p_Result_s_reg_228 == 1'd1) & (icmp_ln69_reg_219 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        X_R_we1 = 1'b1;
    end else begin
        X_R_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln69_fu_123_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign X_I_d0 = X_I_q1;

assign X_I_d1 = X_I_q0;

assign X_R_d0 = X_R_q1;

assign X_R_d1 = X_R_q0;

assign add_ln69_fu_129_p2 = (i_2_fu_48 + 11'd1);

assign and_ln825_fu_154_p2 = (shl_ln825_fu_148_p2 & p_Val2_s_fu_52);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_pp0 = (((ap_ST_fsm_pp0_stage1 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage1_subdone)) | ((ap_ST_fsm_pp0_stage0 == ap_CS_fsm) & (1'b1 == ap_block_pp0_stage0_subdone)));
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_enable_operation_30 = (ap_predicate_op30_load_state2 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_32 = (ap_predicate_op32_load_state2 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_35 = (ap_predicate_op35_load_state2 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_37 = (ap_predicate_op37_load_state2 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_39 = (ap_predicate_op39_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_40 = (ap_predicate_op40_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_41 = (ap_predicate_op41_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_42 = (ap_predicate_op42_store_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_43 = (ap_predicate_op43_load_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_44 = (ap_predicate_op44_store_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_45 = (ap_predicate_op45_store_state3 == 1'b1);
end

always @ (*) begin
    ap_enable_operation_46 = (ap_predicate_op46_store_state3 == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_enable_state2_pp0_iter0_stage1 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1));
end

always @ (*) begin
    ap_enable_state3_pp0_iter1_stage0 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

always @ (*) begin
    ap_predicate_op30_load_state2 = ((p_Result_s_fu_160_p2 == 1'd1) & (icmp_ln69_fu_123_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op32_load_state2 = ((p_Result_s_fu_160_p2 == 1'd1) & (icmp_ln69_fu_123_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op35_load_state2 = ((p_Result_s_fu_160_p2 == 1'd1) & (icmp_ln69_fu_123_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op37_load_state2 = ((p_Result_s_fu_160_p2 == 1'd1) & (icmp_ln69_fu_123_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op39_load_state3 = ((p_Result_s_reg_228 == 1'd1) & (icmp_ln69_reg_219 == 1'd0));
end

always @ (*) begin
    ap_predicate_op40_load_state3 = ((p_Result_s_reg_228 == 1'd1) & (icmp_ln69_reg_219 == 1'd0));
end

always @ (*) begin
    ap_predicate_op41_load_state3 = ((p_Result_s_reg_228 == 1'd1) & (icmp_ln69_reg_219 == 1'd0));
end

always @ (*) begin
    ap_predicate_op42_store_state3 = ((p_Result_s_reg_228 == 1'd1) & (icmp_ln69_reg_219 == 1'd0));
end

always @ (*) begin
    ap_predicate_op43_load_state3 = ((p_Result_s_reg_228 == 1'd1) & (icmp_ln69_reg_219 == 1'd0));
end

always @ (*) begin
    ap_predicate_op44_store_state3 = ((p_Result_s_reg_228 == 1'd1) & (icmp_ln69_reg_219 == 1'd0));
end

always @ (*) begin
    ap_predicate_op45_store_state3 = ((p_Result_s_reg_228 == 1'd1) & (icmp_ln69_reg_219 == 1'd0));
end

always @ (*) begin
    ap_predicate_op46_store_state3 = ((p_Result_s_reg_228 == 1'd1) & (icmp_ln69_reg_219 == 1'd0));
end

assign i_2_cast_fu_138_p1 = i_2_fu_48;

assign icmp_ln69_fu_123_p2 = ((i_2_fu_48 == 11'd1024) ? 1'b1 : 1'b0);

integer ap_tvar_int_0;

always @ (i_2_fu_48) begin
    for (ap_tvar_int_0 = 10 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 9 - 0) begin
            or_ln37_8_fu_166_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            or_ln37_8_fu_166_p4[ap_tvar_int_0] = i_2_fu_48[9 - ap_tvar_int_0];
        end
    end
end

always @ (*) begin
    p_Result_2_fu_180_p4 = p_Val2_s_fu_52;
    p_Result_2_fu_180_p4[zext_ln850_fu_176_p1] = |(1'd1);
end

assign p_Result_s_fu_160_p2 = ((and_ln825_fu_154_p2 == 1024'd0) ? 1'b1 : 1'b0);

assign shl_ln825_fu_148_p2 = 1024'd1 << zext_ln825_fu_144_p1;

assign zext_ln587_fu_190_p1 = or_ln37_8_fu_166_p4;

assign zext_ln825_fu_144_p1 = i_2_fu_48;

assign zext_ln850_fu_176_p1 = or_ln37_8_fu_166_p4;

endmodule //fft_fft_Pipeline_Reverse
