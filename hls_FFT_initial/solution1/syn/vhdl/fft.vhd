-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fft is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_ce0 : OUT STD_LOGIC;
    X_R_we0 : OUT STD_LOGIC;
    X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_R_ce1 : OUT STD_LOGIC;
    X_R_we1 : OUT STD_LOGIC;
    X_R_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_R_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_ce0 : OUT STD_LOGIC;
    X_I_we0 : OUT STD_LOGIC;
    X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X_I_ce1 : OUT STD_LOGIC;
    X_I_we1 : OUT STD_LOGIC;
    X_I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    X_I_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fft is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fft_fft,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.256000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=2776,HLS_SYN_LUT=6459,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv19_400 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal W_real_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_real_ce0 : STD_LOGIC;
    signal W_real_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal W_imag_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal W_imag_ce0 : STD_LOGIC;
    signal W_imag_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal DFTpts_fu_150_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal DFTpts_reg_224 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln90_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_reg_229 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln98_fu_172_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln98_reg_235 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln98_fu_181_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln98_reg_243 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ret_V_fu_191_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ret_V_reg_248 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln98_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal c2_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal s2_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_Reverse_fu_104_ap_start : STD_LOGIC;
    signal grp_fft_Pipeline_Reverse_fu_104_ap_done : STD_LOGIC;
    signal grp_fft_Pipeline_Reverse_fu_104_ap_idle : STD_LOGIC;
    signal grp_fft_Pipeline_Reverse_fu_104_ap_ready : STD_LOGIC;
    signal grp_fft_Pipeline_Reverse_fu_104_X_R_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_Pipeline_Reverse_fu_104_X_R_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_Reverse_fu_104_X_R_we0 : STD_LOGIC;
    signal grp_fft_Pipeline_Reverse_fu_104_X_R_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_Reverse_fu_104_X_R_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_Pipeline_Reverse_fu_104_X_R_ce1 : STD_LOGIC;
    signal grp_fft_Pipeline_Reverse_fu_104_X_R_we1 : STD_LOGIC;
    signal grp_fft_Pipeline_Reverse_fu_104_X_R_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_Reverse_fu_104_X_I_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_Pipeline_Reverse_fu_104_X_I_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_Reverse_fu_104_X_I_we0 : STD_LOGIC;
    signal grp_fft_Pipeline_Reverse_fu_104_X_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_Reverse_fu_104_X_I_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_Pipeline_Reverse_fu_104_X_I_ce1 : STD_LOGIC;
    signal grp_fft_Pipeline_Reverse_fu_104_X_I_we1 : STD_LOGIC;
    signal grp_fft_Pipeline_Reverse_fu_104_X_I_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_DFTpts_fu_112_ap_start : STD_LOGIC;
    signal grp_fft_Pipeline_DFTpts_fu_112_ap_done : STD_LOGIC;
    signal grp_fft_Pipeline_DFTpts_fu_112_ap_idle : STD_LOGIC;
    signal grp_fft_Pipeline_DFTpts_fu_112_ap_ready : STD_LOGIC;
    signal grp_fft_Pipeline_DFTpts_fu_112_X_R_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_Pipeline_DFTpts_fu_112_X_R_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_DFTpts_fu_112_X_R_we0 : STD_LOGIC;
    signal grp_fft_Pipeline_DFTpts_fu_112_X_R_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_DFTpts_fu_112_X_R_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_Pipeline_DFTpts_fu_112_X_R_ce1 : STD_LOGIC;
    signal grp_fft_Pipeline_DFTpts_fu_112_X_R_we1 : STD_LOGIC;
    signal grp_fft_Pipeline_DFTpts_fu_112_X_R_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_DFTpts_fu_112_X_I_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_Pipeline_DFTpts_fu_112_X_I_ce0 : STD_LOGIC;
    signal grp_fft_Pipeline_DFTpts_fu_112_X_I_we0 : STD_LOGIC;
    signal grp_fft_Pipeline_DFTpts_fu_112_X_I_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fft_Pipeline_DFTpts_fu_112_X_I_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fft_Pipeline_DFTpts_fu_112_X_I_ce1 : STD_LOGIC;
    signal grp_fft_Pipeline_DFTpts_fu_112_X_I_we1 : STD_LOGIC;
    signal grp_fft_Pipeline_DFTpts_fu_112_X_I_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_92 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fft_Pipeline_Reverse_fu_104_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fft_Pipeline_DFTpts_fu_112_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln1540_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal stage_fu_62 : STD_LOGIC_VECTOR (3 downto 0);
    signal stage_3_fu_196_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln90_1_fu_146_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln90_fu_142_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal ec_V_fu_166_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ret_V_fu_191_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fft_fft_Pipeline_Reverse IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_ce0 : OUT STD_LOGIC;
        X_R_we0 : OUT STD_LOGIC;
        X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_ce1 : OUT STD_LOGIC;
        X_R_we1 : OUT STD_LOGIC;
        X_R_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_R_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_ce0 : OUT STD_LOGIC;
        X_I_we0 : OUT STD_LOGIC;
        X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_ce1 : OUT STD_LOGIC;
        X_I_we1 : OUT STD_LOGIC;
        X_I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_I_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_fft_Pipeline_DFTpts IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln98_1 : IN STD_LOGIC_VECTOR (9 downto 0);
        trunc_ln : IN STD_LOGIC_VECTOR (9 downto 0);
        X_R_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_ce0 : OUT STD_LOGIC;
        X_R_we0 : OUT STD_LOGIC;
        X_R_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_R_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_R_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_R_ce1 : OUT STD_LOGIC;
        X_R_we1 : OUT STD_LOGIC;
        X_R_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_R_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        c2 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_ce0 : OUT STD_LOGIC;
        X_I_we0 : OUT STD_LOGIC;
        X_I_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_I_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        X_I_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        X_I_ce1 : OUT STD_LOGIC;
        X_I_we1 : OUT STD_LOGIC;
        X_I_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        X_I_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        s2 : IN STD_LOGIC_VECTOR (31 downto 0);
        zext_ln98 : IN STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component fft_mul_9s_9s_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component fft_W_real_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fft_W_imag_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    W_real_U : component fft_W_real_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_real_address0,
        ce0 => W_real_ce0,
        q0 => W_real_q0);

    W_imag_U : component fft_W_imag_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_imag_address0,
        ce0 => W_imag_ce0,
        q0 => W_imag_q0);

    grp_fft_Pipeline_Reverse_fu_104 : component fft_fft_Pipeline_Reverse
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft_Pipeline_Reverse_fu_104_ap_start,
        ap_done => grp_fft_Pipeline_Reverse_fu_104_ap_done,
        ap_idle => grp_fft_Pipeline_Reverse_fu_104_ap_idle,
        ap_ready => grp_fft_Pipeline_Reverse_fu_104_ap_ready,
        X_R_address0 => grp_fft_Pipeline_Reverse_fu_104_X_R_address0,
        X_R_ce0 => grp_fft_Pipeline_Reverse_fu_104_X_R_ce0,
        X_R_we0 => grp_fft_Pipeline_Reverse_fu_104_X_R_we0,
        X_R_d0 => grp_fft_Pipeline_Reverse_fu_104_X_R_d0,
        X_R_q0 => X_R_q0,
        X_R_address1 => grp_fft_Pipeline_Reverse_fu_104_X_R_address1,
        X_R_ce1 => grp_fft_Pipeline_Reverse_fu_104_X_R_ce1,
        X_R_we1 => grp_fft_Pipeline_Reverse_fu_104_X_R_we1,
        X_R_d1 => grp_fft_Pipeline_Reverse_fu_104_X_R_d1,
        X_R_q1 => X_R_q1,
        X_I_address0 => grp_fft_Pipeline_Reverse_fu_104_X_I_address0,
        X_I_ce0 => grp_fft_Pipeline_Reverse_fu_104_X_I_ce0,
        X_I_we0 => grp_fft_Pipeline_Reverse_fu_104_X_I_we0,
        X_I_d0 => grp_fft_Pipeline_Reverse_fu_104_X_I_d0,
        X_I_q0 => X_I_q0,
        X_I_address1 => grp_fft_Pipeline_Reverse_fu_104_X_I_address1,
        X_I_ce1 => grp_fft_Pipeline_Reverse_fu_104_X_I_ce1,
        X_I_we1 => grp_fft_Pipeline_Reverse_fu_104_X_I_we1,
        X_I_d1 => grp_fft_Pipeline_Reverse_fu_104_X_I_d1,
        X_I_q1 => X_I_q1);

    grp_fft_Pipeline_DFTpts_fu_112 : component fft_fft_Pipeline_DFTpts
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_fft_Pipeline_DFTpts_fu_112_ap_start,
        ap_done => grp_fft_Pipeline_DFTpts_fu_112_ap_done,
        ap_idle => grp_fft_Pipeline_DFTpts_fu_112_ap_idle,
        ap_ready => grp_fft_Pipeline_DFTpts_fu_112_ap_ready,
        zext_ln98_1 => j_reg_92,
        trunc_ln => trunc_ln_reg_229,
        X_R_address0 => grp_fft_Pipeline_DFTpts_fu_112_X_R_address0,
        X_R_ce0 => grp_fft_Pipeline_DFTpts_fu_112_X_R_ce0,
        X_R_we0 => grp_fft_Pipeline_DFTpts_fu_112_X_R_we0,
        X_R_d0 => grp_fft_Pipeline_DFTpts_fu_112_X_R_d0,
        X_R_q0 => X_R_q0,
        X_R_address1 => grp_fft_Pipeline_DFTpts_fu_112_X_R_address1,
        X_R_ce1 => grp_fft_Pipeline_DFTpts_fu_112_X_R_ce1,
        X_R_we1 => grp_fft_Pipeline_DFTpts_fu_112_X_R_we1,
        X_R_d1 => grp_fft_Pipeline_DFTpts_fu_112_X_R_d1,
        X_R_q1 => X_R_q1,
        c2 => c2_reg_263,
        X_I_address0 => grp_fft_Pipeline_DFTpts_fu_112_X_I_address0,
        X_I_ce0 => grp_fft_Pipeline_DFTpts_fu_112_X_I_ce0,
        X_I_we0 => grp_fft_Pipeline_DFTpts_fu_112_X_I_we0,
        X_I_d0 => grp_fft_Pipeline_DFTpts_fu_112_X_I_d0,
        X_I_q0 => X_I_q0,
        X_I_address1 => grp_fft_Pipeline_DFTpts_fu_112_X_I_address1,
        X_I_ce1 => grp_fft_Pipeline_DFTpts_fu_112_X_I_ce1,
        X_I_we1 => grp_fft_Pipeline_DFTpts_fu_112_X_I_we1,
        X_I_d1 => grp_fft_Pipeline_DFTpts_fu_112_X_I_d1,
        X_I_q1 => X_I_q1,
        s2 => s2_reg_268,
        zext_ln98 => DFTpts_reg_224);

    mul_9s_9s_9_1_1_U18 : component fft_mul_9s_9s_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        dout_WIDTH => 9)
    port map (
        din0 => ret_V_fu_191_p0,
        din1 => trunc_ln98_reg_235,
        dout => ret_V_fu_191_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fft_Pipeline_DFTpts_fu_112_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft_Pipeline_DFTpts_fu_112_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_fft_Pipeline_DFTpts_fu_112_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_Pipeline_DFTpts_fu_112_ap_ready = ap_const_logic_1)) then 
                    grp_fft_Pipeline_DFTpts_fu_112_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fft_Pipeline_Reverse_fu_104_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_fft_Pipeline_Reverse_fu_104_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_fft_Pipeline_Reverse_fu_104_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fft_Pipeline_Reverse_fu_104_ap_ready = ap_const_logic_1)) then 
                    grp_fft_Pipeline_Reverse_fu_104_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_reg_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_reg_92 <= ap_const_lv10_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_fft_Pipeline_DFTpts_fu_112_ap_done = ap_const_logic_1))) then 
                j_reg_92 <= add_ln98_reg_243;
            end if; 
        end if;
    end process;

    stage_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                stage_fu_62 <= ap_const_lv4_1;
            elsif (((icmp_ln98_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                stage_fu_62 <= stage_3_fu_196_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln90_fu_136_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                DFTpts_reg_224 <= DFTpts_fu_150_p2;
                trunc_ln98_reg_235 <= trunc_ln98_fu_172_p1;
                trunc_ln_reg_229 <= DFTpts_fu_150_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln98_reg_243 <= add_ln98_fu_181_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                c2_reg_263 <= W_real_q0;
                s2_reg_268 <= W_imag_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_176_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                ret_V_reg_248 <= ret_V_fu_191_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln90_fu_136_p2, ap_CS_fsm_state4, icmp_ln98_fu_176_p2, grp_fft_Pipeline_Reverse_fu_104_ap_done, grp_fft_Pipeline_DFTpts_fu_112_ap_done, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_fft_Pipeline_Reverse_fu_104_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln90_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln98_fu_176_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_fft_Pipeline_DFTpts_fu_112_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    DFTpts_fu_150_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv11_1),to_integer(unsigned('0' & zext_ln90_1_fu_146_p1(11-1 downto 0)))));
    W_imag_address0 <= zext_ln1540_fu_206_p1(9 - 1 downto 0);

    W_imag_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            W_imag_ce0 <= ap_const_logic_1;
        else 
            W_imag_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    W_real_address0 <= zext_ln1540_fu_206_p1(9 - 1 downto 0);

    W_real_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            W_real_ce0 <= ap_const_logic_1;
        else 
            W_real_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_address0_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_I_address0, grp_fft_Pipeline_DFTpts_fu_112_X_I_address0, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_I_address0 <= grp_fft_Pipeline_DFTpts_fu_112_X_I_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_address0 <= grp_fft_Pipeline_Reverse_fu_104_X_I_address0;
        else 
            X_I_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_I_address1_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_I_address1, grp_fft_Pipeline_DFTpts_fu_112_X_I_address1, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_I_address1 <= grp_fft_Pipeline_DFTpts_fu_112_X_I_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_address1 <= grp_fft_Pipeline_Reverse_fu_104_X_I_address1;
        else 
            X_I_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_I_ce0_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_I_ce0, grp_fft_Pipeline_DFTpts_fu_112_X_I_ce0, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_I_ce0 <= grp_fft_Pipeline_DFTpts_fu_112_X_I_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_ce0 <= grp_fft_Pipeline_Reverse_fu_104_X_I_ce0;
        else 
            X_I_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_ce1_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_I_ce1, grp_fft_Pipeline_DFTpts_fu_112_X_I_ce1, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_I_ce1 <= grp_fft_Pipeline_DFTpts_fu_112_X_I_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_ce1 <= grp_fft_Pipeline_Reverse_fu_104_X_I_ce1;
        else 
            X_I_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_d0_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_I_d0, grp_fft_Pipeline_DFTpts_fu_112_X_I_d0, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_I_d0 <= grp_fft_Pipeline_DFTpts_fu_112_X_I_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_d0 <= grp_fft_Pipeline_Reverse_fu_104_X_I_d0;
        else 
            X_I_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_I_d1_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_I_d1, grp_fft_Pipeline_DFTpts_fu_112_X_I_d1, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_I_d1 <= grp_fft_Pipeline_DFTpts_fu_112_X_I_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_d1 <= grp_fft_Pipeline_Reverse_fu_104_X_I_d1;
        else 
            X_I_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_I_we0_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_I_we0, grp_fft_Pipeline_DFTpts_fu_112_X_I_we0, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_I_we0 <= grp_fft_Pipeline_DFTpts_fu_112_X_I_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_we0 <= grp_fft_Pipeline_Reverse_fu_104_X_I_we0;
        else 
            X_I_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_I_we1_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_I_we1, grp_fft_Pipeline_DFTpts_fu_112_X_I_we1, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_I_we1 <= grp_fft_Pipeline_DFTpts_fu_112_X_I_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_I_we1 <= grp_fft_Pipeline_Reverse_fu_104_X_I_we1;
        else 
            X_I_we1 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_address0_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_R_address0, grp_fft_Pipeline_DFTpts_fu_112_X_R_address0, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_R_address0 <= grp_fft_Pipeline_DFTpts_fu_112_X_R_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_address0 <= grp_fft_Pipeline_Reverse_fu_104_X_R_address0;
        else 
            X_R_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_R_address1_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_R_address1, grp_fft_Pipeline_DFTpts_fu_112_X_R_address1, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_R_address1 <= grp_fft_Pipeline_DFTpts_fu_112_X_R_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_address1 <= grp_fft_Pipeline_Reverse_fu_104_X_R_address1;
        else 
            X_R_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_R_ce0_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_R_ce0, grp_fft_Pipeline_DFTpts_fu_112_X_R_ce0, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_R_ce0 <= grp_fft_Pipeline_DFTpts_fu_112_X_R_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_ce0 <= grp_fft_Pipeline_Reverse_fu_104_X_R_ce0;
        else 
            X_R_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_ce1_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_R_ce1, grp_fft_Pipeline_DFTpts_fu_112_X_R_ce1, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_R_ce1 <= grp_fft_Pipeline_DFTpts_fu_112_X_R_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_ce1 <= grp_fft_Pipeline_Reverse_fu_104_X_R_ce1;
        else 
            X_R_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_d0_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_R_d0, grp_fft_Pipeline_DFTpts_fu_112_X_R_d0, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_R_d0 <= grp_fft_Pipeline_DFTpts_fu_112_X_R_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_d0 <= grp_fft_Pipeline_Reverse_fu_104_X_R_d0;
        else 
            X_R_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_R_d1_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_R_d1, grp_fft_Pipeline_DFTpts_fu_112_X_R_d1, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_R_d1 <= grp_fft_Pipeline_DFTpts_fu_112_X_R_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_d1 <= grp_fft_Pipeline_Reverse_fu_104_X_R_d1;
        else 
            X_R_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_R_we0_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_R_we0, grp_fft_Pipeline_DFTpts_fu_112_X_R_we0, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_R_we0 <= grp_fft_Pipeline_DFTpts_fu_112_X_R_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_we0 <= grp_fft_Pipeline_Reverse_fu_104_X_R_we0;
        else 
            X_R_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_R_we1_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_X_R_we1, grp_fft_Pipeline_DFTpts_fu_112_X_R_we1, ap_CS_fsm_state7, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            X_R_we1 <= grp_fft_Pipeline_DFTpts_fu_112_X_R_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_R_we1 <= grp_fft_Pipeline_Reverse_fu_104_X_R_we1;
        else 
            X_R_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln98_fu_181_p2 <= std_logic_vector(unsigned(j_reg_92) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_fft_Pipeline_Reverse_fu_104_ap_done)
    begin
        if ((grp_fft_Pipeline_Reverse_fu_104_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_ST_fsm_state7_blk_assign_proc : process(grp_fft_Pipeline_DFTpts_fu_112_ap_done)
    begin
        if ((grp_fft_Pipeline_DFTpts_fu_112_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state7_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state7_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state3, icmp_ln90_fu_136_p2)
    begin
        if (((icmp_ln90_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln90_fu_136_p2)
    begin
        if (((icmp_ln90_fu_136_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ec_V_fu_166_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv19_400),to_integer(unsigned('0' & zext_ln90_fu_142_p1(19-1 downto 0)))));
    grp_fft_Pipeline_DFTpts_fu_112_ap_start <= grp_fft_Pipeline_DFTpts_fu_112_ap_start_reg;
    grp_fft_Pipeline_Reverse_fu_104_ap_start <= grp_fft_Pipeline_Reverse_fu_104_ap_start_reg;
    icmp_ln90_fu_136_p2 <= "1" when (stage_fu_62 = ap_const_lv4_B) else "0";
    icmp_ln98_fu_176_p2 <= "1" when (j_reg_92 = trunc_ln_reg_229) else "0";
    ret_V_fu_191_p0 <= j_reg_92(9 - 1 downto 0);
    stage_3_fu_196_p2 <= std_logic_vector(unsigned(stage_fu_62) + unsigned(ap_const_lv4_1));
    trunc_ln98_fu_172_p1 <= ec_V_fu_166_p2(9 - 1 downto 0);
    zext_ln1540_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ret_V_reg_248),64));
    zext_ln90_1_fu_146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage_fu_62),11));
    zext_ln90_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(stage_fu_62),19));
end behav;
